@mapsize(-16384, 16384)
@AutoVisgroup = "Auto"
	[
	"Areaportals"
		[
		"func_areaportal"
		]
	"Auto"
		[
		"func_instance"
		]
	"Buttons"
		[
		"func_button"
		]
	"Commantary"
		[
		"commentary_auto"
		]
	"Doors"
		[
		"func_door"
		]
	"Gameplay"
		[
		"env_instructor_hint"
		"func_ladder"
		"func_ladderendpoint"
		"func_useableladder"
		"game_text"
		"info_ladder_dismount"
		"info_player_start"
		"info_target_instructor_hint"
		"logic_active_autosave"
		"logic_autosave"
		"point_message"
		"trigger_autosave"
		"trigger_teleport"
		]
	"Generic Vehicles"
		[
		"prop_vehicle_choreo_generic"
		]
	"Instances"
		[
		"func_instance"
		]
	"L4D"
		[
		"prop_minigun"
		"prop_minigun_l4d1"
		"weapon_gascan_spawn"
		]
	"Lights"
		[
		"beam_spotlight"
		"env_cubemap"
		"info_lighting_relative"
		"info_no_dynamic_shadow"
		"light"
		"light_directional"
		"light_spot"
		"point_spotlight"
		]
	"NPCs"
		[
		"npc_enemyfinder"
		]
	"Nodes"
		[
		"info_hint"
		"info_node"
		"info_node_air"
		"info_node_air_hint"
		"info_node_hint"
		"info_node_link"
		"info_node_link_controller"
		]
	"Notes"
		[
		"hammer_notes"
		]
	"Overlays"
		[
		"info_overlay"
		]
	"Paths"
		[
		"keyframe_track"
		]
	"Physics"
		[
		"func_clip_vphysics"
		]
	"Point Entities"
		[
		"ambient_generic"
		"ambient_music"
		"comp_choreo_sceneset"
		"comp_relay"
		"env_beam"
		"env_blood"
		"env_explosion"
		"env_fade"
		"env_glow"
		"env_laser"
		"env_lightglow"
		"env_particlelight"
		"env_particlescript"
		"env_rockettrail"
		"env_screeneffect"
		"env_screenoverlay"
		"env_shake"
		"env_soundscape"
		"env_soundscape_proxy"
		"env_soundscape_triggerable"
		"env_spark"
		"env_splash"
		"env_tonemap_controller"
		"env_tonemap_controller_ghost"
		"env_tonemap_controller_infected"
		"env_viewpunch"
		"env_zoom"
		"filter_activator_class"
		"filter_activator_context"
		"filter_activator_infected_class"
		"filter_activator_mass_greater"
		"filter_activator_model"
		"filter_activator_name"
		"filter_activator_team"
		"filter_base"
		"filter_damage_type"
		"filter_enemy"
		"filter_health"
		"filter_melee_damage"
		"filter_multi"
		"func_instance_io_proxy"
		"func_instance_origin"
		"func_instance_parms"
		"func_monitor"
		"game_end"
		"game_player_equip"
		"game_ui"
		"generic_actor"
		"info_landmark"
		"info_map_parameters"
		"info_map_parameters_versus"
		"info_particle_system"
		"info_projecteddecal"
		"info_target"
		"info_target_instructor_hint"
		"info_teleport_destination"
		"infodecal"
		"keyframe_rope"
		"logic_active_autosave"
		"logic_autosave"
		"logic_branch"
		"logic_branch_listener"
		"logic_case"
		"logic_choreographed_scene"
		"logic_collision_pair"
		"logic_compare"
		"logic_director_query"
		"logic_game_event"
		"logic_lineto"
		"logic_measure_movement"
		"logic_multicompare"
		"logic_navigation"
		"logic_relay"
		"logic_scene_list_manager"
		"logic_versus_random"
		"material_modify_control"
		"math_colorblend"
		"math_counter"
		"math_remap"
		"move_rope"
		"multisource"
		"phys_magnet"
		"phys_motor"
		"phys_ragdollmagnet"
		"phys_torque"
		"point_anglesensor"
		"point_angularvelocitysensor"
		"point_camera"
		"point_clientcommand"
		"point_proximity_sensor"
		"point_servercommand"
		"point_teleport"
		"point_tesla"
		"point_velocitysensor"
		"point_viewcontrol"
		"point_viewcontrol_multiplayer"
		"point_viewcontrol_survivor"
		"postprocess_controller"
		"scripted_sequence"
		"shadow_control"
		"spark_shower"
		"trigger_soundscape"
		"vgui_screen"
		]
	"Postcompiler"
		[
		"comp_pack"
		"comp_pack_rename"
		"comp_pack_replace_soundscript"
		"comp_precache_model"
		"comp_precache_sound"
		]
	"Prop Control"
		[
		"point_posecontroller"
		]
	"Sprites"
		[
		"env_sprite_oriented"
		]
	"Templates"
		[
		"env_entity_maker"
		]
	"Tool Brushes"
		[
		"func_occluder"
		]
	"Vehicle"
		[
		"func_breakable"
		"func_breakable_surf"
		"func_brush"
		"func_conveyor"
		"func_physbox"
		"func_physbox_multiplayer"
		"func_vehicleclip"
		"func_wall"
		"func_wall_toggle"
		"trigger_active_weapon_detect"
		"trigger_auto_crouch"
		"trigger_autosave"
		"trigger_brush"
		"trigger_changelevel"
		"trigger_escape"
		"trigger_finale"
		"trigger_gravity"
		"trigger_hurt"
		"trigger_hurt_ghost"
		"trigger_impact"
		"trigger_look"
		"trigger_playermovement"
		"trigger_proximity"
		"trigger_push"
		"trigger_remove"
		"trigger_serverragdoll"
		"trigger_standoff"
		"trigger_teleport"
		"trigger_togglesave"
		"trigger_tonemap"
		"trigger_transition"
		"trigger_upgrade_laser_sight"
		"trigger_vphysics_motion"
		"trigger_wind"
		]
	"Weapons"
		[
		"prop_minigun"
		"prop_minigun_l4d1"
		"weapon_adrenaline_spawn"
		"weapon_ammo_spawn"
		"weapon_autoshotgun_spawn"
		"weapon_chainsaw_spawn"
		"weapon_defibrillator_spawn"
		"weapon_first_aid_kit"
		"weapon_first_aid_kit_spawn"
		"weapon_gascan_spawn"
		"weapon_grenade_launcher"
		"weapon_grenade_launcher_spawn"
		"weapon_hunting_rifle_spawn"
		"weapon_item_spawn"
		"weapon_melee_spawn"
		"weapon_molotov_spawn"
		"weapon_pain_pills_spawn"
		"weapon_pipe_bomb_spawn"
		"weapon_pistol_magnum_spawn"
		"weapon_pistol_spawn"
		"weapon_pumpshotgun_spawn"
		"weapon_rifle_ak47_spawn"
		"weapon_rifle_desert_spawn"
		"weapon_rifle_m60_spawn"
		"weapon_rifle_spawn"
		"weapon_scavenge_item_spawn"
		"weapon_shotgun_chrome_spawn"
		"weapon_shotgun_spas_spawn"
		"weapon_smg_silenced_spawn"
		"weapon_smg_spawn"
		"weapon_sniper_military_spawn"
		"weapon_spawn"
		"weapon_upgradepack_explosive_spawn"
		"weapon_upgradepack_incendiary_spawn"
		"weapon_vomitjar_spawn"
		]
	"World Details"
		[
		"dynamic_prop"
		"physics_prop"
		"prop_detail"
		"prop_detail_sprite"
		"prop_dynamic"
		"prop_dynamic_ornament"
		"prop_dynamic_override"
		"prop_physics"
		"prop_physics_multiplayer"
		"prop_physics_override"
		"prop_ragdoll"
		"prop_sphere"
		"prop_static"
		"simple_physics_brush"
		"simple_physics_prop"
		]
	]
@AutoVisgroup = "Buttons"
	[
	"Basic"
		[
		"func_button"
		]
	"Momentary"
		[
		"momentary_rot_button"
		]
	"Rotatingç"
		[
		"func_rot_button"
		]
	"Timed"
		[
		"func_button_timed"
		]
	]
@AutoVisgroup = "Commantary"
	[
	"Autoç"
		[
		"commentary_auto"
		]
	"Commentary Node"
		[
		"point_commentary_node"
		]
	"Dummy"
		[
		"commentary_dummy"
		]
	"Zombie Spawner"
		[
		"commentary_zombie_spawner"
		]
	]
@AutoVisgroup = "Doors"
	[
	"Checkpoint"
		[
		"prop_door_rotating_checkpoint"
		]
	"Prop Door"
		[
		"prop_door_rotating"
		]
	"Rotating"
		[
		"func_door_rotating"
		]
	"Sliding"
		[
		"func_door"
		]
	]
@AutoVisgroup = "Gameplay"
	[
	"Autosavesç"
		[
		"logic_active_autosave"
		"logic_autosave"
		"trigger_autosave"
		]
	"Ladders"
		[
		"func_ladder"
		"func_ladderendpoint"
		"func_useableladder"
		"info_ladder_dismount"
		]
	"Player Spawn"
		[
		"info_player_start"
		]
	"Teleporters"
		[
		"trigger_teleport"
		]
	"Text/Hints"
		[
		"env_instructor_hint"
		"game_text"
		"info_target_instructor_hint"
		"point_message"
		]
	]
@AutoVisgroup = "Generic Vehicles"
	[
	"Choreo Vehicle"
		[
		"prop_vehicle_choreo_generic"
		]
	"Drivable"
		[
		"prop_vehicle_driveable"
		]
	]
@AutoVisgroup = "Lights"
	[
	"Cubemaps"
		[
		"env_cubemap"
		]
	"Directional Light"
		[
		"light_directional"
		]
	"Dynamic"
		[
		"light_dynamic"
		]
	"Environment"
		[
		"light_environment"
		]
	"Environment Light"
		[
		"light_environment"
		]
	"Info_Lighting"
		[
		"info_lighting_relative"
		"info_no_dynamic_shadow"
		]
	"Light FX"
		[
		"beam_spotlight"
		"point_spotlight"
		]
	"Omnidirectional Light"
		[
		"light"
		]
	"Proj. Texture"
		[
		"env_projectedtexture"
		]
	"Spotlight"
		[
		"light_spot"
		]
	]
@AutoVisgroup = "Nodes"
	[
	"Air Node"
		[
		"info_node_air"
		"info_node_air_hint"
		]
	"Climb Node"
		[
		"info_node_climb"
		]
	"Ground Node"
		[
		"info_node"
		"info_node_hint"
		]
	"Hint Node"
		[
		"info_hint"
		"info_node_air_hint"
		"info_node_hint"
		]
	"Node Controller"
		[
		"info_node_link"
		"info_node_link_controller"
		]
	]
@AutoVisgroup = "NPCs"
	[
	"Bullseyes"
		[
		"npc_bullseye"
		]
	"EnemyFinder NPC"
		[
		"npc_enemyfinder"
		]
	"Furniture"
		[
		"npc_furniture"
		]
	]
@AutoVisgroup = "Overlays"
	[
	"Overlay"
		[
		"info_overlay"
		]
	"Texture Toggle"
		[
		"env_texturetoggle"
		]
	"Water Overlay"
		[
		"info_overlay_transition"
		]
	]
@AutoVisgroup = "Paths"
	[
	"Crash Corner"
		[
		"path_corner_crash"
		]
	"Keyframe"
		[
		"keyframe_track"
		]
	"Path Corner"
		[
		"path_corner"
		]
	"Path Track"
		[
		"path_track"
		]
	"Track Move"
		[
		"move_track"
		]
	]
@AutoVisgroup = "Point Entities"
	[
	"Camera Controlç"
		[
		"point_viewcontrol"
		"point_viewcontrol_multiplayer"
		"point_viewcontrol_survivor"
		]
	"Decals"
		[
		"info_projecteddecal"
		"infodecal"
		]
	"Effects"
		[
		"env_beam"
		"env_blood"
		"env_explosion"
		"env_glow"
		"env_laser"
		"env_lightglow"
		"env_particlelight"
		"env_particlescript"
		"env_rockettrail"
		"env_spark"
		"env_splash"
		"info_particle_system"
		"point_tesla"
		"spark_shower"
		]
	"Global FX"
		[
		"env_fade"
		"env_screeneffect"
		"env_screenoverlay"
		"env_shake"
		"env_viewpunch"
		"env_zoom"
		]
	"Globals"
		[
		"env_tonemap_controller"
		"env_tonemap_controller_ghost"
		"env_tonemap_controller_infected"
		"info_landmark"
		"info_map_parameters"
		"info_map_parameters_versus"
		"point_clientcommand"
		"point_servercommand"
		"postprocess_controller"
		"shadow_control"
		]
	"Logic"
		[
		"comp_relay"
		"filter_activator_class"
		"filter_activator_context"
		"filter_activator_infected_class"
		"filter_activator_mass_greater"
		"filter_activator_model"
		"filter_activator_name"
		"filter_activator_team"
		"filter_base"
		"filter_damage_type"
		"filter_enemy"
		"filter_health"
		"filter_melee_damage"
		"filter_multi"
		"func_instance_io_proxy"
		"func_instance_origin"
		"func_instance_parms"
		"logic_active_autosave"
		"logic_autosave"
		"logic_branch"
		"logic_branch_listener"
		"logic_case"
		"logic_collision_pair"
		"logic_compare"
		"logic_director_query"
		"logic_game_event"
		"logic_lineto"
		"logic_measure_movement"
		"logic_multicompare"
		"logic_navigation"
		"logic_relay"
		"logic_versus_random"
		"material_modify_control"
		"math_colorblend"
		"math_counter"
		"math_remap"
		"multisource"
		"point_anglesensor"
		"point_angularvelocitysensor"
		"point_proximity_sensor"
		"point_teleport"
		"point_velocitysensor"
		]
	"Null"
		[
		"info_null"
		]
	"Physicsç"
		[
		"phys_magnet"
		"phys_motor"
		"phys_ragdollmagnet"
		"phys_torque"
		"physics_prop"
		"prop_physics"
		"prop_physics_multiplayer"
		"prop_physics_override"
		"prop_ragdoll"
		"prop_sphere"
		"simple_physics_brush"
		"simple_physics_prop"
		]
	"Player"
		[
		"game_end"
		"game_player_equip"
		"game_ui"
		]
	"Ropes"
		[
		"keyframe_rope"
		"move_rope"
		]
	"Sounds"
		[
		"ambient_generic"
		"ambient_music"
		"comp_choreo_sceneset"
		"env_soundscape"
		"env_soundscape_proxy"
		"env_soundscape_triggerable"
		"generic_actor"
		"logic_choreographed_scene"
		"logic_scene_list_manager"
		"scripted_sequence"
		"trigger_soundscape"
		]
	"Targets"
		[
		"info_target"
		"info_target_instructor_hint"
		"info_teleport_destination"
		]
	"VGUI"
		[
		"func_monitor"
		"point_camera"
		"vgui_screen"
		]
	]
@AutoVisgroup = "Postcompiler"
	[
	"Ent Mover"
		[
		"comp_entity_mover"
		]
	"Entity Finder"
		[
		"comp_entity_finder"
		]
	"KV Setter"
		[
		"comp_kv_setter"
		]
	"Numeric Transition"
		[
		"comp_numeric_transition"
		]
	"Packing"
		[
		"comp_pack"
		"comp_pack_rename"
		"comp_pack_replace_soundscript"
		]
	"Precacher"
		[
		"comp_precache_model"
		"comp_precache_sound"
		]
	"Propcombine"
		[
		"comp_propcombine_set"
		]
	"Sceneset"
		[
		"comp_choreo_sceneset"
		]
	"VScript Setter"
		[
		"comp_scriptvar_setter"
		]
	]
@AutoVisgroup = "Prop Control"
	[
	"Pose Controller"
		[
		"point_posecontroller"
		]
	]
@AutoVisgroup = "Sounds"
	[
	"Choreo"
		[
		"comp_choreo_sceneset"
		"logic_choreographed_scene"
		"logic_scene_list_manager"
		"scripted_sequence"
		]
	"Generic"
		[
		"ambient_generic"
		"generic_actor"
		]
	"Music"
		[
		"ambient_music"
		]
	"Soundscapes"
		[
		"env_soundscape"
		"env_soundscape_proxy"
		"env_soundscape_triggerable"
		"trigger_soundscape"
		]
	]
@AutoVisgroup = "Sprites"
	[
	"Oriented"
		[
		"env_sprite_oriented"
		]
	"Sprite"
		[
		"env_sprite"
		]
	"Trails"
		[
		"env_spritetrail"
		]
	]
@AutoVisgroup = "Teleporters"
	[
	"TP Point"
		[
		"point_teleport"
		]
	"Teleport Trigger"
		[
		"trigger_teleport"
		]
	]
@AutoVisgroup = "Templates"
	[
	"Entity Maker"
		[
		"env_entity_maker"
		]
	"Entity Template"
		[
		"point_template"
		]
	"NPC Templater"
		[
		"npc_template_maker"
		]
	]
@AutoVisgroup = "Text/Hints"
	[
	"Hud Hint"
		[
		"env_hudhint"
		]
	"Instructor Hints"
		[
		"env_instructor_hint"
		"info_target_instructor_hint"
		]
	"Point Message"
		[
		"point_message"
		]
	"Text"
		[
		"game_text"
		]
	]
@AutoVisgroup = "Tool Brushes"
	[
	"Occluders"
		[
		"func_occluder"
		]
	]
@AutoVisgroup = "Vehicle"
	[
	"Breakables"
		[
		"func_breakable"
		"func_breakable_surf"
		]
	"Conveyors"
		[
		"func_conveyor"
		]
	"Func Brush"
		[
		"func_brush"
		"func_wall"
		"func_wall_toggle"
		]
	"LOD Brushes"
		[
		"func_lod"
		]
	"Physbox"
		[
		"func_physbox"
		"func_physbox_multiplayer"
		]
	"Triggers"
		[
		"trigger_active_weapon_detect"
		"trigger_auto_crouch"
		"trigger_autosave"
		"trigger_brush"
		"trigger_changelevel"
		"trigger_escape"
		"trigger_finale"
		"trigger_gravity"
		"trigger_hurt"
		"trigger_hurt_ghost"
		"trigger_impact"
		"trigger_look"
		"trigger_playermovement"
		"trigger_proximity"
		"trigger_push"
		"trigger_remove"
		"trigger_serverragdoll"
		"trigger_standoff"
		"trigger_teleport"
		"trigger_togglesave"
		"trigger_tonemap"
		"trigger_transition"
		"trigger_upgrade_laser_sight"
		"trigger_vphysics_motion"
		"trigger_wind"
		]
	]
@AutoVisgroup = "VGUI"
	[
	"Special"
		[
		"vgui_screen"
		]
	"Telepresence"
		[
		"func_monitor"
		"point_camera"
		]
	]
@AutoVisgroup = "Weapons"
	[
	"L4D Weapons"
		[
		"weapon_adrenaline_spawn"
		"weapon_ammo_spawn"
		"weapon_autoshotgun_spawn"
		"weapon_chainsaw_spawn"
		"weapon_defibrillator_spawn"
		"weapon_first_aid_kit"
		"weapon_first_aid_kit_spawn"
		"weapon_gascan_spawn"
		"weapon_grenade_launcher"
		"weapon_grenade_launcher_spawn"
		"weapon_hunting_rifle_spawn"
		"weapon_item_spawn"
		"weapon_melee_spawn"
		"weapon_molotov_spawn"
		"weapon_pain_pills_spawn"
		"weapon_pipe_bomb_spawn"
		"weapon_pistol_magnum_spawn"
		"weapon_pistol_spawn"
		"weapon_pumpshotgun_spawn"
		"weapon_rifle_ak47_spawn"
		"weapon_rifle_desert_spawn"
		"weapon_rifle_m60_spawn"
		"weapon_rifle_spawn"
		"weapon_scavenge_item_spawn"
		"weapon_shotgun_chrome_spawn"
		"weapon_shotgun_spas_spawn"
		"weapon_smg_silenced_spawn"
		"weapon_smg_spawn"
		"weapon_sniper_military_spawn"
		"weapon_spawn"
		"weapon_upgradepack_explosive_spawn"
		"weapon_upgradepack_incendiary_spawn"
		"weapon_vomitjar_spawn"
		]
	"Minigun"
		[
		"prop_minigun"
		"prop_minigun_l4d1"
		]
	]
@AutoVisgroup = "World Details"
	[
	"Func Detail"
		[
		"func_detail"
		]
	"Props"
		[
		"dynamic_prop"
		"physics_prop"
		"prop_detail"
		"prop_detail_sprite"
		"prop_dynamic"
		"prop_dynamic_ornament"
		"prop_dynamic_override"
		"prop_physics"
		"prop_physics_multiplayer"
		"prop_physics_override"
		"prop_ragdoll"
		"prop_sphere"
		"prop_static"
		"simple_physics_brush"
		"simple_physics_prop"
		]
	]
@AutoVisgroup = "Areaportals"
	[
	"AP Window"
		[
		"func_areaportalwindow"
		]
	"Normalç"
		[
		"func_areaportal"
		]
	]
@AutoVisgroup = "Effects"
	[
	"Beams"
		[
		"env_beam"
		"env_laser"
		"point_tesla"
		]
	"Brief FX"
		[
		"env_blood"
		"env_explosion"
		"env_spark"
		"env_splash"
		"spark_shower"
		]
	"Fire"
		[
		"env_fire"
		]
	"Glows"
		[
		"env_glow"
		"env_lightglow"
		]
	"Particles"
		[
		"env_particlelight"
		"env_particlescript"
		"env_rockettrail"
		"info_particle_system"
		]
	"Sun"
		[
		"env_sun"
		]
	]
@AutoVisgroup = "Globals"
	[
	"3D Skybox Camera"
		[
		"sky_camera"
		]
	"Autosaves"
		[
		"logic_autosave"
		]
	"Color Correction"
		[
		"color_correction"
		]
	"DOF Controller"
		[
		"env_dof_controller"
		]
	"Detail Controller"
		[
		"env_detail_controller"
		]
	"Env Global"
		[
		"env_global"
		]
	"Fog Controller"
		[
		"env_fog_controller"
		]
	"Game End"
		[
		"game_end"
		]
	"Gib Manager"
		[
		"game_gib_manager"
		]
	"Landmarks"
		[
		"info_landmark"
		]
	"Light Environment"
		[
		"light_environment"
		]
	"Map Parameters"
		[
		"info_map_parameters"
		"info_map_parameters_versus"
		]
	"Tonemap Controller"
		[
		"env_tonemap_controller"
		"env_tonemap_controller_ghost"
		"env_tonemap_controller_infected"
		]
	"Water LOD Controller"
		[
		"water_lod_control"
		]
	"Weapon Manager"
		[
		"game_weapon_manager"
		]
	"Wind"
		[
		"env_wind"
		]
	]
@AutoVisgroup = "L4D Weapons"
	[
	"L4D Equipment"
		[
		"weapon_pain_pills_spawn"
		]
	"L4D Items"
		[
		"weapon_adrenaline_spawn"
		"weapon_item_spawn"
		"weapon_scavenge_item_spawn"
		"weapon_upgradepack_explosive_spawn"
		"weapon_upgradepack_incendiary_spawn"
		]
	"Scripted Weapons"
		[
		"weapon_first_aid_kit"
		"weapon_grenade_launcher"
		]
	"Weapon Spawners"
		[
		"weapon_ammo_spawn"
		"weapon_autoshotgun_spawn"
		"weapon_chainsaw_spawn"
		"weapon_defibrillator_spawn"
		"weapon_first_aid_kit_spawn"
		"weapon_gascan_spawn"
		"weapon_grenade_launcher_spawn"
		"weapon_hunting_rifle_spawn"
		"weapon_melee_spawn"
		"weapon_molotov_spawn"
		"weapon_pain_pills_spawn"
		"weapon_pipe_bomb_spawn"
		"weapon_pistol_magnum_spawn"
		"weapon_pistol_spawn"
		"weapon_pumpshotgun_spawn"
		"weapon_rifle_ak47_spawn"
		"weapon_rifle_desert_spawn"
		"weapon_rifle_m60_spawn"
		"weapon_rifle_spawn"
		"weapon_shotgun_chrome_spawn"
		"weapon_shotgun_spas_spawn"
		"weapon_smg_silenced_spawn"
		"weapon_smg_spawn"
		"weapon_sniper_military_spawn"
		"weapon_spawn"
		"weapon_vomitjar_spawn"
		]
	]
@AutoVisgroup = "Logic"
	[
	"Autos"
		[
		"logic_auto"
		]
	"Branches"
		[
		"logic_branch"
		"logic_branch_listener"
		"multisource"
		]
	"Comparison"
		[
		"logic_case"
		"logic_compare"
		"logic_multicompare"
		]
	"Entity Mover"
		[
		"logic_measure_movement"
		"point_teleport"
		]
	"Filters"
		[
		"filter_activator_class"
		"filter_activator_context"
		"filter_activator_infected_class"
		"filter_activator_mass_greater"
		"filter_activator_model"
		"filter_activator_name"
		"filter_activator_team"
		"filter_base"
		"filter_damage_type"
		"filter_enemy"
		"filter_health"
		"filter_melee_damage"
		"filter_multi"
		]
	"Instance Logic"
		[
		"func_instance_io_proxy"
		"func_instance_origin"
		"func_instance_parms"
		]
	"Math"
		[
		"math_colorblend"
		"math_counter"
		"math_remap"
		]
	"Other"
		[
		"logic_active_autosave"
		"logic_autosave"
		"logic_collision_pair"
		"logic_director_query"
		"logic_game_event"
		"logic_lineto"
		"logic_navigation"
		"logic_versus_random"
		"material_modify_control"
		]
	"Relays"
		[
		"comp_relay"
		"logic_relay"
		]
	"Sensors"
		[
		"point_anglesensor"
		"point_angularvelocitysensor"
		"point_proximity_sensor"
		"point_velocitysensor"
		]
	"Timers"
		[
		"logic_timer"
		]
	"VScripts"
		[
		"logic_script"
		]
	"phys_convert"
		[
		"phys_convert"
		]
	]
@AutoVisgroup = "Physicsç"
	[
	"Ballsocket"
		[
		"phys_ballsocket"
		]
	"Car Glass"
		[
		"prop_car_glass"
		]
	"Constraint Anchor"
		[
		"info_constraint_anchor"
		]
	"Constraint System"
		[
		"phys_constraintsystem"
		]
	"Fixed Constraint"
		[
		"phys_constraint"
		]
	"Hinge"
		[
		"phys_hinge"
		]
	"Keep Upright"
		[
		"phys_keepupright"
		]
	"Length Constraint"
		[
		"phys_lengthconstraint"
		]
	"Magnet"
		[
		"phys_magnet"
		"phys_ragdollmagnet"
		]
	"Mass Center"
		[
		"info_mass_center"
		]
	"Motors"
		[
		"phys_motor"
		"phys_torque"
		]
	"Pulley Constraint"
		[
		"phys_pulleyconstraint"
		]
	"Ragdoll"
		[
		"prop_ragdoll"
		]
	"Ragdoll Contraint"
		[
		"phys_ragdollconstraint"
		]
	"Ragdoll Magnet"
		[
		"phys_ragdollmagnet"
		]
	"Slide Constraint"
		[
		"phys_slideconstraint"
		]
	"Spring Constraint"
		[
		"phys_spring"
		]
	"Thrusters"
		[
		"phys_thruster"
		]
	]
@AutoVisgroup = "Props"
	[
	"Dynamicç"
		[
		"dynamic_prop"
		"prop_dynamic"
		"prop_dynamic_ornament"
		"prop_dynamic_override"
		]
	"Static"
		[
		"prop_detail"
		"prop_detail_sprite"
		"prop_static"
		]
	"Static Lighting Origins"
		[
		"info_lighting"
		]
	]
@AutoVisgroup = "Triggers"
	[
	"Death Triggers"
		[
		"trigger_hurt"
		"trigger_hurt_ghost"
		]
	"Ent Destruction"
		[
		"trigger_remove"
		]
	"Force Triggers"
		[
		"trigger_gravity"
		"trigger_impact"
		"trigger_push"
		"trigger_vphysics_motion"
		"trigger_wind"
		]
	"Level Transitions"
		[
		"trigger_changelevel"
		"trigger_finale"
		"trigger_transition"
		]
	"Player Movement Triggers"
		[
		"trigger_auto_crouch"
		"trigger_playermovement"
		]
	"Trigger Multiple"
		[
		"trigger_multiple"
		]
	"Trigger Once"
		[
		"trigger_once"
		]
	]
@AutoVisgroup = "Dynamicç"
	[
	"Car Alarm"
		[
		"prop_car_alarm"
		]
	]
@AutoVisgroup = "Filters"
	[
	"Damage Filters"
		[
		"filter_damage_type"
		"filter_health"
		"filter_melee_damage"
		]
	]

@BaseClass = Angles
	[
	angles(angle) : "Pitch Yaw Roll (Y Z X)" : "0 0 0" : "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the " + "rotation around the X axis."
	]

@BaseClass = BModelParticleSpawner
	[
	solid(choices) readonly : "Solid" : 0 : "This needs to be zero to allow this to not collide." =
		[
		0: "Non-solid"
		]

	origin(origin) readonly : "Origin" : : "If offset, this breaks."
	startdisabled(choices) : "Start Disabled" : 0 =
		[
		0: "No"
		1: "Yes"
		]

	color(color255) : "Particle Color (R G B)" : "255 255 255"
	spawnrate(integer) : "Particle Per Second" : 40 : "Number of particles to spawn, per second."
	speedmax(integer) : "Maximum Particle Speed" : 13 : "Maximum speed that the particles can move after spawning."
	lifetimemin(integer) : "Minimum Particle Lifetime" : 3 : "Minimum number of seconds until each particle dies. Particles live for a random duration between this and 'Maximum Particle Life" + "time'."
	lifetimemax(integer) : "Maximum Particle Lifetime" : 5 : "Maximum number of seconds until each particle dies. Particles live for a random duration between 'Minimum Particle Lifetime' and" + " this. Will be clamped to a max of 15."
	distmax(integer) : "Maximum Visible Distance" : 1024 : "Maximum distance at which particles are visible. They fade to translucent at this distance."
	frozen(choices) : "Frozen" : 0 : "When set, this entity spawns the number of particles in SpawnRate immediately, and then goes inactive." =
		[
		0: "No"
		1: "Yes"
		]

	nowind(choices) : "Unaffected by Wind" : 0 : "When set, wind doesn't affect the particles of this entity." =
		[
		0: "No"
		1: "Yes"
		]


	// Inputs
	input TurnOn(void) : "Turn on."
	input TurnOff(void) : "Turn off."
	]

@BaseClass = BaseEntity
	[
	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	globalname(string) : "Global Entity Name" : : "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in " + "the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
	vscripts(scriptlist) : "Entity Scripts" : : "Name(s) of script files that are executed after all entities have spawned."
	thinkfunction(string) : "Script think function" : : "Name of a function in this entity's script scope which will be called automatically."
	vscript_init_code(string) : "Init Code" : : "This code will be executed after the Entity Scripts option. Backtick ( ` ) characters will be converted to quotes in-game for st" + "rings."
	vscript_init_code2(string) : "Init Code 2" : : "This code will be the second line executed after the Entity Scripts option. Backtick ( ` ) characters will be converted to quote" + "s in-game for strings. Additional Init Code keyvalues can be added with SmartEdit off."
	linedivider_base(string) readonly : "----------------------------------------------------------------------------------------------------------"

	// Inputs
	input Kill(void) : "Removes this entity from the world."
	input KillHierarchy(void) : "Removes this entity and all its children from the world."
	input AddOutput(string) : "Adds an entity I/O connection to this entity or changes keyvalues dynamically. Format:\n'<output name> <targetname>:<inputname>:" + "<parameter>:<delay>:<max times to fire (-1 == infinite, 1 = only once)>'\nor 'keyvalue newval'. Very dangerous, use with care."
	input FireUser1(void) : "Causes this entity's OnUser1 output to be fired."
	input FireUser2(void) : "Causes this entity's OnUser2 output to be fired."
	input FireUser3(void) : "Causes this entity's OnUser3 output to be fired."
	input FireUser4(void) : "Causes this entity's OnUser4 output to be fired."
	input Use(void) : "Same as a player invoking +use; may not do anything. Can also be invoked by creating an output that does not specify an input."
	input RunScriptFile(string) : "Execute a game script file from disk."
	input RunScriptCode(script) : "Execute a string of script source code. Backtick ( ` ) characters will be converted to quotes in-game for strings."
	input CallScriptFunction(string) : "Execute the given function name."

	// Outputs
	output OnUser1(void) : "Fired in response to FireUser1 input."
	output OnUser2(void) : "Fired in response to FireUser2 input."
	output OnUser3(void) : "Fired in response to FireUser3 input."
	output OnUser4(void) : "Fired in response to FireUser4 input."
	]

@BaseClass = BaseEntityBrush
	[
	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	globalname(string) : "Global Entity Name" : : "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in " + "the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
	origin(origin) : "Origin (X Y Z)" : : "The position of this brush entity's center in the world. Rotating entities typically rotate around their origin."
	parentname(target_destination) : "Parent" : : "The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."
	parent_attachment_point(string) : "Attachment Point" : : "If set, attach to this attachment point on the parent during spawn."
	linedivider_vscript(string) readonly : "-------------------------------------------------------------------------------------------------------"
	vscripts(scriptlist) : "Entity Scripts" : : "Name(s) of script files that are executed after all entities have spawned."
	thinkfunction(string) : "Script think function" : : "Name of a function in this entity's script scope which will be called automatically."
	vscript_init_code(string) : "Init Code" : : "This code will be executed after the Entity Scripts option. Backtick ( ` ) characters will be converted to quotes in-game for st" + "rings."
	vscript_init_code2(string) : "Init Code 2" : : "This code will be the second line executed after the Entity Scripts option. Backtick ( ` ) characters will be converted to quote" + "s in-game for strings. Additional Init Code keyvalues can be added with SmartEdit off."
	linedivider_base(string) readonly : "----------------------------------------------------------------------------------------------------------"
	mins(vector) : "Minimum Bounding Box Size" : : "Co-ordinate of the minimum bounding box corner, relative to entity origin. The bounding box is drawn from this corner to the oth" + "er one. Requires Bounding Box collisions (solid 2) to be used. Can be used to overwrite the collision shape of a brush, although" + " it can only be a cuboid. Can be AddOutputed to change shape at runtime."
	maxs(vector) : "Maximum Bounding Box Size" : : "Co-ordinate of the maximum bounding box corner, relative to entity origin. The bounding box is drawn from this corner to the oth" + "er one. Requires Bounding Box collisions (solid 2) to be used. Can be used to overwrite the collision shape of a brush, although" + " it can only be a cuboid. Can be AddOutputed to change shape at runtime."
	solid(choices) : "Collisions" : 6 : "Method of collision for this entity. Can be changed at runtime with AddOutput." =
		[
		0: "None"
		1: "BSP (QPhysics)"
		2: "Bounding Box"
		3: "Oriented Bounding Box"
		4: "Oriented Bounding Box, constrained to Yaw only"
		5: "Custom (defined per-entity, if not defined the entity will have bizarre collision behavior)"
		6: "VPhysics"
		]

	linedivider_basebrush(string) readonly : "----------------------------------------------------------------------------------------------------------"

	// Inputs
	input Kill(void) : "Removes this entity from the world."
	input KillHierarchy(void) : "Removes this entity and all its children from the world."
	input SetParent(target_destination) : "Changes the entity's parent in the movement hierarchy."
	input SetParentAttachment(string) : "Change this entity to attach to a specific attachment point on its parent. Entities must be parented before being sent this inpu" + "t. The parameter passed in should be the name of the attachment."
	input SetParentAttachmentMaintainOffset(string) : "Change this entity to attach to a specific attachment point on it's parent. Entities must be parented before being sent this inp" + "ut. The parameter passed in should be the name of the attachment. The entity will maintain it's position relative to the parent " + "at the time it is attached."
	input ClearParent(void) : "Removes this entity from the the movement hierarchy, leaving it free to move independently."
	input AddOutput(string) : "Adds an entity I/O connection to this entity or changes keyvalues dynamically. Format:\n'<output name> <targetname>:<inputname>:" + "<parameter>:<delay>:<max times to fire (-1 == infinite, 1 = only once)>'\nor 'keyvalue newval'. Very dangerous, use with care."
	input FireUser1(void) : "Causes this entity's OnUser1 output to be fired."
	input FireUser2(void) : "Causes this entity's OnUser2 output to be fired."
	input FireUser3(void) : "Causes this entity's OnUser3 output to be fired."
	input FireUser4(void) : "Causes this entity's OnUser4 output to be fired."
	input Use(void) : "More or less replicates the player interacting with an entity. (+USE)"
	input RunScriptFile(string) : "Execute a game script file from disk."
	input RunScriptCode(script) : "Execute a string of script source code. Backtick ( ` ) characters will be converted to quotes in-game for strings."
	input CallScriptFunction(string) : "Execute the given function name."

	// Outputs
	output OnUser1(void) : "Fired in response to FireUser1 input."
	output OnUser2(void) : "Fired in response to FireUser2 input."
	output OnUser3(void) : "Fired in response to FireUser3 input."
	output OnUser4(void) : "Fired in response to FireUser4 input."
	]

@BaseClass = BaseEntityPoint
	[
	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	globalname(string) : "Global Entity Name" : : "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in " + "the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
	angles(angle) : "Pitch Yaw Roll (X Y Z)" : "0 0 0" : "This entity's orientation in the world. Roll is the rotation around the X axis, pitch is rotation around the Y axis and yaw is t" + "he rotation around the Z axis."
	parentname(target_destination) : "Parent" : : "The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."
	parent_attachment_point(string) : "Attachment Point" : : "If set, attach to this attachment point on the parent during spawn."
	linedivider_vscript(string) readonly : "-------------------------------------------------------------------------------------------------------"
	vscripts(scriptlist) : "Entity Scripts" : : "Name(s) of script files that are executed after all entities have spawned."
	thinkfunction(string) : "Script think function" : : "Name of a function in this entity's script scope which will be called automatically."
	vscript_init_code(string) : "Init Code" : : "This code will be executed after the Entity Scripts option. Backtick ( ` ) characters will be converted to quotes in-game for st" + "rings."
	vscript_init_code2(string) : "Init Code 2" : : "This code will be the second line executed after the Entity Scripts option. Backtick ( ` ) characters will be converted to quote" + "s in-game for strings. Additional Init Code keyvalues can be added with SmartEdit off."
	linedivider_base(string) readonly : "----------------------------------------------------------------------------------------------------------"

	// Inputs
	input Kill(void) : "Removes this entity from the world."
	input KillHierarchy(void) : "Removes this entity and all its children from the world."
	input SetParent(target_destination) : "Changes the entity's parent in the movement hierarchy."
	input SetParentAttachment(string) : "Change this entity to attach to a specific attachment point on its parent. Entities must be parented before being sent this inpu" + "t. The parameter passed in should be the name of the attachment."
	input SetParentAttachmentMaintainOffset(string) : "Change this entity to attach to a specific attachment point on it's parent. Entities must be parented before being sent this inp" + "ut. The parameter passed in should be the name of the attachment. The entity will maintain it's position relative to the parent " + "at the time it is attached."
	input ClearParent(void) : "Removes this entity from the the movement hierarchy, leaving it free to move independently."
	input AddOutput(string) : "Adds an entity I/O connection to this entity or changes keyvalues dynamically. Format:\n'<output name> <targetname>:<inputname>:" + "<parameter>:<delay>:<max times to fire (-1 == infinite, 1 = only once)>'\nor 'keyvalue newval'. Very dangerous, use with care."
	input FireUser1(void) : "Causes this entity's OnUser1 output to be fired."
	input FireUser2(void) : "Causes this entity's OnUser2 output to be fired."
	input FireUser3(void) : "Causes this entity's OnUser3 output to be fired."
	input FireUser4(void) : "Causes this entity's OnUser4 output to be fired."
	input Use(void) : "More or less replicates the player interacting with an entity. (+USE)"
	input RunScriptFile(string) : "Execute a game script file from disk."
	input RunScriptCode(script) : "Execute a string of script source code. Backtick ( ` ) characters will be converted to quotes in-game for strings."
	input CallScriptFunction(string) : "Execute the given function name."

	// Outputs
	output OnUser1(void) : "Fired in response to FireUser1 input."
	output OnUser2(void) : "Fired in response to FireUser2 input."
	output OnUser3(void) : "Fired in response to FireUser3 input."
	output OnUser4(void) : "Fired in response to FireUser4 input."
	]

@BaseClass = BaseFadeProp
	[
	fademindist(float) : "Start Fade Dist" : -1 : "Distance at which the prop starts to fade (<0 = use fademaxdist)."
	fademaxdist(float) : "End Fade Dist" : 0 : "Max fade distance at which the prop is visible (0 = don't fade out)."
	fadescale(float) : "Fade Scale" : 1 : "If you specify a fade in the worldspawn, or if the engine is running under low end/medium end/XBox360, then the engine will forc" + "ibly fade out props even if fademindist/fademaxdist isn't specified. This scale factor gives you some control over the fade. Usi" + "ng 0 here turns off the forcible fades. Numbers smaller than 1 cause the prop to fade out at further distances, and greater than" + " 1 cause it to fade out at closer distances."
	]

@BaseClass = BaseLight
	[
	_light(color255) : "Brightness" : "255 255 255 200" : "Color and brightness of the light."
	_lighthdr(color255) : "BrightnessHDR" : "-1 -1 -1 1"
	_lightscalehdr(float) : "BrightnessScaleHDR" : 1 : "Amount to scale the light by when compiling for HDR."
	style(choices) : "Appearance" : 0 =
		[
		0: "Normal"
		10: "Fluorescent flicker"
		2: "Slow, strong pulse"
		11: "Slow pulse, noblack"
		5: "Gentle pulse"
		1: "Flicker A"
		6: "Flicker B"
		3: "Candle A"
		7: "Candle B"
		8: "Candle C"
		4: "Fast strobe"
		9: "Slow strobe"
		12: "Underwater light mutation"
		]

	pattern(string) : "Custom Appearance" : : "Set a custom pattern of light brightness for this light. Pattern format is a string of characters, where 'a' is total darkness, " + "'z' fully bright. i.e. 'aaggnnttzz' would be a steppy fade in from dark to light."
	_constant_attn(string) : "Constant" : 0
	_linear_attn(string) : "Linear" : 0
	_quadratic_attn(string) : "Quadratic" : 1
	_fifty_percent_distance(string) : "50 percent falloff distance" : 0 : "Distance at which brightness should fall off to 50%. If set, overrides linear constant and quadratic paramaters."
	_zero_percent_distance(string) : "0 percent falloff distance" : 0 : "Distance at which brightness should fall off to negligible (1/256)%. Must set _fifty_percent_distance to use."
	_hardfalloff(integer) : "Hard Falloff" : 0 : "If set, causes lights to fall to exactly zero beyond the zero percent distance. May cause unrealistic lightijng if not used care" + "fully."
	_distance(integer) : "Maximum Distance" : 0 : "The distance that light is allowed to cast."

	// Inputs
	input TurnOn(void) : "Turn the light on."
	input TurnOff(void) : "The the light off."
	input Toggle(void) : "Toggle the light's current state."
	input SetPattern(string) : "Set a custom pattern of light brightness for this light. Pattern format is a string of characters, where 'a' is total darkness, " + "'z' fully bright. i.e. 'aaggnnttzz' would be a steppy fade in from dark to light."
	input FadeToPattern(string) : "Fades from first value in old pattern, to first value in the new given pattern. Pattern format is a string of characters, where " + "'a' is total darkness, 'z' fully bright. i.e. 'aaggnnttzz' would be a steppy fade in from dark to light."
	]

@BaseClass = Button
	[
	sounds(choices) : "Press Sound" : 0 : "Sound played when pressed. Choose from sounds in the Buttons.snd* category." =
		[
		0: "None (Silent)"
		100: "Light Switch"
		101: "Power Plug - Basic Electronics (soft)"
		1: "Buttons.snd1: Big zap & Warmup"
		2: "Buttons.snd2: Access Denied"
		3: "Buttons.snd3: Access Granted"
		4: "Buttons.snd4: Quick Combolock"
		5: "Buttons.snd5: Power Deadbolt 1"
		6: "Buttons.snd6: Power Deadbolt 2"
		7: "Buttons.snd7: Plunger"
		8: "Buttons.snd8: Small zap"
		9: "Buttons.snd9: Keycard Sound"
		10: "Buttons.snd10: Buzz"
		11: "Buttons.snd11: Buzz Off"
		12: "Buttons.snd12: Latch locked"
		13: "Buttons.snd13: Latch Unlocked"
		14: "Buttons.snd14: Lightswitch"
		15: "Buttons.snd15: Small bleek"
		16: "Buttons.snd16: Small deny"
		17: "Buttons.snd17: Small doop"
		18: "Buttons.snd18: Small tech deny"
		19: "Buttons.snd19: Click and combine screen fuzz"
		20: "Buttons.snd20: Roomy beep"
		21: "Buttons.snd21: Lever or Wheel: turn + move sqeek"
		22: "Buttons.snd22: Lever or Wheel: latch + release gas"
		23: "Buttons.snd23: Lever or Wheel: ratchet + sqeek"
		24: "Buttons.snd24: Lever or Wheel: large ratchet"
		25: "Buttons.snd25: Lever or Wheel: clanky + gas release"
		26: "Buttons.snd26: Lever or Wheel: latch + large metal thud"
		27: "Buttons.snd27: Lever or Wheel: smaller ratchet"
		28: "Buttons.snd28: Lever or Wheel: smaller lever move"
		31: "Buttons.snd31: Shock buzz (missing)"
		32: "Buttons.snd32: Clickbeep (missing)"
		33: "Buttons.snd33: Tech blip (missing)"
		34: "Buttons.snd34: Clickbeepbeep open"
		35: "Buttons.snd35: Small high blip"
		36: "Buttons.snd36: Small tech fuzz blip"
		37: "Buttons.snd37: Small click bleep (change to lightswitch)"
		40: "Buttons.snd40: Combine door lock - locked"
		41: "Buttons.snd41: Combine blip growl"
		42: "Buttons.snd42: Combine squick growl"
		43: "Buttons.snd43: Combine whine purr"
		44: "Buttons.snd44: Combine click talk"
		45: "Buttons.snd45: Combine click growl fizz"
		46: "Buttons.snd46: Combine click fizz (deny)"
		47: "Buttons.snd47: Combine click talker"
		]

	locked_sound(choices) : "Locked Sound" : 0 : "Sound played when the player tries to use the button, and fails because it's locked. These are sounds in the Buttons.snd* catego" + "ry." =
		[
		0: "None (Silent)"
		100: "Light Switch"
		101: "Power Plug - Basic Electronics (soft)"
		1: "Buttons.snd1: Big zap & Warmup"
		2: "Buttons.snd2: Access Denied"
		3: "Buttons.snd3: Access Granted"
		4: "Buttons.snd4: Quick Combolock"
		5: "Buttons.snd5: Power Deadbolt 1"
		6: "Buttons.snd6: Power Deadbolt 2"
		7: "Buttons.snd7: Plunger"
		8: "Buttons.snd8: Small zap"
		9: "Buttons.snd9: Keycard Sound"
		10: "Buttons.snd10: Buzz"
		11: "Buttons.snd11: Buzz Off"
		12: "Buttons.snd12: Latch locked"
		13: "Buttons.snd13: Latch Unlocked"
		14: "Buttons.snd14: Lightswitch"
		15: "Buttons.snd15: Small bleek"
		16: "Buttons.snd16: Small deny"
		17: "Buttons.snd17: Small doop"
		18: "Buttons.snd18: Small tech deny"
		19: "Buttons.snd19: Click and combine screen fuzz"
		20: "Buttons.snd20: Roomy beep"
		21: "Buttons.snd21: Lever or Wheel: turn + move sqeek"
		22: "Buttons.snd22: Lever or Wheel: latch + release gas"
		23: "Buttons.snd23: Lever or Wheel: ratchet + sqeek"
		24: "Buttons.snd24: Lever or Wheel: large ratchet"
		25: "Buttons.snd25: Lever or Wheel: clanky + gas release"
		26: "Buttons.snd26: Lever or Wheel: latch + large metal thud"
		27: "Buttons.snd27: Lever or Wheel: smaller ratchet"
		28: "Buttons.snd28: Lever or Wheel: smaller lever move"
		31: "Buttons.snd31: Shock buzz (missing)"
		32: "Buttons.snd32: Clickbeep (missing)"
		33: "Buttons.snd33: Tech blip (missing)"
		34: "Buttons.snd34: Clickbeepbeep open"
		35: "Buttons.snd35: Small high blip"
		36: "Buttons.snd36: Small tech fuzz blip"
		37: "Buttons.snd37: Small click bleep (change to lightswitch)"
		40: "Buttons.snd40: Combine door lock - locked"
		41: "Buttons.snd41: Combine blip growl"
		42: "Buttons.snd42: Combine squick growl"
		43: "Buttons.snd43: Combine whine purr"
		44: "Buttons.snd44: Combine click talk"
		45: "Buttons.snd45: Combine click growl fizz"
		46: "Buttons.snd46: Combine click fizz (deny)"
		47: "Buttons.snd47: Combine click talker"
		]

	unlocked_sound(choices) : "Unlocked Sound" : 0 : "Sound played when the button is unlocked. These are sounds in the Buttons.snd* category." =
		[
		0: "None (Silent)"
		100: "Light Switch"
		101: "Power Plug - Basic Electronics (soft)"
		1: "Buttons.snd1: Big zap & Warmup"
		2: "Buttons.snd2: Access Denied"
		3: "Buttons.snd3: Access Granted"
		4: "Buttons.snd4: Quick Combolock"
		5: "Buttons.snd5: Power Deadbolt 1"
		6: "Buttons.snd6: Power Deadbolt 2"
		7: "Buttons.snd7: Plunger"
		8: "Buttons.snd8: Small zap"
		9: "Buttons.snd9: Keycard Sound"
		10: "Buttons.snd10: Buzz"
		11: "Buttons.snd11: Buzz Off"
		12: "Buttons.snd12: Latch locked"
		13: "Buttons.snd13: Latch Unlocked"
		14: "Buttons.snd14: Lightswitch"
		15: "Buttons.snd15: Small bleek"
		16: "Buttons.snd16: Small deny"
		17: "Buttons.snd17: Small doop"
		18: "Buttons.snd18: Small tech deny"
		19: "Buttons.snd19: Click and combine screen fuzz"
		20: "Buttons.snd20: Roomy beep"
		21: "Buttons.snd21: Lever or Wheel: turn + move sqeek"
		22: "Buttons.snd22: Lever or Wheel: latch + release gas"
		23: "Buttons.snd23: Lever or Wheel: ratchet + sqeek"
		24: "Buttons.snd24: Lever or Wheel: large ratchet"
		25: "Buttons.snd25: Lever or Wheel: clanky + gas release"
		26: "Buttons.snd26: Lever or Wheel: latch + large metal thud"
		27: "Buttons.snd27: Lever or Wheel: smaller ratchet"
		28: "Buttons.snd28: Lever or Wheel: smaller lever move"
		31: "Buttons.snd31: Shock buzz (missing)"
		32: "Buttons.snd32: Clickbeep (missing)"
		33: "Buttons.snd33: Tech blip (missing)"
		34: "Buttons.snd34: Clickbeepbeep open"
		35: "Buttons.snd35: Small high blip"
		36: "Buttons.snd36: Small tech fuzz blip"
		37: "Buttons.snd37: Small click bleep (change to lightswitch)"
		40: "Buttons.snd40: Combine door lock - locked"
		41: "Buttons.snd41: Combine blip growl"
		42: "Buttons.snd42: Combine squick growl"
		43: "Buttons.snd43: Combine whine purr"
		44: "Buttons.snd44: Combine click talk"
		45: "Buttons.snd45: Combine click growl fizz"
		46: "Buttons.snd46: Combine click fizz (deny)"
		47: "Buttons.snd47: Combine click talker"
		]

	locked_sentence(choices) : "Locked Sentence" : 0 : "A sentence played when the player tries to use the button, and fails because it's locked." =
		[
		0: "None"
		1: "[NA] Gen. Access Denied"
		2: "[ND] Security Lockout"
		3: "[NF] Blast Door"
		4: "[NFIRE] Fire Door"
		5: "[NCHEM] Chemical Door"
		6: "[NRAD] Radiation Door"
		7: "[NCON] Gen. Containment"
		8: "[NH] Maintenance Door"
		9: "[NG] Broken Shut Door"
		]

	unlocked_sentence(choices) : "Unlocked Sentence" : 0 : "A sentence played when the button is unlocked." =
		[
		0: "None"
		1: "[EA] Gen. Access Granted"
		2: "[ED] Security Disengaged"
		3: "[EF] Blast Door"
		4: "[EFIRE] Fire Door"
		5: "[ECHEM] Chemical Door"
		6: "[ERAD] Radiation Door"
		7: "[ECON] gen. Containment"
		8: "[EH] Maintenance area"
		]


	// Inputs
	input Lock(void) : "Lock the button, preventing it from functioning."
	input Unlock(void) : "Unlock the button, allowing it to function."
	input Press(void) : "Activate the button as if it was pressed."
	input PressIn(void) : "Activate the button as if it was pressed, sending it to the bottom position."
	input PressOut(void) : "Unpress the button, sending it to the top position."

	// Outputs
	output OnDamaged(void) : "Fired when the button is damaged."
	output OnPressed(void) : "Fired when the button is pressed."
	output OnUseLocked(void) : "Fired when the button is used while locked."
	output OnIn(void) : "Fired when the button reaches the in/pressed position."
	output OnOut(void) : "Fired when the button reaches the out/released position."
	]

@BaseClass = DXLevelChoice
	[
	mindxlevel(choices) : "Minimum DX Level" : 0 =
		[
		0: "default (lowest)"
		70: "dx7"
		80: "dx8.0 (4600Ti)"
		81: "dx8.1 (FX5200)"
		90: "dx9 SM2.0"
		95: "dx9 SM3.0"
		]

	maxdxlevel(choices) : "Maximum DX Level" : 0 =
		[
		0: "default (highest)"
		60: "dx6"
		70: "dx7"
		80: "dx8.0 (4600Ti)"
		81: "dx8.1 (FX5200)"
		90: "dx9 SM2.0"
		95: "dx9 SM3.0"
		]

	]

@BaseClass = DamageFilter
	[
	damagefilter(filterclass) : "Damage Filter" : : "Name of the filter entity that controls which entities can damage us."

	// Inputs
	input SetDamageFilter(target_destination) : "Sets the entity to use as damage filter. Pass in an empty string to clear the damage filter."
	]

@BaseClass = DamageType
	[
	damagetype(choices) : "Damage Type" : 0 : "Kind of damage to apply. These fields can be ORed together. " =
		[
		0: "Generic"
		1: "Crush"
		2: "Bullet"
		4: "Slash"
		8: "Burn"
		16: "Freeze"
		32: "Fall"
		64: "Blast"
		128: "Club"
		256: "Shock"
		512: "Sonic"
		1024: "Energy Beam"
		16384: "Drown (blue faded)"
		32768: "Paralyse"
		65536: "Nerve Gas"
		131072: "Poison"
		262144: "Radiation"
		524288: "Drowning recovery"
		1048576: "Chemical"
		2097152: "Slow Burn"
		4194304: "Slowfreeze"
		8388608: "Gravity Gun"
		16777216: "Force Gibs"
		33554432: "Airboat"
		67108864: "Dissolve"
		]

	damageor1(choices) : "Damage Gibbing" : 0 : "Optional flags that can accompany the damage type." =
		[
		0: "Normal Behaviour"
		4096: "Never use gibs"
		8192: "Always gib if possible"
		]

	damageor2(choices) : "Prevent Physics Force" : 0 : "Prevent applying physics force to the target." =
		[
		0: "No"
		2048: "Yes"
		]

	]

@BaseClass = DetailPropBase
	[
	detailorientation(choices) : "Orientation" : 0 : "How the prop/sprite rotates to face the camera." =
		[
		0: "No rotation"
		1: "Screen Aligned"
		2: "Z axis only"
		]

	]

@BaseClass = EnableDisable
	[
	startdisabled(choices) : "Start Disabled" : 0 =
		[
		0: "No"
		1: "Yes"
		]


	// Inputs
	input Enable(void) : "Enable this entity."
	input Disable(void) : "Disable this entity."
	]

@BaseClass = Glow
	[
	glowstate(choices) : "Glow Type" : 0 =
		[
		0: "OFF"
		1: "+use"
		2: "look-at"
		3: "ON"
		]

	glowrange(integer) : "Glow Range" : 0 : "Range at which the glow becomes visible. (0 = always visible)"
	glowrangemin(integer) : "Glow Range Min" : 0 : "Range at which the glow stops being visible. (0 = always visible)"
	glowcolor(color255) : "Glow Color Override (R G B)" : "0 0 0" : "Change the render color of the glow."

	// Inputs
	input StartGlowing(void) : "Turn on a permanent glow effect for this prop."
	input StopGlowing(void) : "Turn off this prop's glow effect."
	]

@BaseClass = KeyFrame
	[
	nextkey(target_destination) : "Next KeyFrame" : : "Name of the next keyframe along this keyframe path."
	movespeed(integer) : "Speed (units per second)" : 64
	]

@BaseClass = MasterEnt
	[
	master(target_destination) : "Master (Obsolete)" : : "Legacy support: The name of a master entity. If the master hasn't been activated, this entity will not activate."
	]

@BaseClass = Mover
	[
	positioninterpolator(choices) : "Position Interpolator" : 0 =
		[
		0: "Linear"
		1: "Catmull-Rom Spline"
		]

	]

@BaseClass = NavAttributeRegion
	[
	spawnflags(flags)  =
		[
		2: "[2] Empty (no wanderers)" : 0
		32: "[32] Battlestation" : 0
		64: "[64] Finale" : 0
		128: "[128] Mission Start" : 0
		256: "[256] Battlefield" : 0
		1024: "[1024] Not Clearable" : 0
		2048: "[2048] Checkpoint" : 0
		4096: "[4096] Obscured" : 0
		8192: "[8192] No mobs" : 0
		32768: "[32768] Rescue Vehicle" : 0
		65536: "[65536] Rescue Closet" : 0
		524288: "[524288] No Threat" : 0
		1048576: "[1048576] Lying down" : 0
		]

	precise(choices) : "Precise" : 0 =
		[
		0: "No"
		1: "Yes"
		]

	crouch(choices) : "Crouch" : 0 =
		[
		0: "No"
		1: "Yes"
		]

	stairs(choices) : "Stairs" : 0 =
		[
		0: "No"
		1: "Yes"
		]

	]

@BaseClass = NavBlocker
	[
	teamtoblock(choices) : "Team(s) to block" : -1 : "Team(s) this entity should block" =
		[
		-1: "Everyone"
		2: "Survivors"
		3: "Infected"
		]

	affectsflow(choices) : "Affects Flow?" : 0 : "Does this func_nav_blocker block flow in the level? Only func_nav_blockers with this enabled will cause flow recomputation on bl" + "ocking/unblocking." =
		[
		0: "No"
		1: "Yes"
		]


	// Inputs
	input BlockNav(string) : "Starts blocking nav areas."
	input UnblockNav(void) : "Stops blocking nav areas."
	]

@BaseClass = Node
	[
	nodeid(integer) readonly : "Node ID"
	]

@BaseClass = Origin
	[
	origin(origin) : "Origin (X Y Z)" : : "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
	]

@BaseClass = Reflection
	[
	drawinfastreflection(choices) : "Render in Fast Reflections" : 0 : "If enabled, causes this entity/prop to to render in fast water reflections (i.e. when a water material specifies $reflectonlymar" + "kedentities) and in the world impostor pass." =
		[
		0: "No"
		1: "Yes"
		]


	// Inputs
	input DisableDrawInFastReflection(void) : "Turns off rendering of this entity in reflections when using $reflectonlymarkedentities in water material."
	input EnableDrawInFastReflection(void) : "Turn on rendering of this entity in reflections when using $reflectonlymarkedentities in water material."
	]

@BaseClass = RenderFields
	[
	rendermode(choices) : "Render Mode" : 0 : "Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'. \n* Color & Texture = src*a+dest*" + "(1-a)\n* Glow = src*a + dest, fixed on screen for sprites\n* Solid = Performs alphatest transparency\n* Additive = src*a + dest\" + "n* Additive FF = blend between sprite nimation frames\n* Alpha Add = src + dest*(1-a)\n* World Space Glow = src*a + dest" =
		[
		0: "Normal"
		1: "Color"
		2: "Texture"
		3: "Glow"
		4: "Solid"
		5: "Additive"
		7: "Additive Fractional Frame"
		8: "Additive Alpha"
		9: "World Space Glow"
		10: "Don't Render"
		]

	rendercolor(color255) : "FX Color (R G B)" : "255 255 255" : "A color to mix with the model/sprite."
	renderamt(integer) : "FX Alpha (0 - 255)" : 255 : "Transparency amount, requires a Render Mode other than Normal. 0 is invisible, 255 is fully visible."
	renderfx(choices) : "Render FX" : 0 : "Various somewhat legacy alpha effects. Material Proxies are more modern." =
		[
		0: "Normal"
		1: "Slow Pulse"
		2: "Fast Pulse"
		3: "Slow Wide Pulse"
		4: "Fast Wide Pulse"
		9: "Slow Strobe"
		10: "Fast Strobe"
		11: "Faster Strobe"
		12: "Slow Flicker"
		13: "Fast Flicker"
		5: "Slow Fade Away"
		6: "Fast Fade Away"
		7: "Slow Become Solid"
		8: "Fast Become Solid"
		14: "Constant Glow"
		15: "Fade Out"
		16: "Fade In"
		17: "Pulse Fast Wider"
		18: "Glow Shell"
		]

	disablereceiveshadows(choices) : "Disable Receiving Shadows" : 0 =
		[
		0: "No"
		1: "Yes"
		]


	// Inputs
	input Alpha(integer) : "Set the entity's alpha (0 - 255)."
	input Color(color255) : "Set the entity's color (R G B)."
	input EnableDraw(void) : "Draws an entity if it is not drawn."
	input DisableDraw(void) : "Undraws an entity if it is drawn."
	]

@BaseClass = ResponseContext
	[
	responsecontext(string) : "Response Contexts" : : "Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of " + "keys & values will be passed to the response rules system."

	// Inputs
	input AddContext(string) : "Adds a context to this entity's list of response contexts. The format should be 'key:value'."
	input RemoveContext(string) : "Remove a context from this entity's list of response contexts. The name should match the 'key' of a previously added context."
	input ClearContext(void) : "Removes all contexts in this entity's list of response contexts."
	]

@BaseClass = SetSkin
	[
	skin(integer) : "Skin" : 0 : "Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead o" + "f the default."
	skinset(string) : "Used Skins" : : "Set this to a space seperated list of all the skin numbers which will be used. This allows auto-packing to skip unused ones. If " + "blank all skins are assumed to be used."
	]

@BaseClass = StaticTargetName: "Targetnames only used in compilation."
	[
	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by. This entity only exists during compilation, so the name is only usable in " + "limited situations."
	]

@BaseClass = SystemLevelChoice
	[
	mincpulevel(choices) : "Minimum CPU Level" : 0 =
		[
		0: "default (low)"
		1: "low"
		2: "medium"
		3: "high"
		]

	maxcpulevel(choices) : "Maximum CPU Level" : 0 =
		[
		0: "default (high)"
		1: "low"
		2: "medium"
		3: "high"
		]

	mingpulevel(choices) : "Minimum GPU Level" : 0 =
		[
		0: "default (very low)"
		1: "very low"
		2: "low"
		3: "medium"
		4: "high"
		]

	maxgpulevel(choices) : "Maximum GPU Level" : 0 =
		[
		0: "default (high)"
		1: "very low"
		2: "low"
		3: "medium"
		4: "high"
		]

	disablex360(choices) : "Disable X360" : 0 =
		[
		0: "No"
		1: "Yes"
		]

	]

@BaseClass = TeamNum
	[
	teamnum(integer) : "Team"

	// Inputs
	input SetTeam(integer) : "Changes the entity's team."
	]

@BaseClass = Toggle
	[

	// Inputs
	input Toggle(void) : "Toggle the enabled/disabled status of this entity."
	]

@BaseClass = _Breakable
	[
	explodedamage(float) : "Explosion Damage" : 0 : "If non-zero, when this entity breaks it will create an explosion that causes the specified amount of damage. See also 'Explosion" + " Radius'."
	exploderadius(float) : "Explosion Radius" : 0 : "If non-zero, when this entity breaks it will create an explosion with a radius of the specified amount. See also 'Explosion Dama" + "ge'."
	explodemagnitude(integer) : "Explode Magnitude" : 0 : "If non-zero, when this entity breaks it will create an explosion that causes the specified amount of damage."
	performancemode(choices) : "Performance Mode" : 0 : "Used to limit the amount of gibs produced when this entity breaks, for performance reasons." =
		[
		0: "Normal"
		1: "No Gibs"
		2: "Full Gibs on All Platforms"
		3: "Reduced gibs"
		]

	pressuredelay(float) : "Pressure Delay" : 0 : "Delay, in seconds, after 'broken' by pressure before breaking apart (allows for sound to play before breaking apart)."
	breakmodelmessage(string) : "Break Model Message" : : "If set, will use this break model message instead of the normal break behavior."
	minhealthdmg(integer) : "Minimum Damage to Hurt" : 0 : "The entity will ignore any damage events if the damage is less than this amount."
	health(integer) : "Health" : 0 : "Number of points of damage to take before breaking. 0 means don't break."
	physdamagescale(float) : "Physics Impact Damage Scale" : "1.0" : "Scales damage energy when this object is hit by a physics object. Set to 1.0 for materials as strong as flesh, smaller numbers i" + "ndicate stronger materials."

	// Inputs
	input Break(void) : "Breaks the breakable."
	input SetHealth(integer) : "Sets a new value for the breakable's health. If the breakable's health reaches zero it will break."
	input AddHealth(integer) : "Adds health to the breakable. If the breakable's health reaches zero it will break."
	input RemoveHealth(integer) : "Removes health from the breakable. If the breakable's health reaches zero it will break."
	input EnablePhyscannonPickup(void) : "Makes the breakable able to picked up by the physcannon."
	input DisablePhyscannonPickup(void) : "Makes the breakable not able to picked up by the physcannon."
	input SetMass(float) : "Set mass of this object."

	// Outputs
	output OnBreak(void) : "Fired when this breakable breaks."
	output OnTakeDamage(void) : "Fired each time this breakable takes any damage."
	output OnHealthChanged(float) : "Fired when the health of this breakable changes, passing the new value of health as a percentage of max health, from [0..1]."
	output OnPhysCannonDetach(void) : "Fired when the physcannon has ripped this breakable off of the wall. Only fired if ACT_PHYSCANNON_DETACH is defined in the model" + " this breakable is using."
	output OnPhysCannonAnimatePreStarted(void) : "Fired when this prop starts playing the Pre physcannon-pull activity, caused by the player trying to grab this prop with the phy" + "scannon. Only fired if the ACT_PHYSCANNON_ANIMATE_PRE activity is defined in the model this breakable is using."
	output OnPhysCannonAnimatePullStarted(void) : "Fired when this prop starts playing the physcannon-pull activity, caused by the player trying to grab this prop with the physcan" + "non. Only fired if the ACT_PHYSCANNON_ANIMATE activity is defined in the model this breakable is using. If the prop has Pre pull" + " anim, this will be fired after the Pre anim has finished playing."
	output OnPhysCannonPullAnimFinished(void) : "Fired when this prop has finished playing the physcannon-pull activity, caused by the player trying to grab this prop with the p" + "hyscannon. Only fired if the ACT_PHYSCANNON_ANIMATE activity is defined in the model this breakable is using. If the prop has Pr" + "e & Post pull anims, this will be fired after the Post anim has finished playing."
	output OnPhysCannonAnimatePostStarted(void) : "Fired when this prop starts playing the Post physcannon-pull activity. Only fired if the ACT_PHYSCANNON_ANIMATE_POST activity is" + " defined in the model this breakable is using."
	]

@PointClass 
	iconsprite("editor/comp_entity_finder")
	sphere(radius)
	cylinder(255 255 255, targetname, targetref, radius)
	line(255 255 255, targetname, kv1_known)
	line(255 255 255, targetname, kv2_known)
	line(255 255 255, targetname, kv3_known)
	line(255 255 255, targetname, kv4_known)
	line(255 255 255, targetname, kv5_known)
= comp_entity_finder: "Finds the closest entity of a given type, then applies various transformations.Outputs from this entity will be moved to the fou" + "nd entity.Further keyvalues can be set manually with SmartEdit off."
	[
	targetname(target_source) readonly : "Targetname" : "<pack_rename>" : "Fake targetname, used to determine how containing instances are configured."
	targetcls(string) : "Target Classname" : : "Classnames of the entity to find. Multiple classnames can be specified seperated by spaces."
	radius(float) : "Search Radius" : 64 : "Radius to search inside, or 0 for infinite."
	searchfov(float) : "Search Field Of View" : 180 : "The found entity must be within this many degrees of the direction of the finder."
	angles(angle) : "Search Direction" : "0 0 0" : "If Search FOV is used, the direction to compare to."
	targetref(target_destination) : "Reference position" : : "If set, look for entities close to this entity instead of the comp_entity_finder."
	blacklist(target_destination) : "Search Blacklist" : : "If set, ignore entities matching this name."
	teleporttarget(choices) : "Teleport Target To Me" : 0 : "Move the found entity to the location of this entity or that of the reference." =
		[
		0: "No"
		1: "Yes"
		]

	makeunique(choices) : "Make Target Unique" : 0 : "Append a numeric suffix to the target's name to make it unique." =
		[
		0: "No"
		1: "Yes"
		]

	sep1(string) readonly : "----------------------------------------------------------------------------------------------------------"
	kv1_mode(choices) : "1 - Mode" : : "The first modification to perform. For Replace Outputs, outputs sent to a !name specified in Destination will be switched to poi" + "nt to the found entity." =
		[
		"": "None"
		"const2target": "Constant -> Target Ent KV"
		"const2known": "Constant -> Known Ent KV"
		"known2target": "Known Ent KV -> Target Ent KV"
		"target2known": "Target Ent KV -> Known Ent KV"
		"replacetarget": "Replace Outputs"
		]

	kv1_known(target_destination) : "1 - Known Entity" : : "The known entity to access."
	kv1_src(string) : "1 - Source" : : "Constant value to use or keyvalue name to read from."
	kv1_dest(string) : "1 - Destination" : : "Keyvalue name to write to or !special name to replace."
	sep2(string) readonly : "----------------------------------------------------------------------------------------------------------"
	kv2_mode(choices) : "2 - Mode" : : "The second modification to perform. For Replace Outputs, outputs sent to a !name specified in Destination will be switched to po" + "int to the found entity." =
		[
		"": "None"
		"const2target": "Constant -> Target KV"
		"const2known": "Constant -> Target KV"
		"known2target": "Known KV -> Target KV"
		"target2known": "Target KV -> Known KV"
		"replacetarget": "Replace Outputs"
		]

	kv2_known(target_destination) : "2 - Known Entity" : : "The known entity to access."
	kv2_src(string) : "2 - Source" : : "Constant value or keyvalue name to read from."
	kv2_dest(string) : "2 - Destination" : : "Keyvalue name to write to or !special name to replace."
	sep3(string) readonly : "----------------------------------------------------------------------------------------------------------"
	kv3_mode(choices) : "3 - Mode" : : "The third modification to perform. For Replace Outputs, outputs sent to a !name specified in Destination will be switched to poi" + "nt to the found entity." =
		[
		"": "None"
		"const2target": "Constant -> Target KV"
		"const2known": "Constant -> Target KV"
		"known2target": "Known KV -> Target KV"
		"target2known": "Target KV -> Known KV"
		"replacetarget": "Replace Outputs"
		]

	kv3_known(target_destination) : "3 - Known Entity" : : "The known entity to access."
	kv3_src(string) : "3 - Source" : : "Constant value or keyvalue name to read from."
	kv3_dest(string) : "3 - Destination" : : "Keyvalue name to write to or !special name to replace."
	sep4(string) readonly : "----------------------------------------------------------------------------------------------------------"
	kv4_mode(choices) : "4 - Mode" : : "The fourth modification to perform. For Replace Outputs, outputs sent to a !name specified in Destination will be switched to po" + "int to the found entity." =
		[
		"": "None"
		"const2target": "Constant -> Target KV"
		"const2known": "Constant -> Target KV"
		"known2target": "Known KV -> Target KV"
		"target2known": "Target KV -> Known KV"
		"replacetarget": "Replace Outputs"
		]

	kv4_known(target_destination) : "4 - Known Entity" : : "The known entity to access."
	kv4_src(string) : "4 - Source" : : "Constant value or keyvalue name to read from."
	kv4_dest(string) : "4 - Destination" : : "Keyvalue name to write to or !special name to replace."
	sep5(string) readonly : "----------------------------------------------------------------------------------------------------------"
	kv5_mode(choices) : "5 - Mode" : : "The fifth modification to perform. For Replace Outputs, outputs sent to a !name specified in Destination will be switched to poi" + "nt to the found entity." =
		[
		"": "None"
		"const2target": "Constant -> Target KV"
		"const2known": "Constant -> Target KV"
		"known2target": "Known KV -> Target KV"
		"target2known": "Target KV -> Known KV"
		"replacetarget": "Replace Outputs"
		]

	kv5_known(target_destination) : "5 - Known Entity" : : "The known entity to access."
	kv5_src(string) : "5 - Source" : : "Constant value or keyvalue name to read from."
	kv5_dest(string) : "5 - Destination" : : "Keyvalue name to write to or !special name to replace."

	// Outputs
	output OutName(void) : "Needed to allow Hammer to add outputs to this."
	]

@PointClass 
	iconsprite("editor/comp_entity_mover")
	sphere(distance)
	line(255 255 255, targetname, target)
= comp_entity_mover: "Shift an entity by a given amount. This is useful to place entities into the void, for example."
	[
	target(target_destination) : "Target Entity" : : "The name of the entity or entities to move."
	reference(target_destination) : "Reference Entity" : : "If set, the target will be offset by the amount that this entity is from the reference. The Distance will then be a multiplier."
	direction(angle) : "Direction" : "0 0 0" : "If no Reference is provided, the direction to move in."
	distance(float) : "Distance" : 1 : "The amount to move targets by."
	]

@PointClass 
	iconsprite("editor/comp_pack")
= comp_pack: "Explicitly identify resources to pack into the map. If more are needed, add additional keyvalues with SmartEdit off."
	[
	generic1(string) : "Generic" : : "Pack a file, starting in any of the content folders."
	generic2(string) : "Generic" : : "Pack a file, starting in any of the content folders."
	generic3(string) : "Generic" : : "Pack a file, starting in any of the content folders."
	generic4(string) : "Generic" : : "Pack a file, starting in any of the content folders."
	generic5(string) : "Generic" : : "Pack a file, starting in any of the content folders."
	sound1(sound) : "Sound" : : "Pack a raw sound file or a soundscript."
	sound2(sound) : "Sound" : : "Pack a raw sound file or a soundscript."
	sound3(sound) : "Sound" : : "Pack a raw sound file or a soundscript."
	sound4(sound) : "Sound" : : "Pack a raw sound file or a soundscript."
	sound5(sound) : "Sound" : : "Pack a raw sound file or a soundscript."
	model1(studio) : "Model" : : "Pack a model."
	model2(studio) : "Model" : : "Pack a model."
	model3(studio) : "Model" : : "Pack a model."
	model4(studio) : "Model" : : "Pack a model."
	model5(studio) : "Model" : : "Pack a model."
	material1(material) : "Material" : : "Pack a material."
	material2(material) : "Material" : : "Pack a material."
	material3(material) : "Material" : : "Pack a material."
	material4(material) : "Material" : : "Pack a material."
	material5(material) : "Material" : : "Pack a material."
	particle1(string) : "Particle" : : "Pack a particle system, and include in the manifest."
	particle2(string) : "Particle" : : "Pack a particle system, and include in the manifest."
	particle3(string) : "Particle" : : "Pack a particle system, and include in the manifest."
	particle4(string) : "Particle" : : "Pack a particle system, and include in the manifest."
	particle5(string) : "Particle" : : "Pack a particle system, and include in the manifest."
	soundscript1(string) : "SoundScript" : : "Pack a soundscript file, and include in the manifest."
	soundscript2(string) : "SoundScript" : : "Pack a soundscript file, and include in the manifest."
	soundscript3(string) : "SoundScript" : : "Pack a soundscript file, and include in the manifest."
	soundscript4(string) : "SoundScript" : : "Pack a soundscript file, and include in the manifest."
	soundscript5(string) : "SoundScript" : : "Pack a soundscript file, and include in the manifest."
	]

@PointClass 
	iconsprite("editor/comp_pack_rename")
= comp_pack_rename: "Pack a file into the BSP, under a different name than it starts with."
	[
	filesrc(string) : "Source Filename" : : "Filename to read data from."
	filedest(string) : "Destination Filename" : : "Filename to pack under."
	filetype(choices) : "File Type" : "GENERIC" : "File type to record it as." =
		[
		"GENERIC": "Generic"
		"SOUNDSCRIPT": "SoundScript file (add to manifest)"
		"PARTICLE_FILE": "Particle System (add to manifest)"
		"VSCRIPT_SQUIRREL": "VScript (Squirrel)"
		"MATERIAL": "Material"
		"TEXTURE": "Texture"
		"MODEL": "Model"
		]

	]

@PointClass 
	iconsprite("editor/comp_pack_replace_soundscript")
= comp_pack_replace_soundscript: "Replace a soundscript with a different one."
	[
	original(string) : "Original SoundScript" : : "Prevent this soundscript from being included."
	replacement(string) : "New SoundScript" : : "Force this soundscript to be included."
	]

@PointClass 
	iconsprite("editor/comp_precache_sound")
= comp_precache_sound: "Force a specific sound to load, for runtime switching. Duplicates will be removed. More keyvalues can be added."
	[
	sound1(sound) : "Sound" : : "Pack and precache a raw sound file or a soundscript."
	sound2(sound) : "Sound" : : "Pack and precache a raw sound file or a soundscript."
	sound3(sound) : "Sound" : : "Pack and precache a raw sound file or a soundscript."
	sound4(sound) : "Sound" : : "Pack and precache a raw sound file or a soundscript."
	sound5(sound) : "Sound" : : "Pack and precache a raw sound file or a soundscript."
	sound6(sound) : "Sound" : : "Pack and precache a raw sound file or a soundscript."
	sound7(sound) : "Sound" : : "Pack and precache a raw sound file or a soundscript."
	sound8(sound) : "Sound" : : "Pack and precache a raw sound file or a soundscript."
	sound9(sound) : "Sound" : : "Pack and precache a raw sound file or a soundscript."
	sound10(sound) : "Sound" : : "Pack and precache a raw sound file or a soundscript."
	]

@PointClass 
	color(0 0 255)
	sidelist()
	iconsprite("editor/env_cubemap.vmt")
	line(255 255 255, targetname, parallaxobb)
= env_cubemap: "An entity that creates a sample point for the Cubic Environment Map."
	[
	cubemapsize(choices) : "Cubemap Size" : 0 =
		[
		0: "Default"
		1: "1x1"
		2: "2x2"
		3: "4x4"
		4: "8x8"
		5: "16x16"
		6: "32x32"
		7: "64x64"
		8: "128x128"
		9: "256x256"
		]

	sides(sidelist) : "Brush faces" : : "(Optional) Brushes faces to directly attach to the env_cubemap. Press Pick then click on faces in the 3D View to select them. Us" + "e CTRL while clicking to add or remove from the selection."
	]

@SolidClass 
	color(0 180 0)
= func_detail: "An entity that turns its brushes into detail brushes. Detail brushes do NOT contribute to visibility in the PVS. World geometry " + "is not clipped to detail brushes, so if you have a small detail clump attached to a wall, the wall won't be cut up by the detail" + " brush. func_detail is great for high-frequency brush geometry that's visual detail only. It is also ideal for reducing map VIS " + "time."
	[
	]

@SolidClass = func_detail_blocker: "A brush entity that prevents detail sprites from being placed inside its volume."
	[
	]

@PointClass 
	sphere(max_range)
	iconsprite("editor/ficool2/func_fish_pool")
= func_fish_pool: "Creates a school of interactive fish that swim near this entity."
	[
	model(studio) : "World model" : "models/Junkola.mdl"
	fish_count(integer) : "Fish Count" : 10 : "Number of Fish in this Pool"
	max_range(float) : "Max Range" : 150 : "How far away a Fish can wander (max 255)"
	]

@PointClass 
	iconsprite("editor/func_instance_io_proxy.vmt")
= func_instance_io_proxy: "Place one copy of this entity inside of an instance.  Sending messages to entities inside the instance from the Proxy's OnProxyR" + "elay output will allow you to trigger these entities from outside the instance by sending messages to the func_instance.  Send t" + "he ProxyRelay message from entities inside the instance to the proxy and you will be able to use these events to send messages t" + "o other entities outside the instance from the func_instance. NOTE: The instance, the proxy, and all entities involved should be" + " named descriptively."
	[
	targetname(target_source) : "Name" : "proxy" : "The name that other entities refer to this entity by."

	// Inputs
	input ProxyRelay(string) : "This message will get relayed and will be available from the instance."
	input ProxyRelay1(string) : "Added by the compiler, this is used internally to connect the outputs."
	input ProxyRelay2(string) : "Added by the compiler, this is used internally to connect the outputs."
	input ProxyRelay3(string) : "Added by the compiler, this is used internally to connect the outputs."
	input ProxyRelay4(string) : "Added by the compiler, this is used internally to connect the outputs."
	input ProxyRelay5(string) : "Added by the compiler, this is used internally to connect the outputs."

	// Outputs
	output OnProxyRelay(void) : "A message from outside can trigger this to cause something to happen in the instance."
	]

@PointClass 
	iconsprite("editor/func_instance_origin.vmt")
= func_instance_origin: "This is the center of the instance for rotation."
	[
	]

@PointClass 
	iconsprite("editor/func_instance_parms.vmt")
= func_instance_parms: "Place one copy of this entity inside of an instance.  Whenever you add a $parameter for the instance, get the properties of this" + " entity.  It will auto-populate it with the variables and allow you to indicate the variable type."
	[
	parm1(instance_parm) : "Parm (01)" : : "This is a parameter.  It goes in the form of $variable type [default value]."
	parm2(instance_parm) : "Parm (02)" : : "This is a parameter.  It goes in the form of $variable type [default value]."
	parm3(instance_parm) : "Parm (03)" : : "This is a parameter.  It goes in the form of $variable type [default value]."
	parm4(instance_parm) : "Parm (04)" : : "This is a parameter.  It goes in the form of $variable type [default value]."
	parm5(instance_parm) : "Parm (05)" : : "This is a parameter.  It goes in the form of $variable type [default value]."
	parm6(instance_parm) : "Parm (06)" : : "This is a parameter.  It goes in the form of $variable type [default value]."
	parm7(instance_parm) : "Parm (07)" : : "This is a parameter.  It goes in the form of $variable type [default value]."
	parm8(instance_parm) : "Parm (08)" : : "This is a parameter.  It goes in the form of $variable type [default value]."
	parm9(instance_parm) : "Parm (09)" : : "This is a parameter.  It goes in the form of $variable type [default value]."
	parm10(instance_parm) : "Parm (10)" : : "This is a parameter.  It goes in the form of $variable type [default value]."
	parm11(instance_parm) : "Parm (11)" : : "This is a parameter.  It goes in the form of $variable type [default value]."
	parm12(instance_parm) : "Parm (12)" : : "This is a parameter.  It goes in the form of $variable type [default value]."
	parm13(instance_parm) : "Parm (13)" : : "This is a parameter.  It goes in the form of $variable type [default value]."
	parm14(instance_parm) : "Parm (14)" : : "This is a parameter.  It goes in the form of $variable type [default value]."
	parm15(instance_parm) : "Parm (15)" : : "This is a parameter.  It goes in the form of $variable type [default value]."
	parm16(instance_parm) : "Parm (16)" : : "This is a parameter.  It goes in the form of $variable type [default value]."
	parm17(instance_parm) : "Parm (17)" : : "This is a parameter.  It goes in the form of $variable type [default value]."
	parm18(instance_parm) : "Parm (18)" : : "This is a parameter.  It goes in the form of $variable type [default value]."
	parm19(instance_parm) : "Parm (19)" : : "This is a parameter.  It goes in the form of $variable type [default value]."
	parm20(instance_parm) : "Parm (20)" : : "This is a parameter.  It goes in the form of $variable type [default value]."
	parm21(instance_parm) : "Parm (21)" : : "This is a parameter.  It goes in the form of $variable type [default value]."
	parm22(instance_parm) : "Parm (22)" : : "This is a parameter.  It goes in the form of $variable type [default value]."
	parm23(instance_parm) : "Parm (23)" : : "This is a parameter.  It goes in the form of $variable type [default value]."
	parm24(instance_parm) : "Parm (24)" : : "This is a parameter.  It goes in the form of $variable type [default value]."
	parm25(instance_parm) : "Parm (25)" : : "This is a parameter.  It goes in the form of $variable type [default value]."
	parm26(instance_parm) : "Parm (26)" : : "This is a parameter.  It goes in the form of $variable type [default value]."
	parm27(instance_parm) : "Parm (27)" : : "This is a parameter.  It goes in the form of $variable type [default value]."
	parm28(instance_parm) : "Parm (28)" : : "This is a parameter.  It goes in the form of $variable type [default value]."
	parm29(instance_parm) : "Parm (29)" : : "This is a parameter.  It goes in the form of $variable type [default value]."
	parm30(instance_parm) : "Parm (30)" : : "This is a parameter.  It goes in the form of $variable type [default value]."
	]

@SolidClass = func_ladder: "Ladder. Players will be able to freely along one side of this brush, as if it was a ladder. If you are using a model prop for th" + "e visual representation of the ladder in the map, apply the toolsinvisibleladder material to the climbable side of the func_ladd" + "er brush."
	[
	]

@SolidClass 
	color(180 180 0)
= func_viscluster: "Any visleafs touching this brush will assume they can see each other. Place across large open areas to help reduce compile times" + "."
	[
	]

@PointClass 
	iconsprite("editor/ts_book.vmt")
	line(255 255 255, targetname, linename1)
	line(255 0 0, targetname, linename2)
	line(0 255 0, targetname, linename3)
	line(0 0 255, targetname, linename4)
= hammer_notes: "Fake entity to store notes and comments inside. Won`t spawn."
	[
	linename1(target_destination) : "White Related Entity" : : "Add entity names to have lines drawn to them."
	linename2(target_destination) : "Red Related Entity" : : "Add entity names to have lines drawn to them."
	linename3(target_destination) : "Green Related Entity" : : "Add entity names to have lines drawn to them."
	linename4(target_destination) : "Blue Related Entity" : : "Add entity names to have lines drawn to them."
	mat(material) : "Material Chooser" : : "Has the material browser for easier editing."
	part(string) : "Particle Chooser" : : "Has the particle system chooser for easier editing."
	model(studio) : "Model Chooser" : : "Has the model chooser for easier editing."
	sound(sound) : "Sound Chooser" : : "Has the sound chooser for easier editing."
	]

@PointClass 
	size(-4 -4 -4, 4 4 4)
	color(0 180 0)
	line(255 255 0, targetname, target)
= info_intermission: "An entity that defines an intermission spot where dead players will float until they respawn."
	[
	target(target_destination) : "Entity to look at" : : "Name of entity that dead players will face while in intermission at this spot."
	]

@PointClass 
	halfgridsnap
	iconsprite("editor/ficool2/info_mass_center.vmt")
	color(128 128 128)
	line(128 128 128, targetname, target)
= info_mass_center: "An entity that overrides the mass center of the target physics object, by moving it to the info_mass_center's location. This kil" + "ls itself on spawn."
	[
	target(target_destination) : "Target object" : : "The entity whose mass center will be overridden."
	]

@PointClass 
	iconsprite("editor/info_no_dynamic_shadow.vmt")
	color(200 200 0)
= info_no_dynamic_shadow: "Use this entity to mark surfaces that shouldn't receive dynamic shadows. Useful to apply to walls and floors where shadows are d" + "rawn improperly, giving away the location of enemies."
	[
	sides(sidelist) : "Brush faces"
	]

@PointClass 
	color(80 150 225)
	studio("models/editor/overlay_helper.mdl")
	sidelist()
	sidelist(sides2)
	overlay_transition()
= info_overlay_transition: "This creates a scrolling texture at the instersect between two brushes, for things like wave effects at water edges."
	[
	material(material) : "Material"
	sides(sidelist) : "Brush faces"
	sides2(sidelist) : "Water faces"
	lengthtexcoordstart(float) : "Texcoord Length Start" : "0.0"
	lengthtexcoordend(float) : "Texcoord Length End" : "1.0"
	widthtexcoordstart(float) : "Texcoord Width Start" : "0.0"
	widthtexcoordend(float) : "Texcoord Width End" : "1.0"
	width1(float) : "Width Land" : "25.0"
	width2(float) : "Width Water" : "25.0"
	debugdraw(choices) : "Show Debug" : 0 =
		[
		0: "No"
		1: "Yes"
		]

	]

@PointClass = model_studio: "An old dummy model entity, which acts exactly like cycler."
	[
	]

@BaseClass base(BaseEntityPoint, RenderFields, Reflection) = BaseBeam: "This is the definition of the 'beam' class, but we don't want that in the entity list."
	[
	rendermode(choices) readonly : "Render Mode" : 1 : "Render mode is forced to Texture, but set to Color in Hammer to ensure correct rendering." =
		[
		1: "Color"
		]

	renderamt(integer) : "Brightness (1 - 255)" : 100
	rendercolor(color255) : "Beam Color (R G B)" : "255 255 255"
	hdrcolorscale(float) : "HDR color scale." : "1.0" : "float value to multiply sprite color by when running in HDR mode."
	noiseamplitude(float) : "Amount of noise (0-64)" : 0 : "The amount of noise in the beam. 0 is a perfectly straight beam."
	framerate(integer) : "Frames per 10 seconds" : 0 : "Framerate at which the beam texture should animate, if it has multiple frames."
	framestart(integer) : "Starting Frame" : 0 : "The frame to start the beam texture on."
	texture(sprite) : "Sprite Name" : "sprites/laserbeam.spr" : "The material used to draw the beam."
	texturescroll(integer) : "Texture Scroll Rate (0-100)" : 35 : "Rate at which the beam texture should scroll along the beam."
	damage(string) : "Damage / second" : 0 : "How much damage this beam does per second to things while active. For continuous damage, the value should be greater than 10 or " + "it may not work."
	dissolvetype(choices) : "Dissolve Type" : -1 =
		[
		-1: "None"
		0: "Energy"
		1: "Heavy electrical"
		2: "Light electrical"
		]


	// Inputs
	input TurnOn(void) : "Turns the beam on."
	input TurnOff(void) : "Turns the beam off."
	input Toggle(void) : "Toggles the beam between on and off."
	input Width(float) : "Set the width of the beam, in pixels."
	input ScrollSpeed(float) : "Set the scroll speed in units per second (0 - 100)."
	input Alpha(integer) : "Sets the beam's alpha (0 - 255)."
	input Color(color255) : "Sets the beam's render color (R G B)."
	input ColorRedValue(float) : "Sets the red color channel's value (0 - 255)."
	input ColorGreenValue(float) : "Sets the green color channel's value (0 - 255)."
	input ColorBlueValue(float) : "Sets the blue color channel's value (0 - 255)."
	]

@BaseClass base(BaseEntityPoint, RenderFields, Reflection) = BaseEntityAnimating
	[
	effects(choices) : "Effect Flags" : 0 : "For configuring visual effects. If you want to combine effects, turn SmartEdit off and add the effect numbers together, i.e. 64 " + "+ 8 = 72." =
		[
		0: "None"
		1: "Bonemerge always, very expensive!!"
		2: "Bright, dynamic light at entity origin"
		4: "Dim, dynamic light at entity origin"
		8: "No movement interpolation"
		16: "Don't cast shadows"
		32: "Don't draw entity (entity is fully ignored by clients, NOT server)"
		64: "Don't receive dynamic shadows"
		128: "Bonemerge only in PVS, better performance but prone to disappearing. Use with Bonemerge."
		256: "Blinking glow"
		512: "Flag parent as always animating and realign each frame"
		]

	solid(choices) : "Collisions" : 6 : "Method of collision for this entity. Can be changed at runtime with AddOutput." =
		[
		0: "None"
		1: "BSP (QPhysics)"
		2: "Bounding Box"
		3: "Oriented Bounding Box"
		4: "Oriented Bounding Box, constrained to Yaw only"
		5: "Custom (defined per-entity, if not defined the entity will have bizarre collision behavior)"
		6: "VPhysics"
		]

	body(integer) : "Bodygroup" : 0 : "Body Groups allow turning on and off parts of a model, so sections can be shown or hidden dynamically."
	setbodygroup(integer) : "(Set) Body Group" : 0 : "Identical to Body Group (body), ask Valve why this is duplicated. Body Groups allow turning on and off parts of a model, so sect" + "ions can be shown or hidden dynamically."
	texframeindex(integer) : "Texture Frame" : : "The frame number for any animated textures on this entity."
	hitboxset(string) : "Hitbox Set" : : "Sets the $hboxset to use for collision testing."
	modelscale(float) : "Model Scale" : : "A multiplier for the size of the model. Negative values are accepted. Does not alter the physics collisions in most cases, howev" + "er. Negative values can crash the game!"
	linedivider_animbase(string) readonly : "----------------------------------------------------------------------------------------------------------"
	lightingorigin(target_destination) : "Lighting Origin" : : "Select any entity (not info_lighting!) from which to sample lighting instead of the entity's origin."
	lightingoriginhack(target_destination) : "Lighting Origin Offset" : : "The info_lighting_relative from which to sample lighting instead of the entity's origin."
	damagefilter(filterclass) : "Damage Filter" : : "When this entity receives damage, it will filter by this entity."
	fademindist(float) : "Start Fade Distance/Pixels" : : "Distance at which the entity starts fading. If <0, the entity will disappear instantly when end fade is hit. The value will scal" + "e appropriately if the entity is in a 3D Skybox."
	fademaxdist(float) : "End Fade Distance/Pixels" : : "Distance at which the entity ends fading. If <0, the entity won't disappear at all. The value will scale appropriately if the en" + "tity is in a 3D Skybox."
	fadescale(float) : "Fade Scale" : : "If specified in the worldspawn, or if the engine is running below DirectX 8, entities will fade out even if the fade distances a" + "bove aren't specified. This value gives more control over when this happens: numbers smaller than 1 cause the entity to fade out" + " at further distances, and greater than 1 cause it to fade out at closer distances. Using 0 turns off the forced fade altogether" + "."
	shadowcastdist(integer) : "Shadow Cast Distance" : : "Sets how far the entity casts dynamic shadows, in units. 0 means default distance from the shadow_control entity."
	disableshadows(choices) : "Disable Shadows?" : 0 : "Prevent the entity from creating cheap render-to-texture/dynamic shadows." =
		[
		0: "No"
		1: "Yes"
		]

	disablereceiveshadows(choices) : "Disable Receiving Shadows?" : 0 : "Prevents dynamic shadows (e.g. player and prop shadows) from appearing on this entity." =
		[
		0: "No"
		1: "Yes"
		]

	disableshadowdepth(choices) : "Disable ShadowDepth" : 0 : "Used to disable rendering into shadow depth (for flashlight) for this entity." =
		[
		0: "No"
		1: "Yes"
		]

	shadowdepthnocache(choices) : "Projected Texture Cache" : 0 : "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every" + " frame instead." =
		[
		0: "Default"
		1: "No cache = render every frame"
		2: "Cache it = render only once"
		]

	disableflashlight(choices) : "Disable flashlight" : 0 : "Used to disable flashlight (env_projectedtexture) lighting and shadows on this entity." =
		[
		0: "No"
		1: "Yes"
		]

	linedivider_anim(string) readonly : "----------------------------------------------------------------------------------------------------------"

	// Inputs
	input Skin(integer) : "Changes the model skin to the specified number."
	input SetBodyGroup(integer) : "Change the model's bodygroup to the specified index number."
	input Ignite(void) : "Makes the entity catch on fire indefinitely."
	input IgniteLifetime(float) : "Makes the entity catch on fire for a given amount of time."
	input IgniteNumHitboxFires(integer) : "Makes the entity catch on fire with a given number of hitbox fire particles."
	input IgniteHitboxFireScale(float) : "Makes the entity catch on fire with a given scale for hitbox fire particles."
	input BecomeRagdoll(void) : "Kills the entity and creates a client-side ragdoll from the model with ZERO force (just go limp). Input is only passed if the mo" + "del contains ragdolling, for other models phys_convert can be used instead. OnDeath, OnHalfHealth, etc. outputs will **NOT** BE " + "FIRED."
	input SetLightingOrigin(string) : "Sets the entity to use as the entity's lighting origin. Any entity can be used."
	input SetLightingOriginHack(string) : "Offsets the entity's lighting origin by their distance from an info_lighting_relative."
	input fademindist(float) : "Sets distance at which the entity starts fading. If <0, the entity will disappear instantly when end fade is hit. The value will" + " scale appropriately if the entity is in a 3D Skybox."
	input fademaxdist(float) : "Sets distance at which the entity ends fading. If <0, the entity won't disappear at all. The value will scale appropriately if t" + "he entity is in a 3D Skybox."
	input SetDamageFilter(string) : "Sets a filter for this entity for when it receives damage. Pass in an empty string to clear the damage filter."
	input DisableShadow(void) : "Allows the entity to draw a render target (dynamic) shadow."
	input EnableShadow(void) : "Prevents the entity from drawing a render target (dynamic) shadow."
	input DisableReceivingFlashlight(void) : "This object will not recieve light or shadows from projected textures (flashlights)."
	input EnableReceivingFlashlight(void) : "This object may recieve light or shadows from projected textures (flashlights)."
	input AlternativeSorting(bool) : "Used to attempt to fix sorting problems when rendering. True activates, false deactivates"

	// Outputs
	output OnIgnite(void) : "Fired when this object catches fire."
	]

@BaseClass base(BaseEntityPoint, RenderFields, Reflection) = BaseEntityPhysics
	[
	solid(choices) : "Collisions" : 6 : "Method of collision for this entity. Can be changed at runtime with AddOutput." =
		[
		0: "None"
		1: "BSP (QPhysics)"
		2: "Bounding Box"
		3: "Oriented Bounding Box"
		4: "Oriented Bounding Box, constrained to Yaw only"
		5: "Custom (defined per-entity, if not defined the entity will have bizarre collision behavior)"
		6: "VPhysics"
		]

	body(integer) : "Bodygroup" : 0 : "Sets the body group index for the model, starting with 0, if available."
	texframeindex(integer) : "Texture Frame" : : "The frame number for any animated textures on this entity."
	lightingorigin(target_destination) : "Lighting Origin" : : "Select any entity (not info_lighting!) from which to sample lighting instead of the entity's origin."
	lightingoriginhack(target_destination) : "Lighting Origin Offset" : : "The info_lighting_relative from which to sample lighting instead of the entity's origin."
	fademindist(float) : "Start Fade Distance/Pixels" : : "Distance at which the entity starts fading. If <0, the entity will disappear instantly when end fade is hit. The value will scal" + "e appropriately if the entity is in a 3D Skybox."
	fademaxdist(float) : "End Fade Distance/Pixels" : : "Distance at which the entity ends fading. If <0, the entity won't disappear at all. The value will scale appropriately if the en" + "tity is in a 3D Skybox."
	fadescale(float) : "Fade Scale" : : "If specified in the worldspawn, or if the engine is running below DirectX 8, entities will fade out even if the fade distances a" + "bove aren't specified. This value gives more control over when this happens: numbers smaller than 1 cause the entity to fade out" + " at further distances, and greater than 1 cause it to fade out at closer distances. Using 0 turns off the forced fade altogether" + "."
	shadowcastdist(integer) : "Shadow Cast Distance" : : "Sets how far the entity casts dynamic shadows, in units. 0 means default distance from the shadow_control entity."
	disableshadows(choices) : "Disable Shadows?" : 0 : "Prevent the entity from creating cheap render-to-texture/dynamic shadows." =
		[
		0: "No"
		1: "Yes"
		]

	disablereceiveshadows(choices) : "Disable Receiving Shadows?" : 0 : "Prevents dynamic shadows (e.g. player and prop shadows) from appearing on this entity." =
		[
		0: "No"
		1: "Yes"
		]

	modelscale(float) : "Model Scale" : : "A multiplier for the size of the model. Negative values are accepted. Does not alter the physics collisions in most cases, howev" + "er. Negative values can crash the game!"
	linedivider_phys(string) readonly : "----------------------------------------------------------------------------------------------------------"

	// Inputs
	input Skin(integer) : "Changes the model skin to the specified number."
	input SetBodyGroup(integer) : "Change the model's bodygroup to the specified index number."
	input Ignite(void) : "Makes the entity catch on fire indefinitely."
	input IgniteLifetime(float) : "Makes the entity catch on fire for a given amount of time."
	input IgniteNumHitboxFires(integer) : "Makes the entity catch on fire with a given number of hitbox fire particles."
	input IgniteHitboxFireScale(float) : "Makes the entity catch on fire with a given scale for hitbox fire particles."
	input BecomeRagdoll(void) : "Kills the entity and creates a client-side ragdoll from the model. Input is only passed if the model contains ragdolling, for ot" + "her models phys_convert can be used instead."
	input SetLightingOrigin(string) : "Sets the entity to use as the entity's lighting origin. Any entity can be used."
	input SetLightingOriginHack(string) : "Offsets the entity's lighting origin by their distance from an info_lighting_relative."
	input fademindist(float) : "Sets distance at which the entity starts fading. If <0, the entity will disappear instantly when end fade is hit. The value will" + " scale appropriately if the entity is in a 3D Skybox."
	input fademaxdist(float) : "Sets distance at which the entity ends fading. If <0, the entity won't disappear at all. The value will scale appropriately if t" + "he entity is in a 3D Skybox."
	input DisableShadow(void) : "Allows the entity to draw a render target (dynamic) shadow."
	input EnableShadow(void) : "Prevents the entity from drawing a render target (dynamic) shadow."
	input AlternativeSorting(bool) : "Used to attempt to fix sorting problems when rendering. True activates, false deactivates"

	// Outputs
	output OnIgnite(void) : "Fired when this object catches fire."
	]

@BaseClass base(BaseEntityBrush, RenderFields) = BaseEntityVisBrush
	[
	effects(choices) : "Effect Flags" : 0 : "For configuring visual effects. If you want to combine effects, turn SmartEdit off and add the effect numbers together, i.e. 64 " + "+ 8 = 72." =
		[
		0: "None"
		1: "Bonemerge always, very expensive!!"
		2: "Bright, dynamic light at entity origin"
		4: "Dim, dynamic light at entity origin"
		8: "No movement interpolation"
		16: "Don't cast shadows"
		32: "Don't draw entity (entity is fully ignored by clients, NOT server)"
		64: "Don't receive dynamic shadows"
		128: "Bonemerge only in PVS, better performance but prone to disappearing. Use with Bonemerge."
		256: "Blinking glow"
		512: "Flag parent as always animating and realign each frame"
		]

	vrad_brush_cast_shadows(choices) : "VRAD Shadows" : 0 : "Determines if this entity will cast lightmap shadows." =
		[
		0: "Do not cast shadows"
		1: "Cast shadows"
		]

	_minlight(float) : "Minimum Light Level" : 0 : "The minimum level of ambient light that hits this brush."
	disablereceiveshadows(choices) : "Disable Receiving Shadows?" : 0 : "Prevents dynamic shadows (e.g. player and prop shadows) from appearing on this entity." =
		[
		0: "No"
		1: "Yes"
		]

	disableshadowdepth(choices) : "Disable ShadowDepth" : 0 : "Used to disable rendering into shadow depth (for flashlight) for this entity." =
		[
		0: "No"
		1: "Yes"
		]

	shadowdepthnocache(choices) : "Projected Texture Cache" : 0 : "Used to hint projected texture system whether it is sufficient to cache shadow volume of this entity or to force render it every" + " frame instead." =
		[
		0: "Default"
		1: "No cache = render every frame"
		2: "Cache it = render only once"
		]

	disableflashlight(choices) : "Disable flashlight" : 0 : "Used to disable flashlight (env_projectedtexture) lighting and shadows on this entity." =
		[
		0: "No"
		1: "Yes"
		]

	linedivider_visbrush(string) readonly : "----------------------------------------------------------------------------------------------------------"

	// Inputs
	input DisableShadow(void) : "Allows the entity to draw a render target (dynamic) shadow."
	input EnableShadow(void) : "Prevents the entity from drawing a render target (dynamic) shadow."
	input DisableReceivingFlashlight(void) : "This object will not recieve light or shadows from projected textures (flashlights)."
	input EnableReceivingFlashlight(void) : "This object may recieve light or shadows from projected textures (flashlights)."
	input EnableDamageForces(void) : "Damaging the entity applies physics forces to it."
	input DisableDamageForces(void) : "Damaging the entity does not apply physics forces to it."
	input AlternativeSorting(bool) : "Used to attempt to fix sorting problems when rendering. True activates, false deactivates"
	]

@BaseClass base(BaseEntityPoint, EnableDisable) = BaseNPCMaker
	[
	startdisabled(choices) : "Start Disabled" : 1 =
		[
		0: "No"
		1: "Yes"
		]

	spawnflags(flags)  =
		[
		16: "[16] Fade Corpse" : 0
		32: "[32] Infinite Children" : 0
		64: "[64] Do Not Drop" : 0
		128: "[128] Don't Spawn While Visible" : 0
		]

	maxnpccount(integer) : "Num. of NPCs" : 1 : "Number of NPCs that will spawn before this spawner is exhausted."
	spawnfrequency(string) : "Frequency" : 5 : "How often (in seconds) a new NPC will be spawned. If set to -1, a new NPC will be made when the last NPC dies."
	maxlivechildren(integer) : "Max Live NPCs" : 5 : "Maximum number of live children allowed at any one time (new ones will not be made until one dies). If set to -1, no limit is ap" + "plied."

	// Inputs
	input Spawn(void) : "Spawns an NPC."
	input Toggle(void) : "Toggles the spawner enabled/disabled state."
	input Enable(void) : "Enables the spawner."
	input Disable(void) : "Disables the spawner."
	input AddMaxChildren(integer) : "Adds to the number of NPCs that can spawn before the spawner is exhausted. If an exhausted spawner is given some children to spa" + "wn, it still won't begin spawning until it is re-enabled with the Enable input."
	input SetMaxChildren(integer) : "Sets the number of NPCs that can spawn before the spawner is exhausted. If an exhausted spawner is given some children to spawn," + " it still won't begin spawning until it is re-enabled with the Enable input."
	input SetMaxLiveChildren(integer) : "Sets the maximum number of NPCs that can be alive at any one time from this spawner."
	input SetSpawnFrequency(float) : "Sets how often (in seconds) a new NPC will be spawned."

	// Outputs
	output OnSpawnNPC(target_destination) : "Fired when an NPC is spawned. The activator is the NPC, and the parameter is a pointer to the NPC."
	output OnAllSpawned(void) : "Fired when the spawned is exhausted (all children have been spawned)."
	output OnAllSpawnedDead(void) : "Fired when the spawner is exhausted (all children have been spawned) and all spawned children have died."
	output OnAllLiveChildrenDead(void) : "Fired when all spawned children have died. This does not mean the spawner is exhausted, so a new child may be spawned any time a" + "fter this (unless the maker is disabled)."
	]

@BaseClass base(BaseEntityBrush) = BaseTank
	[
	spawnflags(flags)  =
		[
		1: "[1] Active" : 0
		16: "[16] Only Direct" : 0
		32: "[32] Controllable" : 0
		64: "[64] Damage Kick" : 0
		1024: "[1024] NPC Controllable" : 0
		2048: "[2048] NPC Set Controller" : 0
		4096: "[4096] Allow friendlies to hit player" : 0
		32768: "[32768] Non-solid." : 0
		131072: "[131072] Perfect accuracy every 3rd shot at player" : 0
		]

	control_volume(target_destination) : "Control Volume" : : "Name of a trigger the specifies the volume in which a player must be to control this tank."
	master(string) : "(Team) Master"
	yawrate(string) : "Yaw rate" : 30
	yawrange(string) : "Yaw range" : 180
	yawtolerance(string) : "Yaw tolerance" : 15
	pitchrate(string) : "Pitch rate" : 0
	pitchrange(string) : "Pitch range" : 0
	pitchtolerance(string) : "Pitch tolerance" : 5
	barrel(string) : "Barrel Length" : 0
	barrely(string) : "Barrel Horizontal" : 0
	barrelz(string) : "Barrel Vertical" : 0
	spritesmoke(sprite) : "Smoke Sprite" : : "A specific sprite to use for the muzzle's smoke effect."
	spriteflash(sprite) : "Flash Sprite" : : "A specific sprite to use for the muzzle's flash effect."
	spritescale(string) : "Sprite scale" : 1 : "The scale for smoke and flash sprites."
	rotatestartsound(sound) : "Rotate Start Sound"
	rotatesound(sound) : "Rotate Loop Sound"
	rotatestopsound(sound) : "Rotate Stop Sound"
	firerate(string) : "Rate of Fire" : 1
	bullet_damage(string) : "Damage Per Bullet" : 0 : "If set to 0, it'll use the base weapon bullet's damage."
	bullet_damage_vs_player(string) : "Damage Per Bullet Vs Player" : 0 : "If set to 0, it'll use the Damage Per Bullet value."
	persistence(string) : "Firing persistence" : 1 : "(Seconds) How long to keep firing at last known position after lose sight of target"
	persistence2(string) : "Firing persistence2" : 0 : "(Seconds) After lost enemy and persistence time has passed, how long to occasionally fire at enemy's last known position"
	firespread(choices) : "Bullet accuracy" : 0 =
		[
		0: "Perfect Shot"
		1: "Small cone"
		2: "Medium cone"
		3: "Large cone"
		4: "Extra-large cone"
		]

	minrange(string) : "Minimum target range" : 0
	maxrange(string) : "Maximum target range" : 0
	gun_base_attach(string) : "Gun Base Attachment" : : "If Parent is specified, this is the attachment point on the parent to aim from."
	gun_barrel_attach(string) : "Gun Barrel Attachment" : : "If Parent is specified, this is the attachment point on the parent to fire from. If you specify this, you'll want to specify the" + " Gun Base Attachment too."
	gun_yaw_pose_param(string) : "Gun Yaw Pose Param" : : "If Parent + the Gun Pitch Pose Param is specified, then the gun itself will be invisible and the func_tank will steer a gun on t" + "he parent using the pose parameters."
	gun_yaw_pose_center(float) : "Gun Yaw Pose Center" : 0 : "The center yaw pose parameter of the gun on the parent"
	gun_pitch_pose_param(string) : "Gun Pitch Pose Param" : : "If Parent + the Gun Yaw Pose Param is specified, then the gun itself will be invisible and the func_tank will steer a gun on the" + " parent using the pose parameters."
	gun_pitch_pose_center(float) : "Gun Pitch Pose Center" : 0 : "The center pitch pose parameter of the gun on the parent"
	ammo_count(integer) : "Ammunition Count" : -1 : "Only applies to player use. -1 = unlimited ammo."
	leadtarget(choices) : "Lead Target" : 0 =
		[
		0: "No"
		1: "Yes"
		]

	npc_man_point(target_destination) : "NPC Man Point" : : "Point where NPC must stand to man this func_tank."
	playergraceperiod(float) : "Post-NPC Attack Grace Period" : 0 : "If specified, NPC's manning this func tank won't fire at the player, after firing at a non-player, for this amount of time."
	ignoregraceupto(float) : "Ignore Grace Upto" : 768 : "The player grace period is ignored if the player's under this distance from the func_tank."
	playerlocktimebeforefire(float) : "Player Lock Time" : 0 : "The tank must have the player as a target for this amount of time before it's allowed to fire."
	shouldfindnpcs(choices) : "Automatically search for NPCs" : 1 : "If controllable by NPCs, sets whether we should automatically search for NPCs to use this func_tank or just wait for the player " + "to set it. Identical to StartFindingNPCs and StopFindingNPCs." =
		[
		0: "No"
		1: "Yes"
		]

	effecthandling(choices) : "Effect Handling" : 0 : "Special effect handling that influences sound and muzzle effects. Individual settings can override parts of it." =
		[
		0: "Use Individual Settings."
		1: "AR2"
		2: "Combine Cannon"
		]


	// Inputs
	input Activate(void) : "Turn the tank on"
	input Deactivate(void) : "Turn the tank off (go dormant)"
	input SetFireRate(string) : "How fast to fire (0 = don't fire)"
	input SetDamage(string) : "Set the Damage Per Bullet"
	input SetTargetPosition(string) : "World position that I should aim at"
	input SetTargetDir(vector) : "Direction to aim at."
	input SetTargetEntityName(target_destination) : "Name of entity I should follow/attack"
	input SetTargetEntity(string) : "Set the entity I should follow/attack to the passed in entity."
	input ClearTargetEntity(void) : "Clear the entity I should be attacking."
	input FindNPCToManTank(string) : "Find a nearby NPC to man this func_tank."
	input StartFindingNPCs(void) : "Start searching for NPCs to man this func_tank."
	input StopFindingNPCs(void) : "Stop searching for NPCs to man this func_tank."
	input ForceNPCOff(void) : "Force the NPC manning this func_tank (if any) to leave."
	input SetMaxRange(float) : "Set the max range of the func_tank."

	// Outputs
	output OnFire(void) : "Fires when the tank fires its bullets"
	output OnAquireTarget(void) : "Fires when target is newly in range and can be shot"
	output OnLoseTarget(void) : "Fires when when target goes out of range"
	output OnAmmoDepleted(void) : "Fires when tank runs out of ammo"
	output OnGotController(void) : "Fires when an NPC starts to control this tank. Players do NOT fire this input."
	output OnLostController(void) : "Fires when the NPC controller of the tank stops controlling it. Players do NOT fire this input."
	output OnGotPlayerController(void) : "Fires when a Player starts to control this tank. NPCs do NOT fire this input."
	output OnLostPlayerController(void) : "Fires when the Player controller of the tank stops controlling it. NPCs do NOT fire this input."
	output OnReadyToFire(void) : "Fires once when the tank is done waiting to fire between rounds"
	]

@BaseClass base(_Breakable, DamageFilter) = BreakableProp
	[
	spawnflags(flags)  =
		[
		16: "[16] Break on Touch" : 0
		32: "[32] Break on Pressure" : 0
		]


	// Inputs
	input EnableDamageForces(void) : "Damaging the entity applies physics forces to it."
	input DisableDamageForces(void) : "Damaging the entity does *not* apply physics forces to it."

	// Outputs
	output OnTakeDamage(void) : "Fired each time this breakable takes any damage."
	]

@BaseClass base(BaseEntityPoint) = CombineBallSpawners
	[
	spawnflags(flags)  =
		[
		4096: "[4096] Start inactive" : 1
		8192: "[8192] Combine power supply" : 0
		]

	ballcount(integer) : "Ball count" : 3 : "This is how many balls will be bouncing around inside the spawner"
	minspeed(float) : "Min ball speed" : "300.0" : "The minimum speed of balls that fly in the spawner"
	maxspeed(float) : "Max ball speed" : "600.0" : "The maximum speed of balls that fly in the spawner"
	ballradius(float) : "Ball radius" : "20.0" : "The radius of the energy balls."
	balltype(choices) : "Ball Type" : "Combine Energy Ball 1" =
		[
		0: "Combine Energy Ball 1"
		1: "Combine Energy Ball 2"
		2: "Combine Energy Ball 3"
		]

	ballrespawntime(float) : "Ball Respawn Time" : "4.0" : "The energy balls respawn time"

	// Inputs
	input Enable(void) : "Enable spawning of combine balls"
	input Disable(void) : "Disable spawning of combine balls"

	// Outputs
	output OnBallGrabbed(void) : "Fired when a combine ball is grabbed from the field by a mega physcannon"
	output OnBallReinserted(void) : "Fired when a combine ball is reinserted into the field (only gets triggered when Combine Power supply is checked)"
	output OnBallHitTopSide(void) : "Fired when a combine ball in hits the top side of the field (only gets triggered when Combine Power supply is checked)"
	output OnBallHitBottomSide(void) : "Fired when a combine ball in hits the bottom side of the field (only gets triggered when Combine Power supply is checked)"
	output OnLastBallGrabbed(void) : "Fired when the last combine ball is grabbed from the field by a mega physcannon"
	output OnFirstBallReinserted(void) : "Fired when the first combine ball is reinserted into the field (only gets triggered when Combine Power supply is checked)"
	]

@BaseClass base(BaseEntityPoint) = ForceController
	[
	spawnflags(flags)  =
		[
		1: "[1] Start On" : 0
		2: "[2] Apply Force" : 1
		4: "[4] Apply Torque" : 1
		8: "[8] Orient Locally" : 1
		16: "[16] Ignore Mass" : 0
		]

	attach1(target_destination) : "Attached Object" : : "Object to apply the force to."
	forcetime(float) : "Time of Force (0=inf)" : 0 : "Automatic shut-off after this time has passed (0 = stay on forever or until deactivated)"

	// Inputs
	input Activate(void) : "Turn the force on"
	input Deactivate(void) : "Turn the force off"
	input Scale(string) : "Set Force Scale"
	]

@BaseClass base(Node) = HintNode
	[
	spawnflags(flags)  =
		[
		65536: "[65536] Allow jump up" : 0
		]

	hinttype(choices) : "Hint" : 0 =
		[
		0: "None"
		2: "World: Window"
		12: "World: Act Busy Hint"
		13: "World: Visually Interesting"
		14: "World: Visually Interesting (Don't aim at)"
		15: "World: Inhibit Combine Mines within 15 feet"
		16: "World: Visually Interesting (Stealth mode)"
		100: "Tactical: Crouch Cover Medium"
		101: "Tactical: Crouch Cover Low"
		103: "Tactical: Entrance / Exit Pinch"
		105: "Tactical: Enemy Disadvantage Point"
		107: "Tactical: High Ground"
		400: "Antlion: Burrow Point"
		401: "Antlion: Thumper Flee Point"
		450: "Headcrab: Burrow Point"
		451: "Headcrab: Exit Pod Point"
		500: "Roller: Patrol Point"
		501: "Roller: Cleanup Spot"
		700: "Crow: Fly to point"
		701: "Crow: Perch point"
		900: "Follower: Wait point"
		901: "Override jump permission"
		902: "Player squad transition point"
		903: "NPC exit point"
		904: "Strider node"
		950: "Player Ally: Push away destination"
		951: "PLayer Ally: Fear withdrawal destination"
		1000: "HL1 World: Machinery"
		1001: "HL1 World: Blinking Light"
		1002: "HL1 World: Human Blood"
		1003: "HL1 World: Alien Blood"
		1300: "Aperture: Nest"
		]

	hintactivity(string) : "Hint Activity" : : "Activity associated with this hint node. Various parts of the NPC AI play this activity at times. i.e. Actbusy nodes will play t" + "his activity when an NPC acts busy on the node."
	nodefov(choices) : "Node FOV" : 180 : "Imagine this node requires that an NPC be in the node's field of view in order to use this hint." =
		[
		45: "45 Degrees"
		90: "90 Degrees"
		180: "180 Degrees"
		360: "360 Degrees"
		]

	starthintdisabled(choices) : "Start Hint Disabled" : 0 =
		[
		0: "No"
		1: "Yes"
		]

	group(string) : "Hint Group" : : "If specified, gives the hint a specific group name.  Useful for hint nodes that need to be logically grouped together. NPCs may " + "also refuse to use hint nodes that don't match their hint group."
	targetnode(node_dest) : "Target node" : -1 : "The node ID of an associated target node, if any."
	ignorefacing(choices) : "Ignore Facing" : 2 : "Don't pay attention to the facing of the node. May not apply to a given hint type." =
		[
		0: "No"
		1: "Yes"
		2: "Default"
		]

	minimumstate(choices) : "Minimum State" : 1 : "Require an NPC have a minimum state to use the hint." =
		[
		1: "Idle"
		2: "Alert"
		3: "Combat"
		]

	maximumstate(choices) : "Maximum State" : 3 : "Require an NPC have a maximum state to use the hint." =
		[
		1: "Idle"
		2: "Alert"
		3: "Combat"
		]


	// Inputs
	input EnableHint(void) : "Enable hint."
	input DisableHint(void) : "Disable hint."
	]

@BaseClass base(BaseEntityBrush, TeamNum) = NavCost
	[
	start_disabled(choices) : "Start Disabled" : 0 =
		[
		0: "No"
		1: "Yes"
		]


	// Inputs
	input Enable(void) : "Enable"
	input Disable(void) : "Disable"
	input Toggle(void) : "Toggle"
	]

@BaseClass base(DXLevelChoice, SystemLevelChoice) = RopeKeyFrame
	[
	spawnflags(flags)  =
		[
		1: "[1] Auto Resize" : 0
		]

	nextkey(target_destination) : "Next Rope" : : "Name of the next rope along this path."
	slack(integer) : "Slack" : 25 : "How much extra length the rope has (by default it has the length between its two endpoints in the editor)."
	type(choices) : "Type" : 0 =
		[
		0: "Rope"
		1: "Semi-rigid"
		2: "Rigid"
		]

	subdiv(integer) : "Subdivision" : 2 : "Number of subdivisions between each rope segment. Maximum value is 8. Higher values make smoother ropes, but are slower to rende" + "r."
	barbed(choices) : "Barbed" : 0 : "Test effect that makes the rope look sharper and more barbed." =
		[
		0: "No"
		1: "Yes"
		]

	width(float) : "Width (1-64)" : 2 : "Width of the rope."
	texturescale(float) : "Texture Scale" : 1 : "This changes the texture resolution. The default resolution is 4 pixels per inch. Larger values stretch the texture and smaller " + "values scrunch it up."
	collide(choices) : "Collide with world" : 0 =
		[
		0: "No"
		1: "Yes"
		]

	dangling(choices) : "Start Dangling" : 0 : "When set to Yes, the rope starts out detached from its target endpoint." =
		[
		0: "Start Attached"
		1: "Start Dangling"
		]

	breakable(choices) : "Breakable" : 0 : "When set to yes, the rope can be detached from either endpoint when shot." =
		[
		0: "Indestructible"
		1: "Breakable"
		]

	ropematerial(material) : "Rope Material" : "cable/cable.vmt" : "The material to use when rendering the rope."
	usewind(choices) : "Wind" : 0 : "Is the rope affected by wind?" =
		[
		0: "Ignore Wind"
		1: "Affected by Wind"
		]

	movespeed(integer) readonly : "Speed (unused)" : 64
	positioninterpolator(integer) readonly : "Position Interpolator" : 2 : "Curve Type. Currently only Rope is fully supported."

	// Inputs
	input SetScrollSpeed(float) : "Set the speed at which the texture scrolls."
	input SetForce(vector) : "Apply a force instantaneously to the rope. The parameter should be a vector containing the force to be applied (X Y Z)."
	input Break(void) : "Break the rope, if it's marked to do so."
	]

@BaseClass base(SetSkin) = SetModel
	[
	model(studio) : "World Model" : : "The model to use for this entity."
	]

@BaseClass base(BaseEntityBrush) = TriggerOnce
	[
	spawnflags(flags)  =
		[
		1: "[1] Clients/Players" : 1
		2: "[2] NPCs" : 0
		4: "[4] func_pushable" : 0
		8: "[8] Physics Objects" : 0
		16: "[16] Only player ally NPCs" : 0
		32: "[32] Only clients in vehicles" : 0
		64: "[64] Everything (not including physics debris)" : 0
		512: "[512] Only clients *not* in vehicles" : 0
		1024: "[1024] Physics debris" : 0
		2048: "[2048] Only NPCs in vehicles (respects player ally flag)" : 0
		4096: "[4096] Correctly account for object mass (trigger_push used to assume 100Kg) and multiple component physobjs (car, blob...)" : 1
		]

	startdisabled(choices) : "Start Disabled?" : 0 =
		[
		0: "No"
		1: "Yes"
		]

	filtername(filterclass) : "Filter Name" : : "A filter entity to test potential activators against."

	// Inputs
	input Enable(void) : "Enable this trigger."
	input Disable(void) : "Disable this trigger, some trigger entities may also fire OnEndTouch when disabled."
	input Toggle(void) : "Toggles this trigger between enabled and disabled states."
	input TouchTest(void) : "Triggers either the OnTouching or OnNotTouching outputs for whether anything is touching this entity."
	input StartTouch(void) : "Fires the OnStartTouch output. If called by an entity inside the trigger, the OnStartTouch will be fired for them as the activat" + "or. Note that this input is passed even if the player is being treated as 'not' touching the trigger while inside it."

	// Outputs
	output OnTrigger(void) : "Fired whenever the trigger is activated."
	output OnStartTouch(void) : "Fired when an entity starts touching this trigger. The touching entity must pass this trigger's filters to cause this output to " + "fire."
	output OnTouching(void) : "Fired when the TouchTest input is called, and an entity is touching this. Does not call activators."
	output OnNotTouching(void) : "Fired when the TouchTest input is called, and no entity is touching this. Does not call activators."
	]

@BaseClass base(BaseEntityPoint) = TwoObjectPhysics
	[
	spawnflags(flags)  =
		[
		1: "[1] No Collision until break" : 0
		4: "[4] Start inactive" : 0
		8: "[8] Change mass to keep stable attachment to world" : 0
		16: "[16] Do not connect entities until turned on" : 0
		]

	attach1(target_destination) : "Entity 1 (Yellow)" : : "The first entity to constrain. If blank the second entity will be constrained to the World."
	attach2(target_destination) : "Entity 2 (Blue)" : : "The second entity to constrain. If blank the first entity will be constrained to the World."
	constraintsystem(target_destination) : "Constraint System Manager" : : "The name of a phys_constraintsystem that this constraint should be a part of. All constraints on a set of entities should be pla" + "ced in the same system, or they will fight each other during simulation."
	forcelimit(float) : "Force Limit to Break (lbs)" : 0 : "The amount of force an impact must apply to the constraint to break it. A way of calculating this is to set it to the mass of an" + " object that would break this constraint if it were resting on the constrainted objects."
	torquelimit(float) : "Torque Limit to Break (lbs * distance)" : 0 : "The amount of torque required to break the constraint. A way of calculating this is to multiply any reference mass by the restin" + "g distance (from the center of mass of the object) needed to break the constraint."
	breaksound(sound) : "Play Sound on Break" : : "A sound played when the constraint is broken."
	teleportfollowdistance(float) : "Follow teleport distance" : 0 : "If one object teleports more than this many units away it will cause the other constrained object to teleport to an appropriate " + "relative position."

	// Inputs
	input Break(void) : "Force the constraint to break."
	input TurnOn(void) : "Enable the constraint.  Do this when the objects don't exist when the constraint spawns - or when you have deactivated the const" + "raint.  Broken constraints can NOT be turned on.  They have been deleted."
	input TurnOff(void) : "Disable this constraint."

	// Outputs
	output OnBreak(void) : "Fired when the constraint breaks."
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/ambient_generic.vmt")
	sphere(radius)
	line(255 255 0, targetname, sourceEntityName)
= ambient_generic: "Universal ambient sound. Use it to play and control a single sound."
	[
	spawnflags(flags)  =
		[
		1: "[1] Infinite Range" : 0
		16: "[16] Start Silent" : 1
		32: "[32] Is NOT Looped" : 1
		]

	message(sound) : "Sound Name" : : "Name of the GameSound entry for the sound to play. Also supports direct .wav filenames."
	health(integer) : "Volume" : 10 : "Sound volume, expressed as a range from 0 to 10, where 10 is the loudest."
	radius(float) : "Sound Range" : 1250 : "Maximum distance at which this sound is audible. Overriden by soundscripts."
	pitch(integer) : "Pitch" : 100 : "Sound pitch, expressed as a range from 1(low) to 255(high), where 100 is the sound's default pitch. Overriden by soundscripts."
	sourceentityname(target_destination) : "Source Entity" : : "If an entity is specified, sound will come from this named entity instead of the location of ambient_generic."
	preset(choices) : "Dynamic Presets" : 0 : "If used, overrides many of the below properties (+pitch) to preset values." =
		[
		0: "None"
		1: "Huge Machine"
		2: "Big Machine"
		3: "Machine"
		4: "Slow Fade in"
		5: "Fade in"
		6: "Quick Fade in"
		7: "Slow Pulse"
		8: "Pulse"
		9: "Quick pulse"
		10: "Slow Oscillator"
		11: "Oscillator"
		12: "Quick Oscillator"
		13: "Grunge pitch"
		14: "Very low pitch"
		15: "Low pitch"
		16: "High pitch"
		17: "Very high pitch"
		18: "Screaming pitch"
		19: "Oscillate spinup/down"
		20: "Pulse spinup/down"
		21: "Random pitch"
		22: "Random pitch fast"
		23: "Incremental Spinup"
		24: "Alien"
		25: "Bizzare"
		26: "Planet X"
		27: "Haunted"
		]

	linedivider_snd(string) : "-----------------------" : : "More complex values below."
	volstart(integer) : "Transition Volume" : 0 : "The Volume to start/end with. Use with Fade In and Out times."
	fadeinsecs(integer) : "Volume Transition Time - Start (0-100)" : 0 : "Time in seconds for the sound to transition from the Transition Volume to the set volume as it starts playing."
	fadeoutsecs(integer) : "Volume Transition Time - Stop (0-100)" : 0 : "Time in seconds for the sound to transition from the set volume to the Transition Volume as it stops playing."
	pitchstart(integer) : "Transition Pitch" : 100 : "Pitch to start with/end. Use with Spin Up and Spin Down."
	spinup(integer) : "Pitch Transition Time - Start (0-100)" : 0 : "The time taken to change from the Transition Pitch to the final Pitch while the sound starts playing. Simulates the noise poweri" + "ng-up when an object is activated."
	spindown(integer) : "Pitch Transition Time - Stop (0-100)" : 0 : "The time taken to transition from the Pitch to the Transition pitch while the sound stops playing. Simulates the noise fading ou" + "t as the object shuts down."
	lfotype(choices) : "LFO type" : 0 : "The kind of Low Frequency Oscillation to apply to the sound. Allows subtle modification to the sound. Square waves instantly swi" + "tch between the high and low values, whereas Triangle Waves gradually switch between the two." =
		[
		0: "None"
		1: "Square Wave"
		2: "Triangle Wave"
		3: "Random"
		]

	lforate(integer) : "LFO rate (0-1000)" : 0 : "How often the Low Frequency Oscillation repeats itself."
	lfomodpitch(integer) : "LFO Effect On Pitch (0-100)" : 0 : "The amount the Low Frequency Oscillation affects the pitch."
	lfomodvol(integer) : "LFO Effect On Volume (0-100)" : 0 : "The amount the Low Frequency Oscillation affects the volume."
	cspinup(integer) : "Incremental Spinup Count" : 0 : "Appears non-functional."

	// Inputs
	input Pitch(integer) : "Sets the sound pitch, expressed as a range from 1 to 255, where 100 is the sound's default pitch."
	input PlaySound(void) : "Starts the sound or restart from beginning (if looped)."
	input StopSound(void) : "Stops the sound if it is playing. Only works properly if the looped flag is checked."
	input ToggleSound(void) : "Toggles the sound between playing and stopping."
	input Volume(integer) : "Sets the sound volume, expressed as a range from 0 to 10, where 10 is the loudest."
	input FadeIn(integer) : "Fades the sound up to full volume over a specified number of seconds, with a range from 0 to 100 seconds."
	input FadeOut(integer) : "Fades the sound to silence over a specified number of seconds, with a range from 0 to 100 seconds. Sound is forced to full volum" + "e first!"
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/ambient_generic.vmt")
	sphere(radius)
= ambient_music: "Play L4D specific music."
	[
	message(sound) : "Sound Name" : : "Name of the GameSound entry to play. "

	// Inputs
	input PlaySound(void) : "Starts the sound."
	input StopSound(void) : "Stops the sound if it is playing."
	]

@PointClass base(BaseEntityPoint, Angles, DXLevelChoice, SystemLevelChoice) 
	studio("models/editor/cone_helper.mdl")
	sphere(spotlightlength)
	sphere(spotlightwidth)
= beam_spotlight: "An entity to draw a spotlight. Will draw a beam when the player views it side on, and a halo when it's facing towards the player" + ". Unless the 'No Dynamic Light' spawnflag is checked, it will also create a dynamic light wherever the end of the spotlight rest" + "s.This spotlight is entirely client side, it is not sync'd across clients."
	[
	spawnflags(flags)  =
		[
		1: "[1] Start On" : 1
		2: "[2] No Dynamic Light" : 0
		4: "[4] Start rotation on" : 0
		8: "[8] Reverse Direction" : 0
		16: "[16] X Axis" : 0
		32: "[32] Y Axis" : 0
		]

	maxspeed(integer) : "Max Rotation Speed" : 100 : "The maximum rotation speed of the spotlight, in degrees per second."
	spotlightlength(integer) : "Spotlight Length" : 500 : "Length of the spotlight beam."
	spotlightwidth(integer) : "Spotlight Width" : 50 : "Width of the spotlight beam."
	rendercolor(color255) : "Color (R G B)" : "255 255 255"
	hdrcolorscale(float) : "HDR color scale." : "0.7" : "float value to multiply sprite color by when running in HDR mode."

	// Inputs
	input LightOn(void) : "Turn the spotlight on."
	input LightOff(void) : "Turn the spotlight off"
	input Start(void) : "Start the rotator rotating."
	input Stop(void) : "Stop the rotator from rotating."
	input Reverse(void) : "Reverse the direction of rotation of the rotator."

	// Outputs
	output OnLightOn(void) : "Fires when light turns on."
	output OnLightOff(void) : "Fires when light turns off."
	]

@PointClass base(BaseEntityPoint, EnableDisable) 
	sphere(minfalloff)
	sphere(maxfalloff)
	iconsprite("editor/color_correction.vmt")
= color_correction: "An entity to control the color correction in the map."
	[
	minfalloff(float) : "Lookup Falloff Start Distance" : "0.0" : "This is the distance to the start of the falloff region (-1 = everywhere)"
	maxfalloff(float) : "Lookup Falloff End Distance" : "200.0" : "This is the distance to the end of the falloff region (-1 = everywhere)"
	maxweight(float) : "Maximum Weight" : "1.0" : "This is the maximum weight for this lookup"
	filename(string) : "Lookup Table Filename" : : "This is the lookup table filename"
	fadeinduration(float) : "Lookup Fade In Duration" : "0.0" : "Duration of fade in on when enabled."
	fadeoutduration(float) : "Lookup Fade out Duration" : "0.0" : "Dration of fade out on when disabled."
	spawnflags(flags)  =
		[
		1: "[1] Master" : 0
		2: "[2] Client-side simulation" : 0
		]

	exclusive(choices) : "Exlusive" : 0 : "An exclusive color_correction entity disables and fades out all other color corrections when it is enabled. There should only be" + " one active exclusive color_correction ent at any time." =
		[
		0: "No"
		1: "Yes"
		]


	// Inputs
	input SetFadeInDuration(float) : "Sets the 'fadeInDuration' variable, used to fade cc lookup usage when entity is enabled."
	input SetFadeOutDuration(float) : "Sets the 'fadeOutDuration' variable, used to fade cc lookup usage when entity is disabled."
	]

@SolidClass base(BaseEntityBrush, EnableDisable) = color_correction_volume: "An entity to control the color correction in the map."
	[
	fadeduration(float) : "Lookup Fade Duration" : "10.0" : "This is the duration for the lookup to fade in/out on extry/exit"
	maxweight(float) : "Maximum Weight" : "1.0" : "This is the maximum weight for this lookup"
	filename(string) : "Lookup Table Filename" : : "This is the lookup table filename"
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/ficool2/commentary_auto.vmt")
	color(0 100 250)
= commentary_auto: "Commentary-specific version of logic_auto."
	[

	// Inputs
	input MultiplayerSpawned(void) : "Internal input, fires OnCommentaryMultiplayerSpawn."

	// Outputs
	output OnCommentaryNewGame(void) : "Fired when a new game is started with commentary enabled."
	output OnCommentaryMidGame(void) : "Fired when commentary is enabled in the middle of a map."
	output OnCommentaryMultiplayerSpawn(void) : "Fired when a player spawns in multiplayer."
	]

@PointClass base(BaseEntityPoint) 
	studio("models/infected/smoker.mdl")
= commentary_zombie_spawner: "Zombie Manual Spawning Point"
	[

	// Inputs
	input SpawnZombie(string) : "Spawn a specific zombie now. String format is zombie type followed by an optional target name (e.g. 'smoker,BostonJoe' or 'commo" + "n_male_suit'). Zombie types: boomer, common_*, hunter, smoker, tank, witch"

	// Outputs
	output OnSpawnedZombieDeath(void) : "One of the zombies spawned by this entity has died"
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/comp_choreo_sceneset.vmt")
= comp_choreo_sceneset: "Chains a set of choreographed scenes together."
	[
	delay(float) : "Delay between each" : "0.1" : "Add a delay between each scene."
	only_once(choices) : "Clean up after starting" : 1 : "If set, Kill choreo scenes after starting so they only play once.If set, the Cancel input will not work properly." =
		[
		0: "No"
		1: "Yes"
		]

	busyactor(choices) : "If an Actor is talking..." : 1 : "What to do if an actor this scene needs is already talking when this scene is told to start." =
		[
		0: "Start immediately"
		1: "Wait for actor to finish"
		2: "Interrupt at next interrupt event"
		3: "Cancel at next interrupt event"
		]

	onplayerdeath(choices) : "On player death" : 0 : "What should this entity do if the player dies" =
		[
		0: "Do Nothing"
		1: "Cancel Script and return to AI"
		]

	scene01(scene) : "Scene 1"
	scene02(scene) : "Scene 2"
	scene03(scene) : "Scene 3"
	scene04(scene) : "Scene 4"
	scene05(scene) : "Scene 5"
	scene06(scene) : "Scene 6"
	scene07(scene) : "Scene 7"
	scene08(scene) : "Scene 8"
	scene09(scene) : "Scene 9"
	scene10(scene) : "Scene 10"
	scene11(scene) : "Scene 11"
	scene12(scene) : "Scene 12"
	scene13(scene) : "Scene 13"
	scene14(scene) : "Scene 14"
	scene15(scene) : "Scene 15"
	scene16(scene) : "Scene 16"
	scene17(scene) : "Scene 17"
	scene18(scene) : "Scene 18"
	scene19(scene) : "Scene 19"
	scene20(scene) : "Scene 20"

	// Inputs
	input Start(void) : "Start the choreo sequence playing."
	input Cancel(void) : "Stop the choreo sequence at any point."

	// Outputs
	output OnStart(void) : "Fired when the sequence starts."
	output OnFinish(void) : "Fired when the sequence is complete."
	]

@PointClass base(Angles) 
	iconsprite("editor/comp_kv_setter")
= comp_kv_setter: "Sets a keyvalue on an entity to a new value. This is useful to compute spawnflags, or to adjust keyvalues when the target entity" + "'s options can't be set to a fixup variable."
	[
	target(target_destination) : "Target Entity" : : "The name of the entity or entities to set values on."
	mode(choices) : "Mode" : "kv" : "The type of value to set." =
		[
		"kv": "KeyValues"
		"flags": "SpawnFlags"
		]

	kv_name(string) : "Name / Mask" : : "The name of the keyvalue to set, or the bits to change for spawnflags."
	kv_value_global(string) : "Value - String" : : "The value to apply."
	kv_value_local(target_destination) : "Value - Ent Name" : : "If set, use this fixed-up entity name."
	invert(choices) : "Invert Value" : 0 : "If enabled, invert the value so 0 and 1 are swapped." =
		[
		0: "No"
		1: "Yes"
		]

	rotate(choices) : "Rotate Value" : 0 : "If enabled, treat the value as a vector and rotate it by the angles set on this entity first." =
		[
		0: "No"
		1: "Yes"
		]

	conv_ang(choices) : "Convert To Angle" : 0 : "If enabled, convert a +X axis normal back into the Euler angle." =
		[
		0: "No"
		1: "Yes"
		]


	// Outputs
	output OnUser1(void) : "Fired in response to FireUser1 input."
	output OnUser2(void) : "Fired in response to FireUser2 input."
	output OnUser3(void) : "Fired in response to FireUser3 input."
	output OnUser4(void) : "Fired in response to FireUser4 input."
	]

@PointClass base(Angles) 
	iconsprite("editor/comp_precache_model")
	studioprop()
= comp_precache_model: "Force a specific model to load, for runtime switching. Duplicates will be removed."
	[
	model(studio) : "Model" : : "The model to load."
	skin(integer) : "Skin" : : "Skin to show."
	]

@PointClass base(Angles) 
	iconsprite("editor/comp_propcombine_set")
	wirebox(mins, maxs)
= comp_propcombine_set: "Specifies a group of props that will be combined together."
	[
	mins(vector) : "BBox Mins" : "-32 -32 -32" : "Minimum offset from the entity, defining the shape."
	maxs(vector) : "BBox Maxes" : "32 32 32" : "Maximum offset from the entity, defining the shape."
	name(string) : "Name" : : "Two sets with the same name will be treated as one."
	prop(studio) : "Group Model" : : "If set, a combinable model used to define which others will be combined."
	skin(integer) : "Group Skin" : 0 : "The skin for the Group Model."
	]

@PointClass base(StaticTargetName) 
	iconsprite("editor/comp_relay")
= comp_relay: "Simplified version of logic_relay which is able to be optimised away by the compiler.The various inputs and outputs are useful f" + "or bundling commands together, or using more appopriate verbs.Inputs only work if given directly from entities (or via instance " + "redirection), not ingame or dynamically.All inputs/outputs may pass through any parameter, if no override is specified."
	[
	ctrl_type(choices) : "Control Type" : 0 : "Controls how the value is interpreted for whether to break the connection from this." =
		[
		0: "Is Enabled?"
		1: "Is Disabled?"
		]

	ctrl_value(choices) : "Control Value" : 1 : "Decides whether to skip using the outputs from this. If the entity is disabled, all outputs are removed entirely." =
		[
		0: "No"
		1: "Yes"
		]


	// Inputs
	input Trigger(string) : "Trigger the relay and fire the output."
	input TurnOn(string) : "Fire the OnTurnedOn output."
	input TurnOff(string) : "Fire the OnTurnedOff output."
	input FireUser1(string) : "Causes this relay's OnUser1 output to be fired."
	input FireUser2(string) : "Causes this relay's OnUser2 output to be fired."
	input FireUser3(string) : "Causes this relay's OnUser3 output to be fired."
	input FireUser4(string) : "Causes this relay's OnUser4 output to be fired."
	input FireUser5(string) : "Causes this relay's OnUser5 output to be fired."
	input FireUser6(string) : "Causes this relay's OnUser6 output to be fired."
	input FireUser7(string) : "Causes this relay's OnUser7 output to be fired."
	input FireUser8(string) : "Causes this relay's OnUser8 output to be fired."

	// Outputs
	output OnTrigger(string) : "Fired when the relay is triggered."
	output OnTurnedOn(string) : "Fired when the relay is turned on."
	output OnTurnedOff(string) : "Fired when the relay is turned off."
	output OnUser1(string) : "Fired in response to a FireUser1 input."
	output OnUser2(string) : "Fired in response to a FireUser2 input."
	output OnUser3(string) : "Fired in response to a FireUser3 input."
	output OnUser4(string) : "Fired in response to a FireUser4 input."
	output OnUser5(string) : "Fired in response to a FireUser5 input."
	output OnUser6(string) : "Fired in response to a FireUser6 input."
	output OnUser7(string) : "Fired in response to a FireUser7 input."
	output OnUser8(string) : "Fired in response to a FireUser8 input."
	]

@PointClass base(Origin, Angles) 
	iconsprite("editor/comp_scriptvar_setter")
	studio("models/editor/cone_helper.mdl")
	line(255 255 255, targetname, target)
	line(255 255 255, targetname, ref)
= comp_scriptvar_setter: "Assigns data or a group of data to a variable in an entity's VScript scope on spawn.\nTo set an array, provide an index in the v" + "ariable name in the form 'varname[4]'. \nAll the comp_scriptvars pointing to that variable will be collected into a single array" + " literal, with holes filled by *null*. \nIf the brackets are empty, these values will fill those holes and then append to the en" + "d in an arbitrary order."
	[
	target(target_destination) : "Script Entity" : : "The entity to set a variable on."
	variable(string) : "Variable Name" : : "The name of the variable to set. A specific array index can be set with the form 'varname[4]'. Alternatively use 'varname[]' to " + "assign them to the first index available. Holes in the array are set to null."
	ref(target_destination) : "Reference Entity" : : "If set, a reference entity to use to obtain data from instead of this one."
	mode(choices) : "Mode" : "pos" : "The kind of data to read. For Constant, the position/reference is ignored completely. For Entity Handle to be useful, only one r" + "eference entity should exist. For Offset, it's the offset of the reference relative to this entity." =
		[
		"const": "Constant"
		"name": "Entity Name"
		"handle": "Entity Handle"
		"pos": "Position"
		"ang": "Angle (as vector)"
		"off": "Offset"
		"x": "Forward Direction"
		"y": "Left Direction"
		"z": "Up Direction"
		]

	const(string) : "Scale / Constant" : : "A scale factor for the data, or a constant to use directly in that mode."
	]

@PointClass base(BaseEntityPoint) = env_airstrike_indoors: "Airstrike effect for indoors (crumbling ceiling)"
	[
	height(choices) : "Effect Height" : -1 : "Specifies which animation sequence to use for this effect. (Distance from floor to ceiling)" =
		[
		-1: "Automatic"
		0: "128 units"
		1: "144 units"
		2: "152 units"
		3: "160 units"
		4: "190 units"
		5: "300 units"
		6: "320 units"
		]


	// Inputs
	input DoEffect(void) : "Do the effect one time"
	]

@PointClass base(BaseEntityPoint, Angles) 
	studio()
= env_airstrike_outdoors: "Airstrike effect for outdoors (exploding roof, ground)"
	[
	model(studio) : "Model" : "models/props_destruction/general_dest_roof_set.mdl" : "Model name"
	modelgroup(target_destination) : "Animation group" : : "Targetname of one or multiple dynamic_props to choreograph along with our sequence."
	sequence1(string) : "Random sequence 1" : : "Sequence for the model to play when the effect begins."
	sequence2(string) : "Random sequence 2" : : "Sequence for the model to play when the effect begins."

	// Inputs
	input DoEffect(void) : "Do the effect one time"
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/ficool2/env_beverage")
= env_beverage: "HL1 Legacy: Beverage Dispenser."
	[
	health(integer) : "Capacity" : 10 : "Number of cans in the dispenser."
	beveragetype(choices) : "Beverage Type" : 0 =
		[
		0: "Coca-Cola"
		1: "Sprite"
		2: "Diet Coke"
		3: "Orange"
		4: "Surge"
		5: "Moxie"
		6: "Random"
		]


	// Inputs
	input Activate(void) : "Enable this dispenser."
	]

@PointClass base(BaseEntityPoint) 
	color(255 0 0)
	iconsprite("editor/env_blood.vmt")
= env_blood: "An entity used to spawn blood effects."
	[
	spraydir(angle) : "Spray Direction (Pitch Yaw Roll)" : "0 0 0" : "The general direction that the blood should spray and the direction to trace to apply the decal."
	color(choices) : "Blood Color" : 0 =
		[
		0: "Red (Human)"
		1: "Yellow (Alien)"
		]

	amount(string) : "Amount of blood (damage to simulate)" : 100
	spawnflags(flags)  =
		[
		1: "[1] Random Direction" : 0
		2: "[2] Blood Stream" : 0
		4: "[4] On Player" : 0
		8: "[8] Spray decals" : 0
		]


	// Inputs
	input EmitBlood(void) : "Triggers the blood effect."
	]

@SolidClass base(BaseEntityBrush) 
	color(200 200 0)
= env_bubbles: "An entity used to create a volume in which to spawn bubbles."
	[
	density(integer) : "Bubble density" : 2
	frequency(integer) : "Bubble frequency" : 2
	current(integer) : "Speed of Current" : 0 : "The speed of the water current in the volume, used to move the bubbles."
	spawnflags(flags)  =
		[
		1: "[1] Start Off" : 0
		]


	// Inputs
	input Activate(void) : "Activates the bubbles."
	input Deactivate(void) : "Deactivates the bubbles."
	input Toggle(void) : "Toggles the bubbles on and off."
	input SetDensity(integer) : "Sets the bubble density."
	input SetFrequency(integer) : "Sets bubble emission rate in bubbles per second."
	input SetCurrent(integer) : "Sets current speed in units per second."
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/ts2do/env_credits.vmt")
= env_credits: "The entity that controls the rolling credits, loaded from 'scripts/credits.txt'."
	[

	// Inputs
	input RollCredits(void) : "Start the intro credits rolling."
	input RollOutroCredits(void) : "Start the outro credits rolling."
	input ShowLogo(void) : "Show the HL2 logo."

	// Outputs
	output OnCreditsDone(void) : "Fired when the credits having finished rolling."
	]

@PointClass base(BaseEntityPoint, Angles) 
	sphere(fademindist)
	sphere(fademaxdist)
	iconsprite("editor/ficool2/env_detail_controller.vmt")
= env_detail_controller: "An entity that lets you control override the min and max fade distances for details sprites in the map."
	[
	fademindist(float) : "Start Fade Dist/Pixels" : 512 : "The distance at which the detail props will start fading away."
	fademaxdist(float) : "End Fade Dist/Pixels" : 1024 : "The distance at which the detail props will stop fading and stop drawing entirely."
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/env_dof_controller.vmt")
	color(200 0 0)
	line(255 255 0, targetname, focus_target)
	sphere(near_blur)
	sphere(near_focus)
	sphere(far_blur)
	sphere(far_radius)
= env_dof_controller: "An entity that controls the depth of field settings for the player. Depth of field simulates camera blur of out-of-focus regions" + " of the scene."
	[

	// Inputs
	input SetNearBlurDepth(float) : "Set the distance in front of the focus region at which the scene will be completely blurred using the near blur radius. Must be " + "smaller than NearFocusDepth."
	input SetNearFocusDepth(float) : "The area between the near focus and far focus distances is perfectly in focus. Must be smaller than FarFocusDepth."
	input SetFarFocusDepth(float) : "The area between the near focus and far focus distances is perfectly in focus. Must be smaller than FarBlurDepth."
	input SetFarBlurDepth(float) : "Set the distance beyond the focus region at which the scene will be completely blurred using the far blur radius. Must be larger" + " than FarFocusDepth."
	input SetNearBlurRadius(float) : "Set the blur radius (in pixels) to use at the near blur distance. Set to 0 to disable near blur."
	input SetFarBlurRadius(float) : "Set the blur radius (in pixels) to use at the far blur distance. Set to 0 to disable far blur."
	]

@PointClass base(BaseEntityPoint, Angles) 
	iconsprite("editor/ficool2/env_dustpuff")
= env_dustpuff: "An entity that can emit dust puffs."
	[
	scale(float) : "Scale" : 8 : "Size of the dust puff."
	speed(float) : "Speed" : 16 : "Speed at which the dust particles should move."
	color(color255) : "Dust color" : "128 128 128"

	// Inputs
	input SpawnDust(void) : "Spawn a dust puff."
	]

@SolidClass base(BaseEntityBrush) 
	color(200 200 0)
= env_embers: "An entity used to create a volume in which to spawn fire embers."
	[
	particletype(choices) : "Ember type" : 0 =
		[
		0: "Normal"
		1: "Smooth Fade"
		2: "Pulled"
		]

	density(integer) : "Density (particles per second)" : 50
	lifetime(integer) : "Particle Lifetime (seconds)" : 4
	speed(integer) : "Particle Speed (units per second)" : 32
	rendercolor(color255) : "Ember Color (R G B)" : "255 255 255"
	spawnflags(flags)  =
		[
		1: "[1] Start On" : 0
		2: "[2] Toggle" : 0
		]

	]

@PointClass base(BaseEntityPoint) 
	color(200 200 0)
	line(255 128 0, targetname, target)
	iconsprite("editor/ficool2/env_entity_igniter.vmt")
= env_entity_igniter: "An entity that catches a target entity on fire. If the entity is an animating model, it will have sprite flames attached to its " + "skeleton. Otherwise the entity will emit particle flame puffs."
	[
	target(target_destination) : "Entity to ignite" : : "Name of the entity to catch on fire."
	lifetime(float) : "Lifetime in seconds" : 10 : "Duration of flames."

	// Inputs
	input Ignite(void) : "Ignite the target entity."
	]

@PointClass base(BaseEntityPoint, Angles) 
	line(255 255 0, targetname, entitytemplate)
	iconsprite("editor/env_entity_maker.vmt")
	studio("models/editor/angle_helper.mdl")
= env_entity_maker: "Spawns the specified entity template at its origin. If set to auto-spawn, it will spawn the template whenever there's room and t" + "he player is looking elsewhere."
	[
	spawnflags(flags)  =
		[
		1: "[1] Enable AutoSpawn (will spawn whenever there's room)" : 0
		2: "[2] AutoSpawn: Wait for entity destruction" : 0
		4: "[4] AutoSpawn: Even if the player is looking" : 0
		8: "[8] ForceSpawn: Only if there's room" : 0
		16: "[16] ForceSpawn: Only if the player isn't looking" : 0
		]

	entitytemplate(target_destination) : "Point_template To Spawn" : : "Name of the point_template to spawn here."
	postspawnspeed(float) : "PostSpawn Movement Speed" : 0 : "If specified, all the entities created in the template will move this fast in the specified PostSpawn Movement Direction."
	postspawndirection(angle) : "PostSpawn Movement Direction" : "0 0 0" : "If a PostSpawn Movement Speed is specified, all the entities created in the template will move in this direction."
	postspawndirectionvariance(float) : "PostSpawn Direction Variance" : "0.15" : "This variance is applied to the PostSpawn Movement Direction for each spawned entity in the template. Use it to apply some rando" + "mness to the directions."
	postspawninheritangles(choices) : "PostSpawn Inherit Angles" : 0 : "If in hierarchy, is spawn direction in world space, or object local space of parent." =
		[
		0: "No"
		1: "Yes"
		]


	// Inputs
	input ForceSpawn(void) : "Spawn an instance of the template at this origin and angle."
	input ForceSpawnAtEntityOrigin(target_destination) : "Spawns an instance of the template that has the same origin and angles as the specified entity."

	// Outputs
	output OnEntitySpawned(void) : "Fired when an instance of the entity template has been spawned."
	output OnEntityFailedSpawn(void) : "Fired when a ForceSpawn input failed to spawn the template, either due to lack of space or being in player's view, depending on " + "the spawnflags."
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/env_explosion.vmt")
	color(200 200 0)
	sphere(iRadiusOverride)
	line(255 255 0, targetname, ignoredEntity)
= env_explosion: "An entity that creates an explosion at its origin."
	[
	imagnitude(integer) : "Magnitude" : 100 : "The amount of damage done by the explosion."
	iradiusoverride(integer) : "Radius Override" : 0 : "If specified, the radius in which the explosion damages entities. If unspecified, the radius will be based on the magnitude."
	fireballsprite(sprite) : "Fireball Sprite" : "sprites/zerogxplode.spr"
	rendermode(choices) : "Render Mode" : 5 =
		[
		0: "Normal"
		4: "Solid"
		5: "Additive"
		]

	spawnflags(flags)  =
		[
		1: "[1] No Damage" : 0
		2: "[2] Repeatable" : 0
		4: "[4] No Fireball" : 0
		8: "[8] No Smoke" : 0
		16: "[16] No Decal" : 0
		32: "[32] No Sparks" : 0
		64: "[64] No Sound" : 0
		128: "[128] Random Orientation" : 0
		256: "[256] No Fireball Smoke" : 0
		512: "[512] No particles" : 0
		1024: "[1024] No DLights" : 0
		2048: "[2048] Don't clamp Min" : 0
		4096: "[4096] Don't clamp Max" : 0
		8192: "[8192] Damage above surface only" : 0
		16384: "[16384] Generic damage" : 0
		]

	ignoredentity(target_destination) : "Ignored Entity" : : "Do not harm or affect the named entity."
	ignoredclass(choices) : "Ignored Class" : 0 : "Do not harm or affect this class." =
		[
		0: "None"
		1: "Players"
		2: "Player Allies"
		3: "Vital Player Allies"
		4: "Antlions"
		5: "Barnacles"
		6: "npc_bullseyes"
		7: "Citizens - Passive"
		8: "Citizens Rebel"
		9: "Combine"
		10: "Combine Gunships"
		11: "Conscripts"
		12: "Headcrabs"
		13: "Manhacks"
		14: "Metropolice"
		15: "Military"
		16: "Scanners"
		17: "Stalkers"
		18: "Vortigaunts"
		19: "Zombies"
		20: "Protosnipers"
		21: "Missiles"
		22: "Flares"
		23: "Earth Fauna"
		24: "Hacked Rollermines"
		25: "Combine Hunters"
		]


	// Inputs
	input Explode(void) : "Triggers the explosion."
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/env_fade")
	color(200 0 0)
= env_fade: "An entity that controls screen fades."
	[
	spawnflags(flags)  =
		[
		1: "[1] Fade From" : 0
		2: "[2] Modulate" : 0
		4: "[4] Triggering player only" : 0
		8: "[8] Stay Out" : 0
		]

	duration(float) : "Duration (seconds)" : 2 : "The time that it will take to fade the screen in or out."
	holdtime(float) : "Hold Fade (seconds)" : 0 : "The time to hold the faded in/out state."
	renderamt(integer) : "Fade Alpha" : 255 : "Alpha of the fade, where 0 = fully transparent and 255 = fully opaque."
	rendercolor(color255) : "Fade Color (R G B)" : "0 0 0"

	// Inputs
	input Fade(void) : "Start the screen fade."

	// Outputs
	output OnBeginFade(void) : "Fired when the fade has begun."
	]

@PointClass base(BaseEntityPoint, EnableDisable) 
	iconsprite("editor/env_fire")
	color(200 200 0)
	sphere(firesize)
= env_fire: "An entity that handles a single flame at its origin. The flame causes heat 'damage' to other env_fire entities around it, and wi" + "ll eventually ignite non-flaming env_fire entities nearby, causing the fire to spread."
	[
	health(integer) : "Duration" : 30 : "Amount of time the fire will burn."
	firesize(integer) : "Size" : 64 : "Height (in world units) of the flame."
	fireattack(integer) : "Attack" : 4 : "Amount of time the fire takes to grow to full strength."
	firetype(choices) : "Type" : 0 =
		[
		0: "Natural"
		1: "Plasma"
		]

	spawnflags(flags)  =
		[
		1: "[1] Infinite Duration" : 0
		2: "[2] Smokeless" : 0
		4: "[4] Start On" : 0
		8: "[8] Start Full" : 0
		16: "[16] Don't drop" : 0
		32: "[32] No glow" : 0
		128: "[128] Delete when out" : 0
		256: "[256] Visible from above" : 0
		]

	ignitionpoint(float) : "Ignition Point" : 32 : "Amount of heat 'damage' to take before this flame should ignite."
	damagescale(float) : "Damage Scale" : "1.0" : "Multiplier of the burn damage done by the flame."

	// Inputs
	input StartFire(void) : "Start the fire."
	input Extinguish(float) : "Puts out the fire permanently in the number of seconds specified."
	input ExtinguishTemporary(float) : "Puts out the fire temporarily in the number of seconds specified."

	// Outputs
	output OnIgnited(void) : "Fires when the fire is first ignited."
	output OnExtinguished(void) : "Fires when the fire is fully extinguished."
	]

@PointClass base(BaseEntityPoint) 
	sphere(fireradius)
	color(200 200 0)
	iconsprite("editor/ficool2/env_firesensor.vmt")
= env_firesensor: "An entity that detects changes in heat nearby."
	[
	spawnflags(flags)  =
		[
		1: "[1] Start On" : 1
		]

	fireradius(float) : "Radius" : 128 : "The radius around this entity in which to detect heat changes."
	heatlevel(float) : "Heat level" : 32 : "The target heat level to check for. Outputs are fired when the heat moves over this target level (increasing or decreasing)."
	heattime(float) : "Time at level" : 0 : "The amount of time the heat level must spend over the target level before the 'OnHeatLevelStart' output is fired."

	// Inputs
	input Enable(void) : "Enable fire sensor."
	input Disable(void) : "Disable fire sensor."

	// Outputs
	output OnHeatLevelStart(void) : "Fires when the heat level has been sustained for the specified length of time."
	output OnHeatLevelEnd(void) : "Fires when the heat level drops below the target level."
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/env_firesource")
	sphere(fireradius)
	color(200 200 0)
= env_firesource: "An entity that provides heat to all nearby env_fire entities. Cannot be extinguished."
	[
	spawnflags(flags)  =
		[
		1: "[1] Start On" : 0
		]

	fireradius(float) : "Radius" : 128 : "The radius around this entity in which to provide heat."
	firedamage(float) : "Intensity / Damage" : 10 : "Amount of heat 'damage' to apply to env_fire entities within the radius."

	// Inputs
	input Enable(void) : "Enable fire source."
	input Disable(void) : "Disable fire source."
	]

@PointClass base(BaseEntityPoint, DXLevelChoice, SystemLevelChoice) 
	iconsprite("editor/fog_controller.vmt")
	color(200 0 0)
	studio("models/editor/cone_helper.mdl")
= env_fog_controller: "An entity that controls the fog and view distance in the map."
	[
	fogenable(choices) : "Fog Enable" : 1 =
		[
		0: "No"
		1: "Yes"
		]

	fogblend(choices) : "Fog Blend" : 0 =
		[
		0: "No"
		1: "Yes"
		]

	use_angles(choices) : "Use Angles for Fog Dir" : 0 =
		[
		0: "No"
		1: "Yes"
		]

	fogcolor(color255) : "Primary Fog Color" : "255 255 255"
	fogcolor2(color255) : "Secondary Fog Color" : "255 255 255"
	fogdir(string) : "Primary Fog Direction" : "1 0 0"
	fogstart(string) : "Fog Start" : "500.0"
	fogend(string) : "Fog End" : "2000.0"
	fogmaxdensity(float) : "Fog Max Density [0..1]" : 1
	foglerptime(float) : "Interpolate time" : 0
	farz(string) : "Far Z Clip Plane" : -1
	spawnflags(flags)  =
		[
		1: "[1] Master (Has priority if multiple env_fog_controllers exist)" : 0
		]

	hdrcolorscale(float) : "HDR Color Scale" : 1 : "Float value to multiply fog color by when running in HDR mode."

	// Inputs
	input SetStartDist(float) : "Set the fog start distance."
	input SetEndDist(float) : "Set the fog end distance."
	input TurnOn(void) : "Turn the fog on."
	input TurnOff(void) : "Turn the fog off."
	input SetColor(color255) : "Set the primary fog color."
	input SetColorSecondary(color255) : "Set the secondary fog color."
	input SetFarZ(integer) : "Set the far clip plane distance."
	input SetAngles(string) : "Set the angles to use for the secondary fog direction."
	input SetColorLerpTo(color255) : "Set the primary fog color."
	input SetColorSecondaryLerpTo(color255) : "Set the secondary fog color."
	input SetStartDistLerpTo(float) : "Set the fog start distance."
	input SetEndDistLerpTo(float) : "Set the fog end distance."
	input StartFogTransition(void) : "Start fog transition."
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/ficool2/env_funnel")
	color(200 200 0)
= env_funnel: "The suck-in effect from the HL1 Resonance Cascade sequence."
	[
	spawnflags(flags)  =
		[
		1: "[1] Reverse (repel particles instead of suck in)" : 0
		]

	]

@PointClass base(BaseEntityPoint) 
	color(200 0 0)
	iconsprite("editor/env_global.vmt")
= env_global: "An entity to control a game-specific global states."
	[
	globalstate(string) : "Global State to Set"
	initialstate(choices) : "Initial State" : 0 =
		[
		0: "Off"
		1: "On"
		2: "Dead"
		]

	counter(integer) : "Counter" : 0 : "An integer counter value associated with this global."
	spawnflags(flags)  =
		[
		1: "[1] Set Initial State" : 0
		]


	// Inputs
	input TurnOn(void) : "Set state of global to ON."
	input TurnOff(void) : "Set state of global to OFF."
	input Toggle(void) : "Toggles state of global between ON and OFF."
	input Remove(void) : "Set state of global to DEAD."
	input SetCounter(integer) : "Sets the counter value of this global."
	input AddToCounter(integer) : "Adds to the counter value of this global. Negative numbers subtract."
	input GetCounter(void) : "Causes the Counter output to be fired, passing the current counter value for this global. This doesn't work properly."

	// Outputs
	output Counter(integer) : "Fired in response to the GetCounter input, passing the current value of the counter."
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/env_hudhint.vmt")
= env_hudhint: "An entity to control the display of HUD hints. HUD hints are used to show the player what key is bound to a particular command."
	[
	spawnflags(flags)  =
		[
		1: "[1] All Players" : 0
		]

	message(string) : "Hint Text (localized)" : : "This should be set to match the desired HUD hint entry in resource/valve_english.txt."

	// Inputs
	input ShowHudHint(void) : "Shows the hint message."
	input HideHudHint(void) : "Hides the hint message."
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/env_instructor_hint.vmt")
	line(255 255 0, targetname, hint_target)
	sphere(hint_range)
= env_instructor_hint: "An entity that allows for creation and control of instructor lessons by map logic."
	[
	hint_replace_key(string) : "Replace Key" : : "Unique name so that messages with the same key will replace each other."
	hint_target(target_destination) : "Target Entity" : : "The entity to show this hint on top of. The entity used must exist on the client, info_target_instructor_hint can be parented to" + " server only entities for this purpose."
	hint_static(choices) : "Positioning" : 0 : "Either show at the position of the Target Entity. Or show the hint directly on the hud at a fixed position." =
		[
		0: "Follow the Target Entity"
		1: "Show on the hud"
		]

	hint_allow_nodraw_target(choices) : "Allow invisible target" : 1 : "Do we allow the hint to follow entities with nodraw set?" =
		[
		0: "End immediately on nodraw"
		1: "Yes"
		]

	hint_caption(string) : "Caption" : : "The text of your hint."
	hint_activator_caption(string) : "Activator Caption" : : "The text of your hint shown to only the activating player."
	hint_color(color255) : "Caption Color" : "255 255 255" : "The color of the caption text"
	hint_forcecaption(choices) : "Show through walls" : 0 : "Do we show the caption text even if the hint is occluded by a wall?" =
		[
		0: "No"
		1: "Show when occluded"
		]

	hint_icon_onscreen(choices) : "Onscreen Icon" : "icon_tip" : "The icon to use when the hint is within the player's view." =
		[
		"use_binding": "Show controls instead"
		"icon_blank": "Blank"
		"icon_bulb": "Bulb"
		"icon_caution": "Caution"
		"icon_alert": "White Exclamation Mark"
		"icon_alert_red": "Red Exclamation Mark"
		"icon_tip": "Information"
		"icon_skull": "Eye"
		"icon_interact": "Interact/Pickup"
		"icon_button": "Button"
		"icon_door": "Door"
		"icon_useable_item": "Joystick"
		"icon_arrow_plain_white_dn": "Simple Down Arrow"
		"icon_arrow_plain_white_up": "Simple Up Arrow"
		"icon_arrow_up": "Up Arrow"
		"icon_arrow_right": "Right Arrow"
		"icon_mouseRight": "Right-Click"
		"icon_mouseLeft": "Left-Click"
		"icon_mouseWheel_up": "MouseWheel Up"
		"icon_mouseWheel_down": "MouseWheel Down"
		"icon_mouseThree": "Click Scrollwheel"
		"icon_key_generic": "Empty Key"
		"icon_key_wide": "Spacebar"
		"icon_key_right": "Right Key"
		"icon_key_left": "Left Key"
		"icon_key_down": "Down Key"
		"icon_key_up": "Up Key"
		"icon_dpad": "D-Pad"
		"icon_fire": "Fire"
		"icon_present": "Present"
		]

	hint_icon_offscreen(choices) : "Offscreen Icon" : "icon_tip" : "The icon to use when the hint is outside the player's view." =
		[
		"icon_blank": "Blank"
		"icon_bulb": "Bulb"
		"icon_caution": "Caution"
		"icon_alert": "White Exclamation Mark"
		"icon_alert_red": "Red Exclamation Mark"
		"icon_tip": "Information"
		"icon_skull": "Eye"
		"icon_interact": "Interact/Pickup"
		"icon_button": "Button"
		"icon_door": "Door"
		"icon_useable_item": "Joystick"
		"icon_arrow_plain_white_dn": "Simple Down Arrow"
		"icon_arrow_plain_white_up": "Simple Up Arrow"
		"icon_arrow_up": "Up Arrow"
		"icon_arrow_right": "Right Arrow"
		"icon_mouseRight": "Right-Click"
		"icon_mouseLeft": "Left-Click"
		"icon_mouseWheel_up": "MouseWheel Up"
		"icon_mouseWheel_down": "MouseWheel Down"
		"icon_mouseThree": "Click Scrollwheel"
		"icon_key_generic": "Empty Key"
		"icon_key_wide": "Spacebar"
		"icon_key_right": "Right Key"
		"icon_key_left": "Left Key"
		"icon_key_down": "Down Key"
		"icon_key_up": "Up Key"
		"icon_dpad": "D-Pad"
		"icon_fire": "Fire"
		"icon_present": "Present"
		]

	hint_nooffscreen(choices) : "Show offscreen" : 0 : "When the hint is offscreen, do we show an icon and arrow?" =
		[
		0: "Show"
		1: "Don't show"
		]

	hint_binding(choices) : "Bound Command" : : "If using 'show key bindings' for the onscreen icon, this field should be the command we want to show bindings for." =
		[
		"": "Unused"
		"+forward": "Forward"
		"+back": "Backward"
		"+left": "Strafe Left"
		"+right": "strafe Right"
		"+duck": "Crouch"
		"+jump": "Jump"
		"+attack": "Primary Attack"
		"+attack2": "Secondary Attack"
		"+use": "Use Key"
		"+zoom": "Zoom In"
		"-zoom": "Zoom Out"
		]

	hint_icon_offset(float) : "Icon Height Offset" : 0 : "A height offset from the target entity's origin to display the hint"
	hint_pulseoption(choices) : "Size Pulsing" : 0 : "The icon size can pulsate" =
		[
		0: "No Pulse"
		1: "Slow Pulse"
		2: "Fast Pulse"
		3: "Urgent Pulse"
		]

	hint_alphaoption(choices) : "Alpha Pulsing" : 0 : "The icon alpha can pulsate" =
		[
		0: "No Pulse"
		1: "Slow Pulse"
		2: "Fast Pulse"
		3: "Urgent Pulse"
		]

	hint_shakeoption(choices) : "Shaking" : 0 : "The icon can shake" =
		[
		0: "No Shaking"
		1: "Narrow Shake"
		2: "Wide Shake"
		]

	hint_local_player_only(choices) : "Only Local Player" : 0 : "The hint will only be shown to the local player." =
		[
		0: "No"
		1: "Yes"
		]

	hint_timeout(integer) : "Timeout" : 0 : "The automatic timeout for the hint. 0 will persist until stopped with EndHint."
	hint_range(float) : "Display Range" : 0 : "The visible range of the hint."
	hint_name(string) : "Lesson Name" : : "Hints with the same lesson name use a common base and are treated as instances the same lesson type."
	hint_display_limit(integer) : "Display Limit" : 0 : "The number of times a hint can be seen. 0 means unlimited."
	hint_instance_type(choices) : "Instance Type" : 2 : "How many instances of a single lesson type can be open or active at the same time" =
		[
		0: "Multiple"
		1: "Single Open"
		2: "Fixed Replace"
		3: "Single Active"
		]

	hint_auto_start(choices) : "Show on First Sight" : 1 : "When the player first sees it, it will automatically show for them." =
		[
		0: "No"
		1: "Yes"
		]

	hint_suppress_rest(choices) : "Suppress rest before moving" : 0 : "Suppress the initial icon display in center of screen?" =
		[
		0: "No"
		1: "Yes"
		]


	// Inputs
	input ShowHint(string) : "Start showing the hint. If an entity name is passed as a parameter, the hint is shown only to that entity."
	input EndHint(void) : "Stop showing the hint if it hasn't already timed out."
	]

@PointClass base(BaseEntityPoint, RenderFields) 
	color(255 128 0)
	studio("models/editor/axis_helper_thick.mdl")
	iconsprite("editor/ficool2/env_lightglow.vmt")
	sphere(minDist)
	sphere(maxDist)
	sphere(outerMaxDist)
	sphere(GlowProxySize)
= env_lightglow: "An entity that puts an additive glow in the world, mostly used over light sources."
	[
	rendercolor(color255) : "Color (R G B)" : "255 255 255"
	verticalglowsize(integer) : "Vertical Size" : 30
	horizontalglowsize(integer) : "Horizontal Size" : 30
	mindist(integer) : "Minimum Distance" : 500 : "The distance at which this effect will be fully translucent."
	maxdist(integer) : "Maximum Distance" : 2000 : "The distance at which this effect will be at full intensity."
	outermaxdist(integer) : "Outer Maximum Distance" : 0 : "If larger than the maximum distance, this is the length at which the glow will fade completely out, between the span of the maxi" + "mum distance and this length."
	glowproxysize(float) : "Glow Proxy Geometry Size" : 2 : "Size of the glow to be rendered for visibility testing. Must be larger than the distance from the sprite center to empty space. " + "So if this glow is inside geometry (like a light bulb), set this value to be bigger than the bulb's radius. Any time a sphere of" + " this radius would be visible (poking through any nearby geometry), the glow will be rendered."
	hdrcolorscale(float) : "HDR color scale." : "0.5" : "float value to multiply sprite color by when running in HDR mode."
	spawnflags(flags)  =
		[
		1: "[1] Visible only from front" : 0
		]


	// Inputs
	input Color(color255) : "Change the render color of the glow. Format: <Red 0-255> <Green 0-255> <Blue 0-255>"
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/ts2do/env_message.vmt")
= env_message: "An entity that draws a text message on player's HUDs."
	[
	message(string) : "Message Text"
	spawnflags(flags)  =
		[
		1: "[1] Play Once" : 0
		2: "[2] All Clients" : 0
		]

	messagesound(sound) : "Sound Effect" : : "When the message is shown, this sound effect will be played, originating from this entity."
	messagevolume(string) : "Volume 0-10" : 10 : "Volume of the sound effect."
	messageattenuation(choices) : "Sound Radius" : 0 =
		[
		0: "Small Radius"
		1: "Medium Radius"
		2: "Large  Radius"
		3: "Play Everywhere"
		]


	// Inputs
	input ShowMessage(void) : "Shows the message and plays the sound."

	// Outputs
	output OnShowMessage(void) : "Fired when the message is activated."
	]

@PointClass base(BaseEntityPoint, EnableDisable) 
	iconsprite("editor/env_microphone.vmt")
	sphere(MaxRange)
	color(0 0 255)
	line(64 64 64, targetname, target)
	line(255 255 0, targetname, target, targetname, SpeakerName)
= env_microphone: "An entity that acts as a microphone. It works in one of two modes. If it has a 'Speaker' set, it picks up all sounds within the " + "specified sound range, and rebroadcasts them through the Speaker entity. In this Speaker mode, it ignores the Hears X spawnflags" + " and does not fire the SoundLevel output. If it has no Speaker set, it measures the sound level at a point, and outputs the soun" + "d level as a value between 0 and 1. In Measuring mode, it only hears sounds that match the Hear X spawnflags."
	[
	target(target_destination) : "Measure target" : : "If the speaker is in Measuring mode, this is the name of the entity where the sound level is to be measured."
	speakername(target_destination) : "Speaker target" : : "The name of an entity through which to play any sounds heard by this microphone. If specified, the microphone will consider itse" + "lf in Speaker mode."
	listenfilter(filterclass) : "Listen Filter" : : "The name of an filter entity which specifies the only entities the microphone can hear. Sounds emitted by other entities will no" + "t be heard."
	speaker_dsp_preset(choices) : "Speaker DSP Preset" : 0 : "Only useful in Speaker mode. If specified, when the microphone is enabled, it'll set the global dsp_speaker preset to this value" + ". Sounds played back through speakers will then be affected by the selected DSP." =
		[
		0: "Use Default"
		50: "1 NO EFFECT"
		51: "2 (DUPLICATE OF 1)"
		52: "3 (DUPLICATE OF 1)"
		53: "4 (DUPLICATE OF 1)"
		54: "5 (DUPLICATE OF 1)"
		55: "6 SPEAKER, LOUDER"
		56: "7 SPEAKER VERY SMALL"
		57: "8 LOUDSPEAKER, ECHO"
		58: "9 SPEAKER SMALL"
		59: "10 SPEAKER TINY"
		]

	spawnflags(flags)  =
		[
		1: "[1] Hears combat sounds" : 1
		2: "[2] Hears world sounds" : 1
		4: "[4] Hears player sounds" : 1
		8: "[8] Hears bullet impacts" : 1
		16: "[16] Swallows sounds routed through speakers" : 0
		32: "[32] Hears explosions" : 0
		64: "[64] Ignores non-attenuated sounds" : 0
		]

	sensitivity(float) : "Sensitivity (0 - 10)" : 1 : "Microphone sensitivity, 0=deaf, 1=default, 10=extremely sensitive). Only applicable in Measuring mode."
	smoothfactor(float) : "Smoothing (0 - 1)" : 0 : "Smoothing factor, 0=no smoothing, 1=maximum smoothing). Only applicable in Measuring mode."
	maxrange(float) : "Maximum hearing range (0=infinite)" : 240 : "Sounds beyond this range won't be heard, irrelevant of attenuation. WARNING: setting this to zero (or a value > 1024) when the m" + "icrophone is in Speaker mode can be very bad for performance!!"

	// Inputs
	input SetSpeakerName(string) : "Set the microphone to output through a different speaker entity."

	// Outputs
	output SoundLevel(float) : "Fired in Measuring mode whenever the sound level changes."
	output OnRoutedSound(void) : "Fired whenever a sound is routed out through the specified speaker (if any)."
	output OnHeardSound(void) : "Fired whenever this microphone hears any sound it cares about."
	]

@PointClass base(BaseEntityPoint) 
	size(-8 -8 -8, 8 8 8)
= env_outtro_stats: "An entity to control the outtro stats at the end of a campaign."
	[

	// Inputs
	input RollStatsCrawl(void) : "Start the outro stats rolling."
	input RollCredits(void) : "Start the outro credits rolling."

	// Outputs
	output OnOuttroStatsDone(void) : "Fired when the stats having finished rolling or the user cancels out."
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/ficool2/env_particle_performance_monitor")
= env_particle_performance_monitor: "An entity for turning on and off measuring and display of particle throughput."
	[

	// Inputs
	input TurnOnDisplay(void) : "Turn on display of particle simulation benchmark"
	input TurnOffDisplay(void) : "Turn off display of particle simulation benchmark"
	input StartMeasuring(void) : "Start measuring particle simulation speed"
	input StopMeasuring(void) : "Stop measuring particle simulation speed"
	]

@PointClass base(BaseEntityPoint) 
	color(200 200 0)
	line(200 200 200, targetname, psname)
	iconsprite("editor/ficool2/env_particlelight.vmt")
= env_particlelight: "An entity that can be used to light the smoke particles emitted by env_smokestack entities. Does not light any other particle ty" + "pes."
	[
	color(color255) : "Color" : "255 0 0" : "Color emitted by this light."
	intensity(integer) : "Intensity" : 5000
	directional(choices) : "Directional" : 0 : "If this is specified, then this light will use the bump map on the particles. Each particle system can have one ambient and one " + "directional light." =
		[
		0: "No"
		1: "Yes"
		]

	psname(target_destination) : "Particle System Entity" : : "Set this to the name of the env_smokestack that you want this light to affect."
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/ficool2/env_effectscript")
	studioprop()
= env_particlescript: "An entity that has special animation events that can be fired by a model with an animation inside its .qc designed for use by th" + "is entity."
	[
	model(studio) : "Script Model" : : "Model to use for animation sequences."

	// Inputs
	input SetSequence(string) : "Sets the script model's sequence."
	]

@PointClass base(BaseEntityPoint) 
	sphere(inner_radius)
	iconsprite("editor/env_physexplosion.vmt")
	sphere(radius)
	line(255 255 0, targetname, targetEntityName)
	cylinder(255 0 0, targetname, targetname, radius, targetname, targetentityname)
	color(128 128 128)
= env_physexplosion: "An entity that creates an explosion at its origin. If the no-damage spawnflag is set, the explosion won't be visible, but will a" + "pply force to any physics objects within its radius."
	[
	magnitude(string) : "Magnitude" : 100 : "Amount of physics force applied by the explosion."
	radius(string) : "Clamp Radius (0 = auto)" : 0 : "If specified, the radius in which the explosion damages entities. If unspecified, the radius will be based on the magnitude."
	targetentityname(target_destination) : "Limit to Entity" : : "If specified, the explosion will only affect the matching entity."
	spawnflags(flags)  =
		[
		1: "[1] No Damage - Only Force" : 1
		2: "[2] Push players" : 0
		4: "[4] Push radially - not as a sphere" : 0
		8: "[8] Test LOS before pushing" : 0
		16: "[16] Disorient player if pushed" : 0
		]

	inner_radius(float) : "Inner radius" : 0 : "If not zero, the LOS is calculated from a point intersecting this sphere."

	// Inputs
	input Explode(void) : "Trigger the explosion."

	// Outputs
	output OnPushedPlayer(void) : "Fires when the player is pushed by the explosion."
	]

@PointClass base(BaseEntityPoint) 
	obb(boxmins, boxmaxs)
= env_physics_blocker: "An entity which blocks players and physics objects."
	[
	boxmins(vector) : "Mins" : "-8 -8 -8"
	boxmaxs(vector) : "Maxs" : "8 8 8"
	initialstate(choices) : "Initial State" : 1 =
		[
		0: "Disabled"
		1: "Enabled"
		]

	blocktype(choices) : "Blocks" : 0 =
		[
		0: "Everyone"
		1: "Survivors"
		2: "Player Infected"
		3: "All Special Infected (Player and AI)"
		4: "All players and physics objects"
		]


	// Inputs
	input Enable(void) : "Enables the Blocker"
	input Disable(void) : "Disables the Blocker"
	]

@PointClass base(BaseEntityPoint) 
	line(255 255 255, targetname, directionentityname)
	iconsprite("editor/ficool2/env_physimpact.vmt")
	sphere(distance)
	color(128 128 128)
= env_physimpact: "An entity that will cause a physics impact on another entity."
	[
	angles(angle) : "Pitch Yaw Roll (Y Z X)" : "0 0 0" : "Direction to project the impact."
	magnitude(integer) : "Magnitude" : 100 : "Strength of the impact."
	distance(integer) : "Distance" : 0 : "How far to project the impact (if 0 uses a default value)."
	directionentityname(target_destination) : "Point to Entity" : : "If set, 'Distance' and Angle settings are ignored and the direction and distance to the target entity will be used."
	spawnflags(flags)  =
		[
		1: "[1] No fall-off" : 0
		2: "[2] Infinite Length" : 0
		4: "[4] Ignore Mass" : 0
		8: "[8] Ignore Surface Normal When Applying Force" : 1
		]


	// Inputs
	input Impact(void) : "Trigger the impact"
	]

@PointClass base(BaseEntityPoint) 
	wirebox(mins, maxs)
= env_player_blocker: "An entity which blocks any PC/NPC from entering of the specified type."
	[
	mins(vector) : "Mins" : "-4 -128 -80"
	maxs(vector) : "Maxs" : "4 128 80"
	initialstate(choices) : "Initial State" : 1 =
		[
		0: "Disabled"
		1: "Enabled"
		]

	blocktype(choices) : "Blocks" : 0 =
		[
		0: "Everyone"
		1: "Survivors"
		2: "Player Infected"
		3: "All Special Infected (Player and AI)"
		]


	// Inputs
	input Enable(void) : "Enables the Blocker"
	input Disable(void) : "Disables the Blocker"
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/env_player_surface_trigger.vmt")
	color(200 0 0)
= env_player_surface_trigger: "An entity that monitors the material of the surface the player is standing on, and fires outputs whenever it changes to/from a s" + "pecific material."
	[
	gamematerial(choices) : "Game Material to Watch" : 0 : "The material to watch. When the player stands on/off this material, this entity's outputs will be fired." =
		[
		0: "Nonfunctional (air)"
		65: "A - Antlion"
		66: "B - Bloody Flesh"
		67: "C - Concrete"
		68: "D - Dirt"
		69: "E - Eggshell"
		70: "F - Flesh"
		71: "G - Grate"
		72: "H - Alien Flesh"
		73: "I - Clip"
		74: "J - Grass"
		75: "K - Snow"
		76: "L - Plastic"
		77: "M - Metal"
		78: "N - Sand"
		79: "O - Foliage"
		80: "P - Computer"
		81: "Q - Asphalt"
		83: "S - Slosh"
		84: "T - Tile"
		85: "U - Cardboard"
		86: "V - Vent"
		87: "W - Wood"
		88: "X - Fake surfaces"
		89: "Y - Glass"
		90: "Z - Warp Shield"
		1: "1 - Clay"
		2: "2 - Plaster"
		3: "3 - Rock"
		4: "4 - Rubber"
		5: "5 - Sheet Rock"
		6: "6 - Cloth"
		7: "7 - Carpet"
		8: "8 - Paper"
		9: "9 - Upholstery"
		11: "11 - Mud"
		]


	// Inputs
	input Enable(void) : "Start watching the player's surface."
	input Disable(void) : "Stop watching the player's surface."

	// Outputs
	output OnSurfaceChangedToTarget(void) : "Fired when the player moves onto the specified game material."
	output OnSurfaceChangedFromTarget(void) : "Fired when the player moves off the specified game material."
	]

@PointClass base(BaseEntityPoint, SystemLevelChoice) 
	frustum(lightfov, nearz, farz, lightcolor, -1)
	studio("models/editor/cone_helper.mdl")
	iconsprite("editor/env_projectedtexture")
	line(255 255 255, targetname, target)
	sphere(nearz)
	sphere(farz)
= env_projectedtexture: "Projected texture entity."
	[
	spawnflags(flags)  =
		[
		1: "[1] Enabled" : 1
		]

	target(target_destination) : "target" : : "target"
	lightfov(float) : "FOV" : "90.0" : "FOV"
	nearz(float) : "NearZ" : "4.0" : "Near Z for projected texture"
	farz(float) : "FarZ" : "750.0" : "Far Z for projected texture"
	enableshadows(choices) : "Enable Shadows" : 1 : "Enables/disables shadows from this projected texture." =
		[
		0: "No"
		1: "Yes"
		]

	shadowquality(choices) : "Shadow Quality" : 1 : "Quality of shadows." =
		[
		0: "Low"
		1: "High"
		]

	lightonlytarget(choices) : "Light Only Target" : 0 : "Limit flashlight effect to only effect target entity." =
		[
		0: "No"
		1: "Yes"
		]

	lightworld(choices) : "Light World" : 0 : "Control whether flashlight effects static world geometry." =
		[
		0: "No"
		1: "Yes"
		]

	lightcolor(color255) : "Light Color" : "255 255 255 200" : "Light Color RGB-Intensity"
	cameraspace(choices) : "Camera Space" : 0 : "Angles are interpreted as being relative to camera." =
		[
		0: "No"
		1: "Yes"
		]

	texturename(material) : "Texture Name" : "effects/flashlight001" : "VTF Texture to 'project' onto the enviroment. Please note that env_projectedtexture uses .vtf files directly and does not use .v" + "mt files. The material browser is only available here to assist with finding textures since materials typically have the same na" + "me as their textures."
	textureframe(integer) : "Texture Frame" : 0 : "If the VTF is multi-frame, specify the frame to use."

	// Inputs
	input TurnOn(void) : "Turn on the texture"
	input TurnOff(void) : "Turn off the texture"
	input SetFOV(float) : "Set FOV"
	input Target(target_destination) : "Set a new target entity to point at."
	input CameraSpace(bool) : "Set Camera Space."
	input SpotlightTexture(string) : "Set the spotlight texture"
	input EnableShadows(bool) : "Set if the shadows are enabled."
	]

@PointClass base(BaseEntityPoint) 
	studio("models/editor/cone_helper.mdl")
= env_rock_launcher: "Rock launcher"
	[
	rocktargetname(target_destination) : "Target Name" : : "The name of the entity to throw the rock at."
	rockdamageoverride(integer) : "Rock Damage Override" : 0 : "damage to be used instead of the the default rock damage. "

	// Inputs
	input LaunchRock(void) : "Launch a rock"
	input SetTarget(target_destination) : "Target a new entity (by name)"
	]

@PointClass base(BaseEntityPoint) = env_rockettrail: "Continuous rocket flame for HL2 RPG missiles."
	[
	]

@PointClass base(BaseEntityPoint) 
	color(200 0 0)
	iconsprite("editor/ficool2/env_screeneffect")
= env_screeneffect: "Allows screenspace effects to be played on the player's view."
	[
	type(choices) : "Effect Type" : 0 : "Which effect to use." =
		[
		0: "Advisor Stun"
		1: "Intro Blur"
		2: "Groggy Vision"
		]


	// Inputs
	input StartEffect(float) : "Start the effect with the duration in seconds as the passed parameter."
	input StopEffect(float) : "Stop the effect."
	]

@PointClass base(BaseEntityPoint) 
	color(200 0 0)
	iconsprite("editor/ficool2/env_screenoverlay")
= env_screenoverlay: "An entity that can display and control a set of screen overlays, to be displayed over the player's view. Useful for view effects" + " like drunkenness, or teleporter afterimages, etc."
	[
	overlayname1(material) : "Overlay Name 1" : : "Name of the first overlay material to display."
	overlaytime1(float) : "Overlay Duration 1" : "1.0" : "Amount of time that the first overlay should be displayed for, after which it will begin showing the second overlay."
	overlayname2(material) : "Overlay Name 2" : : "Name of the second overlay material to display. If left blank, overlay displaying will finish, and this entity will consider its" + "elf done."
	overlaytime2(float) : "Overlay Duration 2" : "1.0" : "Amount of time that the second overlay should be displayed for, after which it will begin showing the third overlay."
	overlayname3(material) : "Overlay Name 3" : : "Name of the third overlay material to display. If left blank, overlay displaying will finish, and this entity will consider itse" + "lf done."
	overlaytime3(float) : "Overlay Duration 3" : "1.0" : "Amount of time that the third overlay should be displayed for, after which it will begin showing the fourth overlay."
	overlayname4(material) : "Overlay Name 4" : : "Name of the fourth overlay material to display. If left blank, overlay displaying will finish, and this entity will consider its" + "elf done."
	overlaytime4(float) : "Overlay Duration 4" : "1.0" : "Amount of time that the fourth overlay should be displayed for, after which it will begin showing the fifth overlay."
	overlayname5(material) : "Overlay Name 5" : : "Name of the fifth overlay material to display. If left blank, overlay displaying will finish, and this entity will consider itse" + "lf done."
	overlaytime5(float) : "Overlay Duration 5" : "1.0" : "Amount of time that the fifth overlay should be displayed for, after which it will begin showing the sixth overlay."
	overlayname6(material) : "Overlay Name 6" : : "Name of the sixth overlay material to display. If left blank, overlay displaying will finish, and this entity will consider itse" + "lf done."
	overlaytime6(float) : "Overlay Duration 6" : "1.0" : "Amount of time that the sixth overlay should be displayed for, after which it will begin showing the seventh overlay."
	overlayname7(material) : "Overlay Name 7" : : "Name of the seventh overlay material to display. If left blank, overlay displaying will finish, and this entity will consider it" + "self done."
	overlaytime7(float) : "Overlay Duration 7" : "1.0" : "Amount of time that the seventh overlay should be displayed for, after which it will begin showing the eighth overlay."
	overlayname8(material) : "Overlay Name 8" : : "Name of the eighth overlay material to display. If left blank, overlay displaying will finish, and this entity will consider its" + "elf done."
	overlaytime8(float) : "Overlay Duration 8" : "1.0" : "Amount of time that the eighth overlay should be displayed for, after which it will begin showing the ninth overlay."
	overlayname9(material) : "Overlay Name 9" : : "Name of the ninth overlay material to display. If left blank, overlay displaying will finish, and this entity will consider itse" + "lf done."
	overlaytime9(float) : "Overlay Duration 9" : "1.0" : "Amount of time that the ninth overlay should be displayed for, after which it will begin showing the tenth overlay."
	overlayname10(material) : "Overlay Name 10" : : "Name of the tenth overlay material to display. If left blank, overlay displaying will finish, and this entity will consider itse" + "lf done."
	overlaytime10(float) : "Overlay Duration 10" : "1.0" : "Amount of time that the tenth overlay should be displayed for, after which this entity will stop displaying overlays."

	// Inputs
	input StartOverlays(void) : "Start displaying the first overlay."
	input StopOverlays(void) : "Stop displaying any overlays."
	input SwitchOverlay(float) : "Switch to displaying a specific overlay. Pass in the desired overlay number in the parameter."
	]

@PointClass base(BaseEntityPoint) 
	sphere(radius)
	iconsprite("editor/env_shake.vmt")
	color(200 0 0)
= env_shake: "An entity to control screen shake on players."
	[
	spawnflags(flags)  =
		[
		1: "[1] GlobalShake" : 0
		4: "[4] In Air" : 0
		8: "[8] Physics" : 0
		16: "[16] Ropes" : 0
		32: "[32] DON'T shake view (for shaking ropes or physics only)" : 0
		64: "[64] DON'T Rumble Controller" : 0
		]

	amplitude(float) : "Amplitude (0-16)" : 4 : "The amount of noise in the screen shake. Should be a range between 0 and 16."
	radius(float) : "Effect Radius" : 500 : "The radius around this entity in which to affect players."
	duration(float) : "Duration (seconds)" : 1 : "The length of time in which to shake the player's screens."
	frequency(float) : "Frequency" : "2.5" : "The frequency used to apply the screen shake. Should be a value between 0 and 255, where 0.1 = jerk, and 255.0 = rumble."

	// Inputs
	input Amplitude(string) : "Set the amplitude (0-16)"
	input Frequency(string) : "Set the frequence. Should be a value between 0 and 255, where 0.1 = jerk, and 255.0 = rumble."
	input StartShake(void) : "Start the shake."
	input StopShake(void) : "Stop the shake."
	]

@PointClass base(BaseEntityPoint) 
	color(200 200 0)
	iconsprite("editor/env_smokestack.vmt")
	sphere(jetlength)
= env_smokestack: "An entity that spits out a constant stream of smoke. See particlezoo.vmf for sample usage. You can place up to two env_particlel" + "ight entities near the smoke stack to add ambient light to its particles."
	[
	initialstate(choices) : "Initial State" : 0 =
		[
		0: "Off"
		1: "On"
		]

	basespread(integer) : "Spread at the base" : 20 : "Amount of random spread in the origins of the smoke particles when they're spawned."
	spreadspeed(integer) : "Spread Speed" : 15 : "Amount of random spread in the velocity of the smoke particles after they're spawned."
	speed(integer) : "Speed" : 30 : "The speed at which the smoke particles move after they're spawned."
	startsize(integer) : "Particle start size" : 20 : "Size of the smoke particles when they're first emitted."
	endsize(integer) : "Particle end size" : 30 : "Size of the smoke particles at the point they fade out completely."
	rate(integer) : "Emission rate" : 20 : "Rate at which to emit smoke particles (i.e. particles to emit per second)."
	jetlength(integer) : "Length of smoke trail" : 180 : "Length of the smokestack. Lifetime of the smoke particles is derived from this & particle speed."
	windangle(integer) : "Wind X/Y Angle" : 0 : "This specifies the wind direction. It is an angle in the XY plane. WindSpeed specifies the strength of the wind."
	windspeed(integer) : "Wind Speed" : 0 : "The strength of the wind."
	smokematerial(material) : "Particle material" : "particle/SmokeStack.vmt" : "Material of the smoke particles emitted by this stack."
	twist(integer) : "Twist" : 0 : "The amount, in degrees per second, that the smoke particles twist around the origin."
	roll(float) : "Roll Speed" : 0 : "Amount of roll in degrees per second."
	rendercolor(color255) : "Base Color (R G B)" : "255 255 255"
	renderamt(integer) : "Translucency" : 255

	// Inputs
	input TurnOn(void) : "Turn on the smokestack."
	input TurnOff(void) : "Turn off the smokestack."
	input Toggle(void) : "Toggles the smokestack between on and off state."
	input JetLength(integer) : "Set the length of the smoke trail."
	input Rate(integer) : "Set the rate at which to emit smoke particles (particles per second)."
	input Speed(integer) : "Set the speed at which the smoke particles move after they're spawned."
	input SpreadSpeed(integer) : "Set the amount of random spread in the velocity of the smoke particles after they're spawned."
	]

@PointClass base(BaseEntityPoint) 
	color(200 50 0)
	iconsprite("editor/ficool2/env_smoketrail")
	sphere(spawnradius)
= env_smoketrail: "An entity that creates a smoke trail."
	[
	opacity(float) : "Sprite Opacity" : "0.75" : "Opacity of the sprites (range from 0 - 1)."
	spawnrate(float) : "Spawn Rate" : 20 : "Number of particles to emit each second."
	lifetime(float) : "Particle Life Time" : "5.0" : "Number of seconds until each particle dies."
	startcolor(color255) : "Start Color" : "192 192 192" : "Starting color of the emitted particles."
	endcolor(color255) : "End Color" : "160 160 160" : "Ending color of the emitted particles."
	emittime(float) : "Emitter Life Time" : 0 : "Number of seconds until the env_smoketrail stops emitting particles. 0 means never stop emitting particles."
	minspeed(float) : "Minimum Random Speed" : 10 : "Minimum randomly-directed speed to use for emitted particles."
	maxspeed(float) : "Maximum Random Speed" : 20 : "Maximum randomly-directed speed to use for emitted particles."
	mindirectedspeed(float) : "Minimum Directed Speed" : 0 : "Minimum speed along the env_smoketrail's forward direction (x axis) to use for emitted particles."
	maxdirectedspeed(float) : "Maximum Directed Speed" : 0 : "Maximum speed along the env_smoketrail's forward direction (x axis) to use for emitted particles."
	startsize(float) : "Starting particle size" : 15 : "Starting particle size."
	endsize(float) : "Ending particle size" : 50 : "Ending particle size."
	spawnradius(float) : "Spawn radius" : 15 : "Distance from env_smoketrail at which particles are emitted."
	firesprite(sprite) : "Fire Sprite" : "sprites/firetrail.spr"
	smokesprite(sprite) : "Smoke Puff" : "sprites/whitepuff.spr"
	]

@PointClass base(BaseEntityPoint, EnableDisable) 
	sphere(radius)
	iconsprite("editor/env_soundscape.vmt")
	line(255 255 255, targetname, position0)
	line(255 255 255, targetname, position1)
	line(255 255 255, targetname, position2)
	line(255 255 255, targetname, position3)
	line(255 255 255, targetname, position4)
	line(255 255 255, targetname, position5)
	line(255 255 255, targetname, position6)
	line(255 255 255, targetname, position7)
= env_soundscape: "An entity to control sound in an area. The active soundscape at any time is the last one that had line-of-sight to the player, a" + "nd was within the radius."
	[
	radius(integer) : "Radius" : 128 : "If set to -1, then the player can hear the soundscape as long as he can see it (regardless of distance to it)."
	soundscape(choices) : "Soundscape" : "Nothing" : "The name of the soundscape to use. Corresponds to an entry in the soundscapes*.txt file in the scripts/ directory." =
		[
		"Nothing": "Nothing"
		"Automatic": "Automatic"
		"Automatic_Dialog": "Automatic (dialog)"
		"GenericIndoor": "Indoor"
		"GenericOutdoor": "Outdoor"
		]

	position0(target_destination) : "Sound Position 0" : : "A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the wo" + "rld."
	position1(target_destination) : "Sound Position 1" : : "A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the wo" + "rld."
	position2(target_destination) : "Sound Position 2" : : "A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the wo" + "rld."
	position3(target_destination) : "Sound Position 3" : : "A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the wo" + "rld."
	position4(target_destination) : "Sound Position 4" : : "A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the wo" + "rld."
	position5(target_destination) : "Sound Position 5" : : "A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the wo" + "rld."
	position6(target_destination) : "Sound Position 6" : : "A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the wo" + "rld."
	position7(target_destination) : "Sound Position 7" : : "A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the wo" + "rld."

	// Inputs
	input Enable(void) : "Enable the soundscape."
	input Disabled(void) : "Disable the soundscape."
	input ToggleEnabled(void) : "Toggle the soundscape enabled state."

	// Outputs
	output OnPlay(void) : "Fired when this soundscape becomes the active one."
	]

@PointClass base(BaseEntityPoint) 
	sphere(radius)
	line(255 255 255, targetname, MainSoundscapeName)
	iconsprite("editor/env_soundscape_proxy.vmt")
= env_soundscape_proxy: "An entity that acts like a soundscape but gets all of its sound parameters from another env_soundscape entity."
	[
	mainsoundscapename(target_destination) : "Soundscape Entity" : : "The soundscape to get all sound parameters from."
	radius(integer) : "Radius" : 128
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/env_spark.vmt")
	color(200 200 0)
	studio("models/editor/cone_helper.mdl")
= env_spark: "An entity used to create sparks at its origin."
	[
	maxdelay(string) : "Max Delay" : 0 : "The longest delay between sparks (in seconds)."
	magnitude(choices) : "Magnitude" : 1 : "The size of the sparks." =
		[
		1: "Small"
		2: "Medium"
		5: "Large"
		8: "Huge"
		]

	traillength(choices) : "Spark Trail Length" : 1 =
		[
		1: "Short"
		2: "Medium"
		3: "Long"
		]

	spawnflags(flags)  =
		[
		64: "[64] Start ON" : 0
		128: "[128] Glow" : 0
		256: "[256] Silent" : 0
		512: "[512] Directional" : 0
		]


	// Inputs
	input StartSpark(void) : "Start the spark effect."
	input StopSpark(void) : "Stop the spark effect."
	input ToggleSpark(void) : "Toggle the on/off state of the spark effect."
	input SparkOnce(void) : "Spark once."
	]

@PointClass base(BaseEntityPoint, ResponseContext) 
	iconsprite("editor/ambient_generic.vmt")
= env_speaker: "Announcement Speaker"
	[
	delaymin(string) : "Min Delay Between Announcements" : 15
	delaymax(string) : "Max Delay Between Announcements" : 135
	spawnflags(flags)  =
		[
		1: "[1] Start Silent" : 0
		2: "[2] Play Everywhere" : 0
		]

	rulescript(string) : "Context rule script" : : "Script file containing rules for playing appropriate sounds."
	concept(string) : "Concept name" : : "High level concept name used as primary search key."

	// Inputs
	input TurnOn(void) : "Turn on the random announcements."
	input TurnOff(void) : "Turn off the random announcements."
	input Toggle(void) : "Toggle the random announcements off and on."
	]

@PointClass base(BaseEntityPoint) 
	color(32 200 255)
	studio("models/editor/env_splash.mdl")
= env_splash: "An entity that creates a splash effect at its origin. If the 'find water surface' spawnflag is set, it will instead trace down b" + "elow itself to find the water surface on which to create splashes."
	[
	scale(float) : "Scale of the splash" : "8.0"
	spawnflags(flags)  =
		[
		1: "[1] Automatically find water surface (place entity above water)" : 0
		2: "[2] Diminish with depth (diminished completely in 10 feet of water)" : 1
		]


	// Inputs
	input Splash(void) : "Create a splash effect."
	]

@PointClass base(BaseEntityPoint, RenderFields, SystemLevelChoice) 
	studio("models/editor/axis_helper_white.mdl")
	sprite()
	color(20 140 20)
	sphere(GlowProxySize)
= env_sprite: "An entity that controls the drawing of a sprite in the world."
	[
	framerate(float) : "Framerate" : "10.0" : "Rate at which the sprite should animate, if at all."
	model(sprite) : "Sprite Name" : "sprites/glow01.spr" : "Material of the sprite to be drawn."
	scale(float) : "Scale" : "0.25" : "Scale multiplier of the sprite."
	spawnflags(flags)  =
		[
		1: "[1] Start on" : 0
		2: "[2] Play Once" : 0
		]

	rendermode(choices) : "Render Mode" : 9 : "Specify the sprite rendering behaviour." =
		[
		3: "Glow"
		9: "World Space Glow"
		0: "Normal"
		1: "Color"
		2: "Texture"
		4: "Solid"
		5: "Additive"
		7: "Additive Fractional Frame"
		10: "Don't Render"
		]

	glowproxysize(float) : "Size of Glow Proxy Geometry." : "2.0" : "Size of the glow to be rendered for visibility testing. Must be larger than the distance from the sprite center to empty space. " + "So if this glow is inside geometry (like a light bulb), set this value to be bigger than the bulb's radius. Any time a sphere of" + " this radius would be visible (poking through any nearby geometry), the glow will be rendered."
	hdrcolorscale(float) : "HDR color scale." : "0.7" : "float value to multiply sprite color by when running in HDR mode."

	// Inputs
	input ColorRedValue(float) : "Sets the red color channel's value (0 - 255)."
	input ColorGreenValue(float) : "Sets the green color channel's value (0 - 255)."
	input ColorBlueValue(float) : "Sets the blue color channel's value (0 - 255)."
	input SetScale(float) : "Set the sprite's scale (0 - 8.0)."
	input HideSprite(void) : "Hide the sprite. Won't be drawn until the 'ShowSprite' input is received."
	input ShowSprite(void) : "Show the sprite."
	input ToggleSprite(void) : "Toggle the sprite between hidden and shown."
	]

@PointClass base(BaseEntityPoint, RenderFields) 
	iconsprite("editor/env_spritetrail.vmt")
	sphere(startwidth)
	sphere(endwidth)
= env_spritetrail: "A magical trail you can parent to anything you heart desires."
	[
	lifetime(float) : "Lifetime" : "0.5"
	startwidth(float) : "Start Width" : "8.0"
	endwidth(float) : "End Width" : "1.0"
	spritename(sprite) : "Sprite Name" : "sprites/bluelaser1.vmt"
	renderamt(integer) : "FX Amount (0 - 255)" : 255 : "The FX amount is used by the selected Render Mode."
	rendercolor(color255) : "FX Color (R G B)" : "255 255 255" : "The FX color is used by the selected Render Mode."
	rendermode(choices) : "Render Mode" : 5 =
		[
		0: "Normal"
		4: "Solid"
		5: "Additive"
		]

	]

@PointClass base(BaseEntityPoint, RenderFields) 
	color(200 200 0)
	studio("models/editor/spot_cone.mdl")
= env_steam: "An entity used to create a jet of steam."
	[
	spawnflags(flags)  =
		[
		1: "[1] Emissive" : 0
		]

	initialstate(choices) : "Initial State" : 0 =
		[
		0: "No"
		1: "Yes"
		]

	type(choices) : "Particle Type" : 0 =
		[
		0: "Normal"
		1: "Heat Wave"
		]

	spreadspeed(integer) : "Spread Speed" : 15 : "The amount of random spread in the particle's velocity after they spawn."
	speed(integer) : "Speed" : 120 : "The default speed at which the particles move after they spawn."
	startsize(integer) : "Particle start size" : 10 : "The initial size of the particles after they spawn."
	endsize(integer) : "Particle end size" : 25 : "The size of the particles at the point at which they are removed."
	rate(integer) : "Emission rate" : 26 : "The rate of particle emission. i.e. particles per second."
	rendercolor(color255) : "Color (R G B)" : "255 255 255"
	jetlength(integer) : "Length of steam jet" : 80 : "The length of the jet determines the lifetime of each particle."
	renderamt(integer) : "Translucency" : 255
	rollspeed(float) : "How fast does the particles spin" : 8

	// Inputs
	input TurnOn(void) : "Turns the steam jet on."
	input TurnOff(void) : "Turns the steam jet off."
	input Toggle(void) : "Toggles the steam jet between on and off."
	input JetLength(integer) : "Sets the length of steam jet."
	input Rate(integer) : "Sets the particle emission rate in particles per second."
	input Speed(integer) : "Sets the default speed of the particles in units per second."
	input SpreadSpeed(integer) : "Sets the spread speed in units per second."
	]

@PointClass base(BaseEntityPoint, RenderFields, SystemLevelChoice) 
	color(200 0 0)
	iconsprite("editor/env_sun.vmt")
	line(255 255 0, targetname, target)
= env_sun: "An entity to control & draw a sun effect in the sky."
	[
	target(target_destination) : "Viewer entity" : : "Name of an entity used to determine where the sun is in the skybox. The sun should be lined up on a line from this entity to the" + " env_sun entity."
	use_angles(choices) : "UseAngles" : 0 : "The old way to orient env_sun is to point it at a target. The new way is to specify the angles. If you use the new way, set this" + " property to YES." =
		[
		0: "No"
		1: "Yes"
		]

	pitch(integer) : "Pitch" : 0
	rendercolor(color255) : "Sun Color (R G B)" : "100 80 80"
	overlaycolor(color255) : "Overlay Color (R G B)" : "0 0 0" : "A value of 0 0 0 will act the old way."
	size(integer) : "Size" : 16
	overlaysize(integer) : "Overlay Size" : -1 : "A value of -1 means the overlay will act the old way."
	material(sprite) : "Material Name" : "sprites/light_glow02_add_noz" : "Material of the inner glow."
	overlaymaterial(sprite) : "Overlay Material Name" : "sprites/light_glow02_add_noz" : "Material of the overlay glow."
	hdrcolorscale(float) : "HDR color scale." : "0.5" : "float value to multiply sprite color by when running in HDR mode."

	// Inputs
	input TurnOn(void) : "Enable sun rendering."
	input TurnOff(void) : "Disable sun rendering."
	input SetColor(color255) : "Change the sun's color. Format: <Red 0-255> <Green 0-255> <Blue 0-255>"
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/env_texturetoggle.vmt")
	line(255 255 0, targetname, target)
= env_texturetoggle: "An entity that allows you to change the textures on other brush-built entities, or on overlays."
	[
	target(target_destination) : "Target Brush or Overlay name."

	// Inputs
	input IncrementTextureIndex(void) : "Increments target brush's current texture frame by one."
	input SetTextureIndex(integer) : "Sets target brush's texture frame to the specified index."
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/env_tonemap_controller.vmt")
	color(200 0 0)
= env_tonemap_controller: "An entity that controls the HDR tonemapping for the player. Think of it as a method of controlling the exposure of the player's " + "eyes."
	[
	spawnflags(flags)  =
		[
		1: "[1] Master (Has priority if multiple env_tonemap_controllers exist)" : 0
		]


	// Inputs
	input SetTonemapScale(integer) : "Set the player's tonemap scale. It should be a value between 0 and 2, where 0 is the eyes fully closed, 1 is use the unchanged a" + "utoexposure (default), and 2 is the eye fully wide open."
	input BlendTonemapScale(string) : "Blend from the player's current tonemap scale to a new one. The parameter syntax is as follows: <target tonemap scale> <blend du" + "ration>. For example: '0.5 10' would blend from the current tonemap scale to 0.5 over a period of 10 seconds. Tonemap scale is a" + " value between 0 and 2, where 0 is the eyes fully closed, 1 is use the unchanged autoexposure (default), and 2 is the eye fully " + "wide open."
	input UseDefaultAutoExposure(void) : "Revert to using the default tonemap auto exposure."
	input SetAutoExposureMin(float) : "Set a custom tonemap auto exposure minimum."
	input SetAutoExposureMax(float) : "Set a custom tonemap auto exposure maximum."
	input SetBloomScale(float) : "Set a custom bloom scale."
	input UseDefaultBloomScale(void) : "Revert to using the default bloom scale."
	input SetTonemapRate(float) : "Set the rate for autoexposure adjustment."
	input SetBloomExponent(float) : "Set a custom bloom exponent."
	input SetBloomSaturation(float) : "Set a custom bloom saturation."
	input SetTonemapPercentBrightPixels(float) : "Set a target for percentage of pixels above a certain brightness. (default: 2)"
	input SetTonemapPercentTarget(float) : "Set a custom brightness target for SetTonemapPercentBrightPixels. (default: 60)"
	input SetTonemapMinAvgLum(float) : "Sets custom tonemapping param (ask Alex for details; default: 3)."
	]

@PointClass base(BaseEntityPoint) 
	sphere(radius)
	iconsprite("editor/ficool2/env_viewpunch.vmt")
	color(200 200 0)
= env_viewpunch: "Causes a view punch on players."
	[
	spawnflags(flags)  =
		[
		1: "[1] Punch all players (ignore radius)" : 0
		2: "[2] Punch players in the air" : 0
		]

	punchangle(angle) : "Punch angles" : "0 0 90" : "The punch angles to apply."
	radius(float) : "Effect Radius" : 500 : "The radius around this entity in which to affect players."

	// Inputs
	input ViewPunch(void) : "Performs the view punch."
	]

@PointClass base(BaseEntityPoint, EnableDisable) 
	studio("models/editor/cone_helper.mdl")
= env_weaponfire: "Weapon fire"
	[
	targetarc(float) : "Target Arc" : 40 : "The arc that the entity will seach for targets (in degrees)"
	targetrange(float) : "Target Range" : 3600 : "The distance that the endity will search for targets (in inches)"
	filtername(filterclass) : "Target Filter" : : "Filter to use to determine if an entity is a valid target"
	damagemod(float) : "Damage Modifier" : "1.0" : "Used to increase or decrease the amount of damage per shot"
	weapontype(choices) : "Weapon Type" : 1 =
		[
		1: "Assault Rifle"
		2: "Hunting Rifle"
		3: "Auto Shotgun"
		]

	targetteam(choices) : "Target Team" : 3 =
		[
		3: "Zombies"
		2: "Survivors"
		-1: "Either"
		]

	ignoreplayers(choices) : "Ignore Players" : 0 =
		[
		0: "No"
		1: "Yes"
		]

	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/env_wind.vmt")
	color(200 0 0)
	sphere(windradius)
	sphere(windradiusinner)
= env_wind: "An entity to control wind in the map. Partially functional."
	[
	minwind(integer) : "Min normal speed" : 20 : "Minimum speed of the wind while idling."
	maxwind(integer) : "Max normal speed" : 50 : "Maximum speed of the wind while idling."
	mingust(integer) : "Min gust speed" : 100 : "Minimum speed of wind gusts."
	maxgust(integer) : "Max gust speed" : 250 : "Maximum speed of wind gusts."
	mingustdelay(integer) : "Min gust delay" : 10 : "Minimum time delay between random gusts."
	maxgustdelay(integer) : "Max gust delay" : 20 : "Maximum time delay between random gusts."
	gustduration(integer) : "Gust Duration" : 5 : "How long will the wind gust for."
	gustdirchange(integer) : "Max gust dir change (degrees)" : 20 : "Maximum amount that the wind's direction changes due to a gust."

	// Outputs
	output OnGustStart(void) : "Fired when a wind gust begins."
	output OnGustEnd(void) : "Fired when a wind gust ends."
	]

@PointClass base(BaseEntityPoint) 
	color(200 0 0)
	iconsprite("editor/ficool2/env_zoom.vmt")
= env_zoom: "An entity that can be used to control the player's FOV. Useful for scenes where the player's view is being controlled, or player" + "-usable binoculars/telescopes, etc."
	[
	rate(float) : "Seconds to reach target" : "1.0" : "Amount of time it should take to reach the specified FOV."
	fov(integer) : "Target FOV" : 75 : "FOV that this entity should set the player's FOV to when active."
	spawnflags(flags)  =
		[
		1: "[1] Allow Suit Zoom" : 0
		]


	// Inputs
	input Zoom(void) : "Start controlling the player's FOV."
	input UnZoom(void) : "Stop controlling the player's FOV."
	]

@FilterClass base(BaseEntityPoint) 
	color(0 255 0)
	iconsprite("editor/ficool2/filter_base.vmt")
= filter_base: "Base filter, which all other filters are based off of. This filter passes any entity whatsoever."
	[
	negated(choices) : "Filter Mode" : 0 : "If set to Allow, only entities who match the criteria will pass the filter. If set to Disallow, only entities who do NOT match t" + "he criteria will pass the filter." =
		[
		0: "Allow entities that match criteria"
		1: "Disallow entities that match criteria"
		]


	// Inputs
	input TestActivator(void) : "Test the activator against the filter and fires OnPass or OnFail output."

	// Outputs
	output OnPass(void) : "Fired in response to TestActivator input if the activator passes the filter."
	output OnFail(void) : "Fired in response to TestActivator input if the activator fails to pass the filter."
	]

@SolidClass base(BaseEntityBrush, EnableDisable) 
	line(255 255 0, targetname, fogname)
	line(255 255 0, targetname, postprocessname)
	line(255 255 0, targetname, colorcorrectionname)
= fog_volume: "An entity to control the fog in the map."
	[
	fogname(target_destination) : "Fog Name" : : "The name of the fog entity associated with this volume."
	postprocessname(target_destination) : "Postprocess Name" : : "The name of the postprocess entity associated with this volume."
	colorcorrectionname(target_destination) : "ColorCorrection Name" : : "The name of the color_correction entity associated with this volume."
	]

@SolidClass base(BaseEntity) 
	color(0 255 255)
= func_areaportal: "A portal brush used to manage visibility in maps. Portals define areas, which are spaces that are connected in the map. Both sid" + "es of a portal cannot touch the same area, for example, a doughnut shaped map would require at least two portals to divide the m" + "ap into two areas. A linear map could be divided into two areas with a single area portal."
	[
	target(target_destination) : "Name of Linked Door" : : "(Optional) The name of a prop_door_rotating or func_door whose open/closed state controls the on/off state of this area portal."
	startopen(choices) : "Initial State" : 1 =
		[
		0: "Closed"
		1: "Open"
		]

	portalversion(integer) readonly : "Portal Version" : 1 : "(Don't change). Differentiates between shipping HL2 maps and maps using new engine features."

	// Inputs
	input Open(void) : "Open the portal. When the portal is open is can be seen through."
	input Close(void) : "Close the portal. When the portal is closed it cannot be seen through."
	input Toggle(void) : "Toggle the open/closed state of the portal."
	]

@SolidClass base(BaseEntity) 
	color(0 128 255)
	sphere(FadeStartDist)
	sphere(FadeDist)
	line(255 255 0, targetname, target)
	line(255 255 0, targetname, backgroundbmodel)
= func_areaportalwindow: "An entity that can be used to optimize the visibility in a map. If you seal off an area with them, when the viewer moves the spe" + "cified distance away from them, they will go opaque and the parts inside the area will not be drawn. The window brush should enc" + "lose the func_areaportal window so no parts of it are culled by the window. If you use the optional foreground brush, then it sh" + "ould enclose the window brush. Both brush models will have their drawing disabled as the areaportal will render them itself."
	[
	target(target_destination) : "Rendered Window" : : "The name of a brush model to render as the window."
	fadestartdist(integer) : "Fade Start Distance" : 128 : "When the viewer is closer than this distance, the alpha is set to 'TranslucencyLimit'."
	fadedist(integer) : "Fade End Distance" : 512 : "When the viewer is at this distance, the portal becomes solid and closes off."
	translucencylimit(float) : "Translucency limit" : "0.2" : "This value limits the translucency of the bmodel and prevents it from becoming invisible when the viewer is right on top of it."
	backgroundbmodel(target_destination) : "Foreground Brush" : : "(Optional) brush model that is drawn after the fading brush model. This model should have alpha in its textures so you can see t" + "hrough it."
	portalversion(integer) readonly : "Portal Version" : 1 : "(Don't change). Differentiates between shipping HL2 maps and maps using new engine features."

	// Inputs
	input SetFadeStartDistance(integer) : "Set fade start distance."
	input SetFadeEndDistance(integer) : "Set fade end distance."
	]

@SolidClass base(BaseEntityBrush) = func_clip_vphysics: "A brush entity that's considered solid to vphysics."
	[
	spawnflags(flags)  =
		[
		]

	filtername(filterclass) : "Filter Name" : : "Filter to use to see if activator collides with me. See filter_activator_name for more explanation. Allow means 'Allow to Block'" + " for this entity."

	// Inputs
	input Enable(void) : "Enable this entity."
	input Disable(void) : "Disable this entity."
	]

@SolidClass base(BaseEntityBrush, BModelParticleSpawner) 
	sphere(distmax)
= func_dustcloud: "A brush entity that spawns a translucent dust cloud within its volume."
	[
	alpha(integer) : "Alpha" : 30
	sizemin(string) : "Minimum Particle Size" : 100
	sizemax(string) : "Maximum Particle Size" : 200
	]

@SolidClass base(BaseEntityBrush, BModelParticleSpawner) 
	sphere(distmax)
= func_dustmotes: "A brush entity that spawns sparkling dust motes within its volume."
	[
	alpha(integer) : "Particle Translucency (0 - 255)" : 30 : "Translucency of the particles."
	sizemin(string) : "Minimum Particle Size" : 100 : "This value determines the minimum size the particles can be."
	sizemax(string) : "Maximum Particle Size" : 200 : "This value determines the maximum size the particles can be."
	fallspeed(integer) : "Particle Fall Speed" : : "How fast the particles fall to the ground."

	// Inputs
	input TurnOn(void) : "Turn on."
	input TurnOff(void) : "Turn off."
	]

@SolidClass base(BaseEntityBrush, EnableDisable) = func_extinguisher: "A brush entity that will delete inferno entities that touch it."
	[
	spawnflags(flags)  =
		[
		1: "[1] Fire" : 1
		2: "[2] Acid" : 1
		4: "[4] Fireworks" : 1
		]

	]

@PointClass base(Angles) 
	instance()
	size(-2 -2 -2, 2 2 2)
= func_instance: "An entity for placing an instance of a map file.  You may translate and rotate this entity. You can use the replace keys to do p" + "arameter changes on the instance contents in a $ at the beginning of a variable name. Then just use the $variable name inside of" + " the instance contents on any value portion of a key/value pair."
	[
	targetname(target_source) : "Fix Up Name" : : "The name that all entities will be fixed up with based upon the fix up style."
	file(instance_file) : "VMF Filename" : : "This indicates a map file relative to the map's file name. This is also looked up relative to sdk_content/maps/, if one exists i" + "n the parent directories."
	fixup_style(choices) : "Entity Name Fix Up" : 0 : "Fixup style for instanced entity names.  Uses the 'Fix Up Name' field." =
		[
		0: "Prefix"
		1: "Postfix"
		2: "None"
		]

	spawnpositionname(string) : "Spawn Position Name" : : "The name of the spawn position created when an instance is exported to the entity layer."
	propagate_fixup(choices) : "Fixup Nested Instances" : 0 : "All nested instances will follow this instance's fixup rules. Any fixup rules in nested instances will be ignored." =
		[
		0: "No"
		1: "Yes"
		]

	replace01(instance_variable) : "Replace Variable" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $varia" + "ble somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace02(instance_variable) : "Replace Variable" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $varia" + "ble somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace03(instance_variable) : "Replace Variable" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $varia" + "ble somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace04(instance_variable) : "Replace Variable" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $varia" + "ble somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace05(instance_variable) : "Replace Variable" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $varia" + "ble somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace06(instance_variable) : "Replace Variable" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $varia" + "ble somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace07(instance_variable) : "Replace Variable" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $varia" + "ble somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace08(instance_variable) : "Replace Variable" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $varia" + "ble somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace09(instance_variable) : "Replace Variable" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $varia" + "ble somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace10(instance_variable) : "Replace Variable" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $varia" + "ble somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace11(instance_variable) : "Replace Variable" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $varia" + "ble somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace12(instance_variable) : "Replace Variable" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $varia" + "ble somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace13(instance_variable) : "Replace Variable" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $varia" + "ble somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace14(instance_variable) : "Replace Variable" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $varia" + "ble somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace15(instance_variable) : "Replace Variable" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $varia" + "ble somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace16(instance_variable) : "Replace Variable" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $varia" + "ble somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace17(instance_variable) : "Replace Variable" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $varia" + "ble somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace18(instance_variable) : "Replace Variable" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $varia" + "ble somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace19(instance_variable) : "Replace Variable" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $varia" + "ble somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace20(instance_variable) : "Replace Variable" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $varia" + "ble somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace21(instance_variable) : "Replace Variable" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $varia" + "ble somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace22(instance_variable) : "Replace Variable" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $varia" + "ble somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace23(instance_variable) : "Replace Variable" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $varia" + "ble somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace24(instance_variable) : "Replace Variable" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $varia" + "ble somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace25(instance_variable) : "Replace Variable" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $varia" + "ble somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace26(instance_variable) : "Replace Variable" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $varia" + "ble somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace27(instance_variable) : "Replace Variable" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $varia" + "ble somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace28(instance_variable) : "Replace Variable" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $varia" + "ble somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace29(instance_variable) : "Replace Variable" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $varia" + "ble somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace30(instance_variable) : "Replace Variable" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $varia" + "ble somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	]

@PointClass base(BaseEntityPoint) 
	size(-16 -16 0, 16 16 72)
	color(127 127 127)
= func_ladderendpoint: "An entity used to specify the endpoints of a ladder. This entity is functional, but has been replaced by the easier-to-use func_" + "useableladder entity. Left in only for backwards-compatibility!\n\nTo be valid, a full sized player hull traced between the star" + "t and end points must not be obstructed at level activation time. The angle determines in which direction the player leaves the " + "ladder if the player presses the +jump button.\n\nNote: This entity is non-functional in Counter-Strike: Source. In CS:S, use fu" + "nc_ladder instead."
	[
	target(target_destination) : "Other" : : "A ladder goes between any two func_ladderendpoints pointing at each other."
	]

@SolidClass base(BaseEntityBrush, NavAttributeRegion) = func_nav_attribute_region: "A brush entity that holds attributes to be applied to regions of nav areas during generation."
	[
	spawnflags(flags)  =
		[
		2: "[2] Empty (no wanderers)" : 0
		32: "[32] Battlestation" : 0
		64: "[64] Finale" : 0
		128: "[128] Mission Start" : 0
		256: "[256] Battlefield" : 0
		2048: "[2048] Checkpoint" : 0
		8192: "[8192] No mobs" : 0
		32768: "[32768] Rescue Vehicle" : 0
		65536: "[65536] Rescue Closet" : 0
		524288: "[524288] No Threat" : 1
		1048576: "[1048576] Lying Down" : 1
		]

	]

@SolidClass base(BaseEntityBrush, EnableDisable) = func_nav_avoidance_obstacle: "A brush entity that tells bots to avoid nav areas touching its AABB."
	[
	]

@SolidClass base(BaseEntityBrush, NavBlocker) = func_nav_blocker: "A brush entity that can block nav areas touching its AABB."
	[
//	teamtoblock(integer) : "Team(s) to block" : -1 : "Team(s) this entity should block."
	startdisabled(choices) : "Start Disabled" : 0 =
		[
		0: "No"
		1: "Yes"
		]


	// Inputs
	input BlockNav(string) : "Starts blocking nav areas."
	input UnblockNav(void) : "Stops blocking nav areas."
	]

@SolidClass base(BaseEntityBrush) = func_nav_connection_blocker: "A brush entity that prevents navigation mesh (on creation) connections to be made through its volume."
	[
	]

@SolidClass base(BaseEntity) 
	color(0 255 255)
= func_occluder: "A occluder brush used to manage dynamic visibility in maps. Occluders are used to dynamically determine what things are behind t" + "hem, to prevent trying to draw them at all."
	[
	startactive(choices) : "Initial State" : 1 =
		[
		0: "Inactive"
		1: "Active"
		]


	// Inputs
	input Deactivate(void) : "Deactivate the occluder, When inactive, it can be seen through."
	input Activate(void) : "Activate the occluder. When active, it cannot be seen through."
	input Toggle(void) : "Toggle the active/inactive state of the occluder."
	]

@SolidClass base(BaseEntityBrush) = func_precipitation: "A brush entity that creates rain and snow inside its volume."
	[
	renderamt(integer) : "Density (0-100%)" : 5 : "This is the amount of particles that fall down from top side of brush. However distance from first particle to second depends on" + " a brush volume size!"
	rendercolor(color255) : "Color (R G B)" : "100 100 100" : "Color added to sprites which are rendered transparently (probably rain and snow particles)"
	preciptype(choices) : "Precipitation Type" : 0 =
		[
		0: "Rain"
		1: "Snow"
		2: "Ash"
		3: "Snowfall"
		4: "Particle Rain"
		5: "Particle Ash"
		6: "Particle Rainstorm"
		8: "Particle Bugs"
		9: "Particle Smoke"
		]


	// Inputs
	input Alpha(void) : "Changes the density of the rain, and may add additional particle effects like fog or leaves. Accepts inputs from -1 to 255."
	]

@SolidClass base(BaseEntityBrush) = func_precipitation_blocker: "A brush entity that prevents rain and snow inside its volume."
	[
	]

@SolidClass base(BaseEntityBrush, EnableDisable) = func_ragdoll_fader: "A brush entity that will fade out any ragdolls that touch it"
	[
	]

@SolidClass base(BaseEntityBrush) = func_smokevolume: "A brush entity that spawns smoke particles within its volume."
	[
	spawnflags(flags)  =
		[
		1: "[1] Emissive" : 0
		]

	color1(color255) : "Particle Color1 (R G B)" : "255 255 255"
	color2(color255) : "Particle Color2 (R G B)" : "255 255 255"
	material(material) : "Material" : "particle/particle_smokegrenade" : "The material to use for the particles"
	particledrawwidth(float) : "Particle Draw Width (units)" : 120 : "The size of the particles, in units/inches."
	particlespacingdistance(float) : "Particle Spacing Distance (units)" : 80 : "The distance between the particles inside the volume. The lower the number, the denser the particles, and the more overdraw ther" + "e will be. It is best to keep it as high as you can without it looking bad."
	densityrampspeed(float) : "Density Ramp Speed (seconds)" : 1 : "Time to go from density 0 to density 1, in seconds."
	rotationspeed(float) : "Rotation Speed (degrees/sec)" : 10 : "The speed that the particles should rotate, in degrees per second."
	movementspeed(float) : "Movement Speed (units/sec)" : 10 : "The speed that the particles should move around, in units/inches per second."
	density(float) : "Density [0..1]" : 1

	// Inputs
	input SetRotationSpeed(float) : "Set the particle rotation speed (in degrees per second)."
	input SetMovementSpeed(float) : "Set the particle movement speed (in inches per second)."
	input SetDensity(float) : "Set the particle density. It should be a range from 0 to 1."
	]

@PointClass base(BaseEntityPoint) = func_timescale: "Adjust the time scale of the server and client."
	[
	desiredtimescale(float) : "Desired timescale." : "1.0" : "Time scale to blend towards, this is a multiplicative value where 1.0 is normal time, 0.5 is half speed, 2.0 is double speed."
	acceleration(float) : "Acceleration per second" : "0.05" : "How quickly the change per second goes up to the max."
	minblendrate(float) : "Minimum blend per second" : "0.1" : "Minimum change per second when blending from the current timescale to the desired."
	blenddeltamultiplier(float) : "Perframe delta multiplier" : "3.0" : "The per frame delta between desired and current is multiplied by this to get the maximum change per second."

	// Inputs
	input Start(void) : "Start blending to the desired timescale."
	input Stop(void) : "Stop and blend back to the default timescale (1.0f)."
	input Reset(void) : "Reset immediately to normal timescale (1.0f)."
	]

@PointClass base(BaseEntityPoint) 
	sweptplayerhull()
= func_useableladder: "A Half-Life 2 ladder. Handles player auto mount/unmount, as well as +use to get onto the ladder. \n\nSee also 'info_ladder_dismo" + "unt', used to specify ladder auto-dismount points.\n\nNote: This entity is non-functional in Counter-Strike: Source. Use func_la" + "dder instead."
	[
	spawnflags(flags)  =
		[
		1: "[1] Fake Ladder" : 0
		]

	point0(vector) : "Start" : : "Ladder end point."
	point1(vector) : "End" : : "Ladder end point."
	startdisabled(choices) : "Start Disabled" : 0 =
		[
		0: "No"
		1: "Yes"
		]

	laddersurfaceproperties(string) : "Surface properties (optional)"

	// Inputs
	input Enable(void) : "Enable this ladder."
	input Disable(void) : "Disable this ladder."

	// Outputs
	output OnPlayerGotOnLadder(void) : "Fired whenever a player gets on this ladder."
	output OnPlayerGotOffLadder(void) : "Fired whenever a player gets off this ladder."
	]

@SolidClass base(BaseEntityBrush) = func_vehicleclip: "Acts as a functional clip or barrier affecting vehicle entities. Should be used with the tools/toolscontrolclip texture."
	[

	// Inputs
	input Kill(void) : "Removes this entity from the world"
	input Enable(void) : "Enable collisions with vehicles"
	input Disable(void) : "Disable collisions with vehicles"
	]

@SolidClass base(BaseEntityBrush) = func_wall: "Legacy support for Half-Life. Use func_brush instead. A general brush entity."
	[
	]

@PointClass base(BaseEntityPoint, MasterEnt) 
	line(255 255 255, targetname, master)
	iconsprite("editor/game_end.vmt")
= game_end: "An entity that ends a multiplayer game."
	[

	// Inputs
	input EndGame(void) : "End the multiplayer game."
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/ficool2/game_gib_manager")
	color(200 0 0)
= game_gib_manager: "An entity to control the number of gibs in the world, for performance reasons."
	[
	maxpieces(integer) : "Max Gib Count" : -1 : "Sets the max number of gib that can be spawned at a time. (-1=no limit)"
	maxpiecesdx8(integer) : "Max Gib Count On DX8" : -1 : "Sets the max number of gib that can be spawned at a time under DX8. (-1=use Max Gib Count setting)"
	allownewgibs(choices) : "Allow New Gibs To Spawn" : 0 : "If true, when the max gib count is reached, oldest gibs are removed as new gibs spawn. If false, new gibs will not be spawned on" + "ce the gib limit is reached." =
		[
		0: "No"
		1: "Yes"
		]


	// Inputs
	input SetMaxPieces(integer) : "Set the max gib count."
	input SetMaxPiecesDX8(integer) : "Set the max gib count under DX8."
	]

@PointClass base(BaseEntityPoint, MasterEnt) 
	line(255 255 255, targetname, master)
	iconsprite("editor/ficool2/game_player_equip")
= game_player_equip: "An entity that gives equipment to the player who activates it. To use, add new keys to this entity, where each key is the classn" + "ame of a weapon/item, and the corresponding value is the number of those weapons/items to give to the player who uses this entit" + "y. \n\nSince CSGO:\nIf the 'Use Only' spawnflag isn't set, then players can just touch this entity to get the equipment (or the " + "TriggerForAllPlayers input can be used).If the Strip Player First flag is set, the player will be stripped of all weapons and it" + "ems (including armor) before being given the items specified in this entity."
	[
	spawnflags(flags)  =
		[
		1: "[1] Use Only" : 0
		]

	]

@PointClass base(BaseEntityPoint, MasterEnt) 
	line(255 255 255, targetname, master)
	iconsprite("editor/ficool2/game_player_team")
	color(200 0 0)
= game_player_team: "An entity that changes the team of the player who activates it."
	[
	spawnflags(flags)  =
		[
		1: "[1] Remove On fire" : 0
		2: "[2] Kill Player" : 0
		4: "[4] Gib Player" : 0
		]

	target(string) : "game_team_master to use"
	]

@PointClass base(BaseEntityPoint) 
	color(200 0 0)
	iconsprite("editor/ficool2/game_ragdoll_manager")
= game_ragdoll_manager: "An entity to control the number of ragdolls in the world, for performance reasons."
	[
	maxragdollcount(integer) : "Max Ragdoll Count" : -1 : "Sets the max number of ragdolls that can be in the world at a time (if they are flagged to fade). Set to -1 if you want to use t" + "he default value (g_ragdoll_maxcount)."
	maxragdollcountdx8(integer) : "Max Ragdoll Count DX8" : -1 : "Sets the max number of ragdolls that can be in the world at a time on DX8 hardware (if they are flagged to fade). Set to -1 if y" + "ou want to use the 'Max Ragdoll Count' value."
	saveimportant(choices) : "Save Important Ragdolls" : 0 : "Should the ragdoll manager make sure ally ragdolls aren't deleted?" =
		[
		0: "No"
		1: "Yes"
		]


	// Inputs
	input SetMaxRagdollCount(integer) : "Set the Max Ragdoll Count."
	input SetMaxRagdollCountDX8(integer) : "Set the Max Ragdoll Count on DX8 hardware."
	]

@PointClass base(BaseEntityPoint) = game_scavenge_progress_display
	[
	max(float) : "Max" : 0 : "Number of items to collect."

	// Inputs
	input TurnOn(void) : "Turn the display on."
	input TurnOff(void) : "Turn the display off."
	input SetTotalItems(integer) : "Set the target (or total) number of scavenge itmes."
	]

@PointClass base(BaseEntityPoint, MasterEnt) 
	line(255 255 255, targetname, master)
	iconsprite("editor/ficool2/game_score")
	color(200 0 0)
= game_score: "An entity that awards/deducts points from the player who activates it or to a specific team."
	[
	spawnflags(flags)  =
		[
		1: "[1] Allow Negative" : 0
		2: "[2] Team Points" : 0
		]

	points(integer) : "Points to add (+/-)" : 1

	// Inputs
	input ApplyScore(void) : "Add score to player."
	]

@PointClass base(BaseEntityPoint, MasterEnt) 
	line(255 255 255, targetname, master)
	iconsprite("editor/game_text.vmt")
	color(200 0 0)
= game_text: "An entity that displays text on player's screens."
	[
	spawnflags(flags)  =
		[
		1: "[1] All Players" : 0
		]

	message(string) : "Message Text" : : "Message to display onscreen."
	x(float) : "X Position" : -1 : "Horizontal position on the player's screens to draw the text. The value should be between 0 and 1, where 0 is the far left of th" + "e screen and 1 is the far right. -1 centers the text."
	y(float) : "Y Position" : -1 : "Vertical position on the player's screens to draw the text. The value should be between 0 and 1, where 0 is the top of the scree" + "n and 1 is the bottom. -1 centers the text."
	effect(choices) : "Text Effect" : 0 =
		[
		0: "Fade In/Out"
		1: "Credits"
		2: "Scan Out"
		]

	color(color255) : "Text Color" : "100 100 100" : "The main color of the text."
	color2(color255) : "Transition Color" : "240 110 0" : "Secondary color used when revealing text."
	fadein(float) : "Fade in Time/Character Scan Time" : "1.5" : "The time it should take for the text to fully fade in."
	fadeout(float) : "Fade Out Time" : "0.5" : "The time it should take for the text to fade out, after the hold time has expired."
	holdtime(float) : "Hold Time" : "1.2" : "The time the text should stay onscreen, after fading in, before it begins to fade out."
	fxtime(float) : "Scan time (scan effect only)" : "0.25" : "If the 'Text Effect' is set to Scan Out, this is the time it should take to scan out all the letters in the text."
	channel(choices) : "Text Channel" : 1 : "You can have up to six individual game_text messages onscreen at once, stored in channels. Select which channel this text should" + " be placed in, which will overwrite any active message already in that channel." =
		[
		0: "Channel 0 (unused)"
		1: "Channel 1 (medium text size)"
		2: "Channel 2 (small text size)"
		3: "Channel 3 (large text size)"
		4: "Channel 4 (medium text size)"
		5: "Channel 5 (unused)"
		]


	// Inputs
	input Display(void) : "Display the message text."
	]

@PointClass base(BaseEntityPoint) 
	color(200 0 0)
	iconsprite("editor/ficool2/game_ui.vmt")
= game_ui: "An entity used to override player input when the player is looking at it."
	[
	spawnflags(flags)  =
		[
		32: "[32] Freeze Player" : 1
		64: "[64] Hide Weapon" : 1
		128: "[128] +Use Deactivates" : 1
		256: "[256] Jump Deactivates" : 1
		]

	fieldofview(float) : "FieldOfView" : "-1.0" : "The amount of tolerance in the view checking when determining whether the player's input is still under control. 1.0 = straight " + "ahead, 0.0 = +/- 90 degrees, -1.0 = all directions. If the player isn't within the tolerance, the player regains control."

	// Inputs
	input Deactivate(void) : "Return Player Control."
	input Activate(string) : "Take Player Control."

	// Outputs
	output PlayerOn(void) : "Fired whenever this entity starts controlling the player's input."
	output PlayerOff(void) : "Fired whenever this entity stops controlling the player's input."
	output PressedMoveLeft(void) : "Fired whenever the player presses the moveleft key."
	output PressedMoveRight(void) : "Fired whenever the player presses the moveright key."
	output PressedForward(void) : "Fired whenever the player presses the forward key."
	output PressedBack(void) : "Fired whenever the player presses the backward key."
	output PressedAttack(void) : "Fired whenever the player presses the attack key."
	output PressedAttack2(void) : "Fired whenever the player presses the secondary attack key."
	output UnpressedMoveLeft(void) : "Fired whenever the player releases the moveleft key."
	output UnpressedMoveRight(void) : "Fired whenever the player releases the moveright key."
	output UnpressedForward(void) : "Fired whenever the player releases the forward key."
	output UnpressedBack(void) : "Fired whenever the player releases the backward key."
	output UnpressedAttack(void) : "Fired whenever the player releases the attack key."
	output UnpressedAttack2(void) : "Fired whenever the player releases the secondary attack key."
	output XAxis(string) : "An output that fires whenever the X axis of the player's input changes. i.e. -1 when the player has moveleft key down, 1 when th" + "e player has moveright key down, and 0 if neither."
	output YAxis(string) : "An output that fires whenever the Y axis of the player's input changes. i.e. -1 when the player has backward key down, 1 when th" + "e player has forward key down, and 0 if neither."
	output AttackAxis(string) : "An output that fires whenever the state of the player's attack key changes. i.e. 1 when the player has the attack key down, 0 ot" + "herwise."
	output Attack2Axis(string) : "An output that fires whenever the state of the player's secondary attack key changes. i.e. 1 when the player has the secondary a" + "ttack key down, 0 otherwise."
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/ficool2/game_weapon_manager")
= game_weapon_manager: "An entity used to limit the number of a particular weapon type in the world. Useful in places where NPCs are spawning rapidly, d" + "ying, and dropping weapons."
	[
	weaponname(string) : "Weapon Classname" : : "Classname of the weapon type to limit."
	maxpieces(integer) : "Max Allowed in Level" : 0 : "The maximum amount of the specified weapon type allowed in the world."
	ammomod(float) : "Ammo modifier" : 1 : "Modifier for ammount of ammo dropped by a weapon."

	// Inputs
	input SetAmmoModifier(float) : "Adjust the ammo modifier."
	]

@SolidClass base(BaseEntityBrush) = game_zone_player: "An entity used to count the number of players within a zone."
	[

	// Inputs
	input CountPlayersInZone(void) : "Count the number of players in the zone, and fire the corresponding outputs."

	// Outputs
	output OnPlayerInZone(void) : "Fired whenever a count finds a player inside the zone, with the player as the activator."
	output OnPlayerOutZone(void) : "Fired whenever a count finds a player outside the zone, with the player as the activator."
	output PlayersInCount(integer) : "Fired after a count, and contains the number of players found inside the zone."
	output PlayersOutCount(integer) : "Fired after a count, and contains the number of players found outside the zone."
	]

@BaseClass base(BaseEntityPoint) = gibshooterbase
	[
	angles(angle) : "Gib Direction (Pitch Yaw Roll)" : "0 0 0" : "The direction the gibs will fly."
	m_igibs(integer) : "Number of Gibs" : 3 : "Total number of gibs to shoot each time it's activated."
	delay(float) : "Delay between shots" : 0 : "Delay (in seconds) between shooting each gib. If 0, all gibs shoot at once."
	gibangles(angle) : "Gib Angles (Pitch Yaw Roll)" : "0 0 0" : "The orientation of the spawned gibs."
	gibanglevelocity(float) : "Max angular velocity" : 0 : "How fast (degrees/sec) the gib pieces should spin. They will spin on x and y axis at between 10% and 100% of this speed."
	m_flvelocity(integer) : "Gib Velocity" : 200 : "Speed of the fired gibs."
	m_flvariance(float) : "Course Variance" : "0.15" : "How much variance in the direction gibs are fired."
	m_flgiblife(float) : "Gib Life" : 4 : "Time in seconds for gibs to live +/- 5%."
	lightingorigin(target_destination) : "Lighting Origin" : : "Select an info_lighting to specify a location to sample lighting from for all gibs spawned by this shooter, instead of their own" + " origins."
	spawnflags(flags)  =
		[
		1: "[1] Repeatable" : 0
		]


	// Inputs
	input Shoot(void) : "Force the gibshooter to create and shoot a gib."
	]

@PointClass base(BaseEntityPoint) 
	color(200 0 0)
	iconsprite("editor/ficool2/hammer_updateignorelist")
	line(200 0 0, targetname, ignoredname01)
	line(200 0 0, targetname, ignoredname02)
	line(200 0 0, targetname, ignoredname03)
	line(200 0 0, targetname, ignoredname04)
	line(200 0 0, targetname, ignoredname05)
	line(200 0 0, targetname, ignoredname06)
	line(200 0 0, targetname, ignoredname07)
	line(200 0 0, targetname, ignoredname08)
	line(200 0 0, targetname, ignoredname09)
	line(200 0 0, targetname, ignoredname10)
	line(200 0 0, targetname, ignoredname11)
	line(200 0 0, targetname, ignoredname12)
	line(200 0 0, targetname, ignoredname13)
	line(200 0 0, targetname, ignoredname14)
	line(200 0 0, targetname, ignoredname15)
	line(200 0 0, targetname, ignoredname16)
= hammer_updateignorelist: "Specifies entities that are to be ignored by the hammer_update_safe_entities console command. Enter the targetnames of entities " + "that you want to exclude into the list of fields here. Several of these may exist in a map."
	[
	ignoredname01(target_destination) : "Ignored Name 01" : : "Do not send this entity's information back to hammer during hammer_update_safe_entities."
	ignoredname02(target_destination) : "Ignored Name 02" : : "Do not send this entity's information back to hammer during hammer_update_safe_entities."
	ignoredname03(target_destination) : "Ignored Name 03" : : "Do not send this entity's information back to hammer during hammer_update_safe_entities."
	ignoredname04(target_destination) : "Ignored Name 04" : : "Do not send this entity's information back to hammer during hammer_update_safe_entities."
	ignoredname05(target_destination) : "Ignored Name 05" : : "Do not send this entity's information back to hammer during hammer_update_safe_entities."
	ignoredname06(target_destination) : "Ignored Name 06" : : "Do not send this entity's information back to hammer during hammer_update_safe_entities."
	ignoredname07(target_destination) : "Ignored Name 07" : : "Do not send this entity's information back to hammer during hammer_update_safe_entities."
	ignoredname08(target_destination) : "Ignored Name 08" : : "Do not send this entity's information back to hammer during hammer_update_safe_entities."
	ignoredname09(target_destination) : "Ignored Name 09" : : "Do not send this entity's information back to hammer during hammer_update_safe_entities."
	ignoredname10(target_destination) : "Ignored Name 10" : : "Do not send this entity's information back to hammer during hammer_update_safe_entities."
	ignoredname11(target_destination) : "Ignored Name 11" : : "Do not send this entity's information back to hammer during hammer_update_safe_entities."
	ignoredname12(target_destination) : "Ignored Name 12" : : "Do not send this entity's information back to hammer during hammer_update_safe_entities."
	ignoredname13(target_destination) : "Ignored Name 13" : : "Do not send this entity's information back to hammer during hammer_update_safe_entities."
	ignoredname14(target_destination) : "Ignored Name 14" : : "Do not send this entity's information back to hammer during hammer_update_safe_entities."
	ignoredname15(target_destination) : "Ignored Name 15" : : "Do not send this entity's information back to hammer during hammer_update_safe_entities."
	ignoredname16(target_destination) : "Ignored Name 16" : : "Do not send this entity's information back to hammer during hammer_update_safe_entities."
	]

@PointClass base(BaseEntityPoint) = info_ambient_mob: "Universal ambient mob start/end. (Use with care!)"
	[
	]

@PointClass base(BaseEntityPoint) = info_ambient_mob_end: "End location for an ambient mob."
	[
	]

@PointClass base(BaseEntityPoint) = info_ambient_mob_start: "Potential starting location for an ambient mob."
	[
	]

@PointClass base(BaseEntityPoint) 
	studio("models/editor/camera.mdl")
	iconsprite("editor/info_camera_link.vmt")
	line(255 255 0, targetname, target)
	line(255 255 0, targetname, target, targetname, Pointcamera)
= info_camera_link: "An entity that can use point_cameras to render images for materials used by entities. To author the material, use the special id" + "entifier _rt_Camera for the $baseTexture (or whatever texture you want, like envmap, etc.) in the .vmt then connect the 'target'" + " field to the entity which uses that material, and the 'PointCamera' field to the point_camera you want to have appear on that e" + "ntity's material."
	[
	target(target_destination) : "Entity Whose Material Uses _rt_camera"
	pointcamera(target_destination) : "Camera Name" : : "The name of a point_camera entity in the map that the material should be rendered from."

	// Inputs
	input SetCamera(string) : "Set the camera to use. The parameter should be the name of a point_camera entity in the map."
	]

@SolidClass base(BaseEntityBrush) = info_changelevel: "An entity that marks a level change.\nPlace an info_landmark in both maps that marks the 'same' location in each map.\nTIPS & TR" + "ICKS: To fire events in the next level, use the OnLevelChange output to turn on an env_global in the current level.  Create an l" + "ogic_auto in the next level that checks for the state set by the env_global.\n\nTo control which entities go through the level t" + "ransition, create one or more info_transitions and give them the same name as the landmark. Any entities within the info_transit" + "ion(s) will go to the next map."
	[
	map(string) : "New Map Name"
	landmark(target_destination) : "Landmark Name"
	spawnflags(flags)  =
		[
		2: "[2] Disable Touch" : 0
		4: "[4] To Previous Chapter" : 0
		]


	// Outputs
	output OnChangeLevel(void) : "Fired when the level changes."
	]

@PointClass base(BaseEntityPoint) 
	halfgridsnap
	iconsprite("editor/info_constraint_anchor.vmt")
	color(128 128 128)
	line(128 128 128, targetname, parentname)
= info_constraint_anchor: "An entity used to attach constraints to a local position on an entity. Usually constraints will attach to the center of mass of " + "an object. Attach the desired constraint to this entity, and then parent this entity to the entity you want the constraint to ap" + "ply to."
	[
	massscale(float) : "Mass Scale" : 1 : "Amount to scale the mass of this body in the constraint solver."
	]

@PointClass base(BaseEntityPoint) = info_director
	[

	// Inputs
	input PanicEvent(void) : "Fired when a major event happens that the director should know about."
	input ForceSurvivorPositions(void) : "Make each survivor stand at an info_survivor_position."
	input ReleaseSurvivorPositions(void) : "Allow survivors to move freely again."
	input FireConceptToAny(string) : "Fire a speech concept to any survivor that is capable of speaking it."
	input StartIntro(void) : "Fire when the intro starts."
	input FinishIntro(void) : "Fire when the intro ends."
	input EnableTankFrustration(void) : "Can be used to enable the tank frustration meter."
	input DisableTankFrustration(void) : "Can be used to disable the tank frustration meter."
	input ScriptedPanicEvent(string) : "Fired when a custom panic event wants to happen."
	input ForcePanicEvent(void) : "Trigger a panic event, no matter what else is going on."
	input EndCustomScriptedStage(void) : "End a custom scripted stage."
	input IncrementTeamScore(integer) : "Increment a team's score. (2=survivors, 3=infected)"
	input BeginScript(string) : "Begin a director script"
	input EndScript(void) : "End a director script"
	input CreateNewJournal(string) : "Create a new journal"
	input WriteToJournal(string) : "Add a task to the I/O Journal"
	input ExecuteJournal(string) : "Execute all tasks in the specified journal"

	// Outputs
	output OnGameplayStart(void) : "Fired when a map loads, all players join and gameplay begins."
	output OnPanicEventFinished(void) : "Fired when a panic event is finished."
	output OnCustomPanicStageFinished(void) : "Fired when each stage of a custom panic event or custom finale finishes."
	output OnTeamScored(void) : "Fired when a team places a scavenge item in the scavenge goal."
	output OnScavengeRoundStart(void) : "Fired when a scavenge round starts."
	output OnScavengeOvertimeStart(void) : "Timer has run out and game went into overtime."
	output OnScavengeOvertimeCancel(void) : "Time was added to the clock, ending overtime."
	output OnScavengeTimerExpired(void) : "Time has run out, game did not enter overtime."
	output OnScavengeIntensityChanged(integer) : "Intensity level has changed. 1 = highest intensity, decreases as number gets larger."
	output OnUserDefinedScriptEvent1(void) : "Generic user defined event fired from a Squirrel script."
	output OnUserDefinedScriptEvent2(void) : "Generic user defined event fired from a Squirrel script."
	output OnUserDefinedScriptEvent3(void) : "Generic user defined event fired from a Squirrel script."
	output OnUserDefinedScriptEvent4(void) : "Generic user defined event fired from a Squirrel script."
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/info_target.vmt")
= info_elevator_floor: "Elevator floor height target."
	[

	// Outputs
	output OnReachedFloor(void) : "Fired when an elevator reaches this floor."
	]

@PointClass base(BaseEntityPoint, EnableDisable) 
	iconsprite("editor/info_game_event_proxy.vmt")
	sphere(range)
= info_game_event_proxy: "Entity that, when seen, generates a simple game event."
	[
	event_name(string) : "Event Name" : : "The event to trigger by name from modevents.res"
	range(float) : "Range" : 512 : "Distance that the player must be before the event is generated."
	spawnflags(flags)  =
		[
		1: "[1] Automatically detect visibility" : 1
		]


	// Inputs
	input GenerateGameEvent(void) : "Generate my game event. (This entity is sent as the SUBJECT)"
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/info_gamemode.vmt")
= info_gamemode: "Game mode trigger."
	[

	// Outputs
	output OnCoop(void) : "Fired when the map spawns in coop games."
	output OnVersus(void) : "Fired when the map spawns in versus games."
	output OnSurvival(void) : "Fired when the map spawns in survival games."
	output OnScavenge(void) : "Fired when the map spawns in scavenge mode."
	output OnCoopPostIO(void) : "Fired after all entity IO generated by OnCoop has finished."
	output OnVersusPostIO(void) : "Fired after all entity IO generated by OnVersus has finished"
	output OnSurvivalPostIO(void) : "Fired after all entity IO generated by OnSurvival has finished"
	output OnScavengePostIO(void) : "Fired after all entity IO generated by OnScavenge has finished"
	output OnScavengeMatchStart(void) : "Fired on the first map load of a scavenge match. Doesn't fire on round restarts."
	output OnNavAnalyze(void) : "Fired when the map is loaded with -navanalyze on the command line."
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/info_target.vmt")
= info_goal_infected_chase: "An entity that attracts infected like the pipe bomb to give them something to do during outros. Put this in hierarchy with the e" + "scape vehicle or with a func_tracktrain to make all the infected in the map chase it!"
	[

	// Inputs
	input Enable(void) : "Start attracting all infected in the map."
	input Disable(void) : "Stop attracting infected."
	]

@PointClass base(BaseEntityPoint) 
	studioprop()
= info_item_position: "An entity that represents a possible item location in a map. Scripts can search for these entities and use them to spawn objects" + " for different game modes."
	[
	model(studio) : "Helper Model"
	group(integer) : "Group" : 0 : "Group Number"
	rarity(choices) : "Rarity" : 0 : "Item rarity at this location" =
		[
		0: "Common"
		1: "Occasional"
		2: "Scarce"
		]

	replace01(string) : "Replace" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of the spawn group that have $var" + "iable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace02(string) : "Replace" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of the spawn groupe that have $va" + "riable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace03(string) : "Replace" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of the spawn group that have $var" + "iable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace04(string) : "Replace" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of the spawn group that have $var" + "iable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace05(string) : "Replace" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of the spawn group that have $var" + "iable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace06(string) : "Replace" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of the spawn group that have $var" + "iable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace07(string) : "Replace" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of the spawn group that have $var" + "iable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace08(string) : "Replace" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of the spawn group that have $var" + "iable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace09(string) : "Replace" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of the spawn group that have $var" + "iable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace10(string) : "Replace" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of the spawn group that have $var" + "iable somewhere will be replaced with the value contents.  Example: $color 255 0 0"

	// Inputs
	input SetGroup(integer) : "Set the group number."
	input SetRarity(integer) : "Set the rarity."
	]

@PointClass base(BaseEntityPoint) 
	studio("models/survivors/survivor_biker.mdl")
= info_l4d1_survivor_spawn: "Spawn a L4D1 survivor"
	[
	character(choices) : "Character" : 5 : "Which survivor to spawn here" =
		[
		4: "Bill"
		5: "Zoey"
		6: "Francis"
		7: "Louis"
		]


	// Inputs
	input SpawnSurvivor(void) : "Spawn the survivor"
	]

@PointClass base(BaseEntityPoint) 
	size(-16 -16 0, 16 16 4)
	color(255 128 255)
= info_ladder_dismount: "An entity to handle endpoints for multiple ladders that are too close to each other."
	[
	target(target_destination) : "Ladder Name" : : "If multiple ladders are near multiple endpoints, use this to stop them from interfering with each other."
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/info_landmark")
	color(200 0 0)
= info_landmark: "An entity that acts as a landmark for transitions to another level. There should be a corresponding info_landmark entity in the " + "next map. Entities will be transitioned to the next level relative to the info_landmark entities."
	[
	]

@PointClass base(StaticTargetName) 
	iconsprite("editor/info_lighting.vmt")
	halfgridsnap
= info_lighting: "An entity that can be used to change the lighting origin of a prop_static. Set the prop_static's Lighting Origin to point at thi" + "s entity to make the prop_static light as if it was at the info_lighting's origin.  Good for prop_static entities that are embed" + "ded in world geometry (like rocks/windows/etc)."
	[
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/ficool2/info_lighting_relative.vmt")
	halfgridsnap
= info_lighting_relative
	[
	lightinglandmark(target_destination) : "Lighting Landmark" : : "Entity at which the reference origin is contained.  If empty, the info_lighting_relative's origin will be used."
	]

@PointClass base(BaseEntityPoint) = info_map_parameters: "L4D or CS Map parameters. Used to set which teams can buy items, and the C4 bomb detonation radius."
	[
	painpilldensity(float) : "Pain Pill density" : "6.48" : "Pain Pill density per sq 100 yards."
	molotovdensity(float) : "Molotov density" : "6.48" : "Molotov density per sq 100 yards."
	pipebombdensity(float) : "Pipe Bomb density" : "6.48" : "Pipe Bomb density per sq 100 yards."
	pistoldensity(float) : "Pistol density" : "6.48" : "Pistol density per sq 100 yards."
	gascandensity(float) : "Gas Can density" : "6.48" : "Gas Can density per sq 100 yards."
	oxygentankdensity(float) : "Oxygen Tank density" : "6.48" : "Oxygen Tank density per sq 100 yards."
	propanetankdensity(float) : "Propane Tank density" : "6.48" : "Propane Tank density per sq 100 yards."
	itemclusterrange(float) : "Item Cluster Range" : 50 : "Scavenge items of the same kind that are this close to each other are considered a single 'cluster' for population purposes."
	finaleitemclustercount(integer) : "Finale Item Cluster Count" : 3 : "How many clusters of items will be populated in the finale."
	ammodensity(float) : "Ammo pile density" : "6.48" : "Ammo pile density per sq 100 yards"
	meleeweapondensity(float) : "Melee Weapon density" : "6.48" : "Melee Weapon density per sq 100 yards"
	adrenalinedensity(float) : "Adrenaline density" : "6.48" : "Adrenaline density per sq 100 yards"
	defibrillatordensity(float) : "Defibrillator density" : "3.0" : "Defibrillator density per sq 100 yards"
	vomitjardensity(float) : "Boomer Bile density" : "6.48" : "Boomer Bile density per sq 100 yards"
	upgradepackdensity(float) : "Ammo upgrade density" : "1.0" : "Ammo upgrade pack density per sq 100 yards"
	chainsawdensity(float) : "Super Weapon density" : "1.0" : "Chainsaw and Grenade Launcher density per sq 100 yards"
	configurableweapondensity(float) : "Configurable Weapon Spawn density" : "-1.0" : "Density for weapon_spawn entities, -1 to spawn all"
	configurableweaponclusterrange(float) : "Configurable Weapon Cluster Range" : 100 : "weapon_spawn entities that are this close to each other are considered a single 'cluster' for population purposes"
	magnumdensity(float) : "Magnum Pistol Spawn density" : "-1.0" : "Density for weapon_magnum_spawn entities, -1 to spawn all"
	]

@PointClass base(BaseEntityPoint) = info_map_parameters_versus: "L4D-specific map parameters for versus games."
	[
	painpilldensity(float) : "Pain Pill density" : "6.48" : "Pain Pill density per sq 100 yards"
	molotovdensity(float) : "Molotov density" : "6.48" : "Molotov density per sq 100 yards"
	pipebombdensity(float) : "Pipe Bomb density" : "6.48" : "Pipe Bomb density per sq 100 yards"
	pistoldensity(float) : "Pistol density" : "6.48" : "Pistol density per sq 100 yards"
	gascandensity(float) : "Gas Can density" : "6.48" : "Gas Can density per sq 100 yards"
	oxygentankdensity(float) : "Oxygen Tank density" : "6.48" : "Oxygen Tank density per sq 100 yards"
	propanetankdensity(float) : "Propane Tank density" : "6.48" : "Propane Tank density per sq 100 yards"
	itemclusterrangey(float) : "Item Cluster Range" : 50 : "Scavenge items of the same kind that are this close to each other are considered a single 'cluster' for population purposes."
	finaleitemclustercount(integer) : "Finale Item Cluster Count" : 3 : "How many clusters of items will be populated in the finale"
	ammodensity(float) : "Ammo pile density" : "6.48" : "Ammo pile density per sq 100 yards"
	meleeweapondensityy(float) : "Melee Weapon density" : "6.48" : "Melee Weapon density per sq 100 yards"
	adrenalinedensityy(float) : "Adrenaline density" : "6.48" : "Adrenaline density per sq 100 yards"
	defibrillatordensityy(float) : "Defibrillator density" : "2.50" : "Defibrillator density per sq 100 yards"
	vomitjardensityy(float) : "Boomer Bile density" : "6.48" : "Boomer Bile density per sq 100 yards"
	upgradepackdensityy(float) : "Ammo upgrade density" : "1.0" : "Ammo upgrade pack density per sq 100 yards"
	chainsawdensityy(float) : "Super Weapon density" : "1.0" : "Chainsaw and Grenade Launcher density per sq 100 yards"
	configurableweapondensityy(float) : "Configurable Weapon Spawn density" : "-1.0" : "Density for weapon_spawn entities, -1 to spawn all"
	configurableweaponclusterrangey(float) : "Configurable Weapon Cluster Range" : 100 : "weapon_spawn entities that are this close to each other are considered a single 'cluster' for population purposes"
	magnumdensityy(float) : "Magnum Pistol Spawn density" : "-1.0" : "Density for weapon_spawn entities, -1 to spawn all"

	// Inputs
	input UpdateCvars(void) : "Stuff values from this entity into cvars for tweaking"
	]

@PointClass base(Node) 
	studio("models/editor/ground_node.mdl")
	color(232 219 8)
= info_node: "A navigation node for ground moving NPCs. Navigation nodes are baked into the nodegraph so that NPCs can move to them. Ground no" + "des fall to the ground when they spawn."
	[
	spawnflags(flags)  =
		[
		1: "[1] Force human permission" : 0
		2: "[2] Force small_centered permission" : 0
		4: "[4] Force wide_human permission" : 0
		8: "[8] Force tiny permission" : 0
		16: "[16] Force wide_short permission" : 0
		32: "[32] Force medium permission" : 0
		64: "[64] Force tiny_centered permission" : 0
		128: "[128] Force large permission" : 0
		256: "[256] Force large_centered permission" : 0
		512: "[512] Keep editor position" : 0
		]

	]

@PointClass base(Node) 
	studio("models/editor/air_node.mdl")
	color(232 171 8)
= info_node_air: "A navigation node for flying NPCs. Air navigation nodes are baked into the nodegraph so that NPCs can move to them. Air nodes do" + " not fall to the ground when they spawn."
	[
	nodeheight(integer) : "NodeHeight" : 0
	]

@PointClass base(BaseEntityPoint) 
	color(220 180 0)
	line(255 255 255, nodeid, StartNode, nodeid, EndNode)
	iconsprite("editor/info_node_link.vmt")
= info_node_link: "A dynamic connection between two navigation nodes. You specify the node IDs of the start and end nodes, and then you can use ent" + "ity I/O to turn on and off the connection. This could be used to create or destroy a connection in the nodegraph because of some" + " event in your map (a bridge being created/destroyed, etc)."
	[
	startnode(node_dest) : "Start node ID" : : "The node ID of one end of the node connection."
	endnode(node_dest) : "End node ID" : : "The node ID of one end of the node connection."
	initialstate(choices) : "Initial State" : 1 =
		[
		0: "Off"
		1: "On"
		]

	linktype(choices) : "Type of Connection" : 1 =
		[
		1: "Ground"
		2: "Jump"
		4: "Fly"
		8: "Climb"
		16: "Crawl"
		]

	allowuse(target_name_or_class) : "Allow Pass When Off" : : "Entity or class to allow passage even when node is off"
	spawnflags(flags)  =
		[
		1: "[1] Force human connect" : 0
		2: "[2] Force small centered connect" : 0
		4: "[4] Force wide human connect" : 0
		8: "[8] Force tiny connect" : 0
		16: "[16] Force wide_short connect" : 0
		32: "[32] Force medium connect" : 0
		64: "[64] Force tiny centered connect" : 0
		128: "[128] Force large connect" : 0
		256: "[256] Force large centered connect" : 0
		512: "[512] Force medium tall connect" : 0
		]


	// Inputs
	input TurnOn(void) : "Turn the link on."
	input TurnOff(void) : "Turn the link off."
	]

@PointClass base(BaseEntityPoint) 
	wirebox(mins, maxs)
	color(220 180 0)
	iconsprite("editor/info_node_link_controller.vmt")
	line(255 255 255, targetname, allowuse)
= info_node_link_controller: "An entity that controls all connections between nodes that intersect the controller's volume. This allows for mass enabling/disa" + "bling of all node connections through a volume."
	[
	mins(vector) : "Mins" : "-8 -32 -36"
	maxs(vector) : "Maxs" : "8 32 36"
	initialstate(choices) : "Initial State" : 1 =
		[
		0: "Off"
		1: "On"
		]

	useairlinkradius(choices) : "Use Larger Radius (for air links)" : 0 : "Set this to 'Yes' if this controller is intended to control air links. Air links connect using a larger search radius so leaving" + " this at 'No' might miss some air links." =
		[
		0: "No"
		1: "Yes"
		]

	allowuse(target_name_or_class) : "Allow Pass When Off" : : "Entity or class to allow passage even when node is off"
	invertallow(choices) : "Invert exclusion rules" : 0 : "Allowed entity is the only entity NOT allowed when this is set to 'yes'" =
		[
		0: "No"
		1: "Yes"
		]


	// Inputs
	input TurnOn(void) : "Turn the link on."
	input TurnOff(void) : "Turn the link off."
	input SetAllowed(string) : "Change the allowed pass when off"
	input SetInvert(integer) : "Change the invert exclusion rule"
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/ficool2/info_npc_spawn_destination.vmt")
= info_npc_spawn_destination: "NPC Spawn Destination. (Consult npc_template_maker help for more info)"
	[
	reusedelay(float) : "Reuse Delay" : 1 : "After an NPC is spawned at this destination, the delay before this destination is eligible for selection again."
	renamenpc(target_source) : "New NPC Name" : : "If an NPC spawns at this destination, change that NPC's targetname to this."

	// Outputs
	output OnSpawnNPC(void) : "Fired when an NPC spawns at this destination."
	]

@PointClass base(BaseEntityPoint) 
	color(200 0 0)
	iconsprite("editor/ficool2/info_null.vmt")
= info_null: "An entity that's immediately removed on spawning. Useful as a spotlight target."
	[
	]

@PointClass base(BaseEntityPoint) 
	color(80 150 225)
	studio("models/editor/overlay_helper.mdl")
	sphere(fademindist)
	sphere(fademaxdist)
	overlay()
= info_overlay: "An entity that places an overlay on the world."
	[
	material(material) : "Material" : : "Material to use for the overlay."
	sides(sidelist) : "Brush faces" : : "The brush faces this overlay is applied to."
	renderorder(choices) : "Render Order" : 0 : "Higher values render after lower values. This value can be 0-3." =
		[
		0: "First"
		1: "Second"
		2: "Third"
		3: "Fourth"
		]

	startu(float) : "U Start" : "0.0" : "A value between 0-1, defining the starting X axis position in the overlay material."
	endu(float) : "U End" : "1.0" : "A value between 0-1, defining the ending X axis position in the overlay material."
	startv(float) : "V Start" : "0.0" : "A value between 0-1, defining the starting Y axis position in the overlay material."
	endv(float) : "V End" : "1.0" : "A value between 0-1, defining the ending Y axis position in the overlay material."
	basisorigin(vector) readonly : "Overlay Basis Origin(Read-Only)" : : "Center of the overlay on the surface(s) the overlay is applied to."
	basisu(vector) : "Overlay Basis U" : : "The direction the X-axis of the material points."
	basisv(vector) : "Overlay Basis V" : : "The direction the Y-axis of the material points."
	basisnormal(vector) readonly : "Overlay Basis Normal(Read-Only)" : : "Normal of the surface(s) the overlay is applied to."
	uv0(vector) : "Overlay Point 1" : : "Corner 1 of the overlay."
	uv1(vector) : "Overlay Point 2" : : "Corner 2 of the overlay."
	uv2(vector) : "Overlay Point 3" : : "Corner 3 of the overlay."
	uv3(vector) : "Overlay Point 4" : : "Corner 4 of the overlay."
	fademindist(float) : "Start Fade Dist" : -1 : "Distance at which the overlay starts to fade (<0 = use fademaxdist)."
	fademaxdist(float) : "End Fade Dist" : 0 : "Maximum distance at which the overlay is visible (0 = don't fade out)."
	]

@PointClass base(BaseEntityPoint, Reflection) 
	studio("models/editor/cone_helper.mdl")
	line(255 255 255, targetname, cpoint1)
	line(255 255 255, targetname, cpoint2)
	line(255 255 255, targetname, cpoint3)
	line(255 255 255, targetname, cpoint4)
	line(255 255 255, targetname, cpoint5)
	line(255 255 255, targetname, cpoint6)
	line(255 255 255, targetname, cpoint7)
	line(255 255 255, targetname, cpoint8)
	line(255 255 255, targetname, cpoint9)
	line(255 255 255, targetname, cpoint10)
	line(255 255 255, targetname, cpoint11)
	line(255 255 255, targetname, cpoint12)
	line(255 255 255, targetname, cpoint13)
	line(255 255 255, targetname, cpoint14)
	line(255 255 255, targetname, cpoint15)
	line(255 255 255, targetname, cpoint16)
	line(255 255 255, targetname, cpoint17)
	line(255 255 255, targetname, cpoint18)
	line(255 255 255, targetname, cpoint19)
	line(255 255 255, targetname, cpoint20)
	line(255 255 255, targetname, cpoint21)
	line(255 255 255, targetname, cpoint22)
	line(255 255 255, targetname, cpoint23)
	line(255 255 255, targetname, cpoint24)
	line(255 255 255, targetname, cpoint25)
	line(255 255 255, targetname, cpoint26)
	line(255 255 255, targetname, cpoint27)
	line(255 255 255, targetname, cpoint28)
	line(255 255 255, targetname, cpoint29)
	line(255 255 255, targetname, cpoint30)
	line(255 255 255, targetname, cpoint31)
	line(255 255 255, targetname, cpoint32)
	line(255 255 255, targetname, cpoint33)
	line(255 255 255, targetname, cpoint34)
	line(255 255 255, targetname, cpoint35)
	line(255 255 255, targetname, cpoint36)
	line(255 255 255, targetname, cpoint37)
	line(255 255 255, targetname, cpoint38)
	line(255 255 255, targetname, cpoint39)
	line(255 255 255, targetname, cpoint40)
	line(255 255 255, targetname, cpoint41)
	line(255 255 255, targetname, cpoint42)
	line(255 255 255, targetname, cpoint43)
	line(255 255 255, targetname, cpoint44)
	line(255 255 255, targetname, cpoint45)
	line(255 255 255, targetname, cpoint46)
	line(255 255 255, targetname, cpoint47)
	line(255 255 255, targetname, cpoint48)
	line(255 255 255, targetname, cpoint49)
	line(255 255 255, targetname, cpoint50)
	line(255 255 255, targetname, cpoint51)
	line(255 255 255, targetname, cpoint52)
	line(255 255 255, targetname, cpoint53)
	line(255 255 255, targetname, cpoint54)
	line(255 255 255, targetname, cpoint55)
	line(255 255 255, targetname, cpoint56)
	line(255 255 255, targetname, cpoint57)
	line(255 255 255, targetname, cpoint58)
	line(255 255 255, targetname, cpoint59)
	line(255 255 255, targetname, cpoint60)
	line(255 255 255, targetname, cpoint61)
	line(255 255 255, targetname, cpoint62)
	line(255 255 255, targetname, cpoint63)
	color(200 200 0)
= info_particle_system: "An entity that spawns a particle system built using the particle editor."
	[
	effect_name(string) : "Particle System Name"
	start_active(choices) : "Start Active?" : 0 =
		[
		0: "No"
		1: "Yes"
		]

	render_in_front(choices) : "Render In Front" : 0 : "Hack to allow particles to render in front of everything else." =
		[
		0: "No"
		1: "Yes"
		]

	cpoint1(target_destination) : "Control Point 1" : : "If set, control point 1 of the effect will be at this entity's location."
	cpoint2(target_destination) : "Control Point 2" : : "If set, control point 2 of the effect will be at this entity's location. If control point 1 is not set, this will be ignored."
	cpoint3(target_destination) : "Control Point 3" : : "If set, control point 3 of the effect will be at this entity's location. If control point 2 is not set, this will be ignored."
	cpoint4(target_destination) : "Control Point 4" : : "If set, control point 4 of the effect will be at this entity's location. If control point 3 is not set, this will be ignored."
	cpoint5(target_destination) : "Control Point 5" : : "If set, control point 5 of the effect will be at this entity's location. If control point 4 is not set, this will be ignored."
	cpoint6(target_destination) : "Control Point 6" : : "If set, control point 6 of the effect will be at this entity's location. If control point 5 is not set, this will be ignored."
	cpoint7(target_destination) : "Control Point 7" : : "If set, control point 7 of the effect will be at this entity's location. If control point 6 is not set, this will be ignored."
	cpoint8(target_destination) : "Control Point 8" : : "If set, control point 8 of the effect will be at this entity's location. If control point 7 is not set, this will be ignored."
	cpoint9(target_destination) : "Control Point 9" : : "If set, control point 9 of the effect will be at this entity's location. If control point 8 is not set, this will be ignored."
	cpoint10(target_destination) : "Control Point 10" : : "If set, control point 10 of the effect will be at this entity's location. If control point 9 is not set, this will be ignored."
	cpoint11(target_destination) : "Control Point 11" : : "If set, control point 11 of the effect will be at this entity's location. If control point 10 is not set, this will be ignored."
	cpoint12(target_destination) : "Control Point 12" : : "If set, control point 12 of the effect will be at this entity's location. If control point 11 is not set, this will be ignored."
	cpoint13(target_destination) : "Control Point 13" : : "If set, control point 13 of the effect will be at this entity's location. If control point 12 is not set, this will be ignored."
	cpoint14(target_destination) : "Control Point 14" : : "If set, control point 14 of the effect will be at this entity's location. If control point 13 is not set, this will be ignored."
	cpoint15(target_destination) : "Control Point 15" : : "If set, control point 15 of the effect will be at this entity's location. If control point 14 is not set, this will be ignored."
	cpoint16(target_destination) : "Control Point 16" : : "If set, control point 16 of the effect will be at this entity's location. If control point 15 is not set, this will be ignored."
	cpoint17(target_destination) : "Control Point 17" : : "If set, control point 17 of the effect will be at this entity's location. If control point 16 is not set, this will be ignored."
	cpoint18(target_destination) : "Control Point 18" : : "If set, control point 18 of the effect will be at this entity's location. If control point 17 is not set, this will be ignored."
	cpoint19(target_destination) : "Control Point 19" : : "If set, control point 19 of the effect will be at this entity's location. If control point 18 is not set, this will be ignored."
	cpoint20(target_destination) : "Control Point 20" : : "If set, control point 20 of the effect will be at this entity's location. If control point 19 is not set, this will be ignored."
	cpoint21(target_destination) : "Control Point 21" : : "If set, control point 21 of the effect will be at this entity's location. If control point 10 is not set, this will be ignored."
	cpoint22(target_destination) : "Control Point 22" : : "If set, control point 22 of the effect will be at this entity's location. If control point 21 is not set, this will be ignored."
	cpoint23(target_destination) : "Control Point 23" : : "If set, control point 23 of the effect will be at this entity's location. If control point 22 is not set, this will be ignored."
	cpoint24(target_destination) : "Control Point 24" : : "If set, control point 24 of the effect will be at this entity's location. If control point 23 is not set, this will be ignored."
	cpoint25(target_destination) : "Control Point 25" : : "If set, control point 25 of the effect will be at this entity's location. If control point 24 is not set, this will be ignored."
	cpoint26(target_destination) : "Control Point 26" : : "If set, control point 26 of the effect will be at this entity's location. If control point 25 is not set, this will be ignored."
	cpoint27(target_destination) : "Control Point 27" : : "If set, control point 27 of the effect will be at this entity's location. If control point 26 is not set, this will be ignored."
	cpoint28(target_destination) : "Control Point 28" : : "If set, control point 28 of the effect will be at this entity's location. If control point 27 is not set, this will be ignored."
	cpoint29(target_destination) : "Control Point 29" : : "If set, control point 29 of the effect will be at this entity's location. If control point 28 is not set, this will be ignored."
	cpoint30(target_destination) : "Control Point 30" : : "If set, control point 30 of the effect will be at this entity's location. If control point 29 is not set, this will be ignored."
	cpoint31(target_destination) : "Control Point 31" : : "If set, control point 31 of the effect will be at this entity's location. If control point 30 is not set, this will be ignored."
	cpoint32(target_destination) : "Control Point 32" : : "If set, control point 32 of the effect will be at this entity's location. If control point 31 is not set, this will be ignored."
	cpoint33(target_destination) : "Control Point 33" : : "If set, control point 33 of the effect will be at this entity's location. If control point 32 is not set, this will be ignored."
	cpoint34(target_destination) : "Control Point 34" : : "If set, control point 34 of the effect will be at this entity's location. If control point 33 is not set, this will be ignored."
	cpoint35(target_destination) : "Control Point 35" : : "If set, control point 35 of the effect will be at this entity's location. If control point 34 is not set, this will be ignored."
	cpoint36(target_destination) : "Control Point 36" : : "If set, control point 36 of the effect will be at this entity's location. If control point 35 is not set, this will be ignored."
	cpoint37(target_destination) : "Control Point 37" : : "If set, control point 37 of the effect will be at this entity's location. If control point 36 is not set, this will be ignored."
	cpoint38(target_destination) : "Control Point 38" : : "If set, control point 38 of the effect will be at this entity's location. If control point 37 is not set, this will be ignored."
	cpoint39(target_destination) : "Control Point 39" : : "If set, control point 39 of the effect will be at this entity's location. If control point 38 is not set, this will be ignored."
	cpoint40(target_destination) : "Control Point 40" : : "If set, control point 40 of the effect will be at this entity's location. If control point 39 is not set, this will be ignored."
	cpoint41(target_destination) : "Control Point 41" : : "If set, control point 41 of the effect will be at this entity's location. If control point 40 is not set, this will be ignored."
	cpoint42(target_destination) : "Control Point 42" : : "If set, control point 42 of the effect will be at this entity's location. If control point 41 is not set, this will be ignored."
	cpoint43(target_destination) : "Control Point 43" : : "If set, control point 43 of the effect will be at this entity's location. If control point 42 is not set, this will be ignored."
	cpoint44(target_destination) : "Control Point 44" : : "If set, control point 44 of the effect will be at this entity's location. If control point 43 is not set, this will be ignored."
	cpoint45(target_destination) : "Control Point 45" : : "If set, control point 45 of the effect will be at this entity's location. If control point 44 is not set, this will be ignored."
	cpoint46(target_destination) : "Control Point 46" : : "If set, control point 46 of the effect will be at this entity's location. If control point 45 is not set, this will be ignored."
	cpoint47(target_destination) : "Control Point 47" : : "If set, control point 47 of the effect will be at this entity's location. If control point 46 is not set, this will be ignored."
	cpoint48(target_destination) : "Control Point 48" : : "If set, control point 48 of the effect will be at this entity's location. If control point 47 is not set, this will be ignored."
	cpoint49(target_destination) : "Control Point 49" : : "If set, control point 49 of the effect will be at this entity's location. If control point 48 is not set, this will be ignored."
	cpoint50(target_destination) : "Control Point 50" : : "If set, control point 50 of the effect will be at this entity's location. If control point 49 is not set, this will be ignored."
	cpoint51(target_destination) : "Control Point 51" : : "If set, control point 51 of the effect will be at this entity's location. If control point 50 is not set, this will be ignored."
	cpoint52(target_destination) : "Control Point 52" : : "If set, control point 52 of the effect will be at this entity's location. If control point 51 is not set, this will be ignored."
	cpoint53(target_destination) : "Control Point 53" : : "If set, control point 53 of the effect will be at this entity's location. If control point 52 is not set, this will be ignored."
	cpoint54(target_destination) : "Control Point 54" : : "If set, control point 54 of the effect will be at this entity's location. If control point 53 is not set, this will be ignored."
	cpoint55(target_destination) : "Control Point 55" : : "If set, control point 55 of the effect will be at this entity's location. If control point 54 is not set, this will be ignored."
	cpoint56(target_destination) : "Control Point 56" : : "If set, control point 56 of the effect will be at this entity's location. If control point 55 is not set, this will be ignored."
	cpoint57(target_destination) : "Control Point 57" : : "If set, control point 57 of the effect will be at this entity's location. If control point 56 is not set, this will be ignored."
	cpoint58(target_destination) : "Control Point 58" : : "If set, control point 58 of the effect will be at this entity's location. If control point 57 is not set, this will be ignored."
	cpoint59(target_destination) : "Control Point 59" : : "If set, control point 59 of the effect will be at this entity's location. If control point 58 is not set, this will be ignored."
	cpoint60(target_destination) : "Control Point 60" : : "If set, control point 60 of the effect will be at this entity's location. If control point 59 is not set, this will be ignored."
	cpoint61(target_destination) : "Control Point 61" : : "If set, control point 61 of the effect will be at this entity's location. If control point 60 is not set, this will be ignored."
	cpoint62(target_destination) : "Control Point 62" : : "If set, control point 62 of the effect will be at this entity's location. If control point 61 is not set, this will be ignored."
	cpoint63(target_destination) : "Control Point 63" : : "If set, control point 63 of the effect will be at this entity's location. If control point 62 is not set, this will be ignored."
	cpoint1_parent(integer) : "Control Point 1's Parent" : 0 : "If set and nonzero, control point 1 of the effect will use this control point for its parent."
	cpoint2_parent(integer) : "Control Point 2's Parent" : 0 : "If set and nonzero, control point 2 of the effect will use this control point for its parent."
	cpoint3_parent(integer) : "Control Point 3's Parent" : 0 : "If set and nonzero, control point 3 of the effect will use this control point for its parent."
	cpoint4_parent(integer) : "Control Point 4's Parent" : 0 : "If set and nonzero, control point 4 of the effect will use this control point for its parent."
	cpoint5_parent(integer) : "Control Point 5's Parent" : 0 : "If set and nonzero, control point 5 of the effect will use this control point for its parent."
	cpoint6_parent(integer) : "Control Point 6's Parent" : 0 : "If set and nonzero, control point 6 of the effect will use this control point for its parent."
	cpoint7_parent(integer) : "Control Point 7's Parent" : 0 : "If set and nonzero, control point 7 of the effect will use this control point for its parent."

	// Inputs
	input Start(void) : "Tell the particle system to start emitting."
	input Stop(void) : "Tell the particle system to stop emitting."
	]

@PointClass base(BaseEntityPoint) 
	studio("models/editor/cone_helper.mdl")
= info_particle_target: "An entity that is a target for particle system control points."
	[
	]

@PointClass base(BaseEntityPoint) 
	color(0 255 0)
	studio("models/editor/playerstart.mdl")
= info_player_start: "This entity indicates the position and facing direction at which the player will spawn. Any number of info_player_start entities" + " may be placed in a map for when working in cordoned-off portions of the map. When multiple info_player_start entities are prese" + "nt in a map, set the 'Master' spawnflag on one of them to indicate which one should be used when running the entire map."
	[
	spawnflags(flags)  =
		[
		1: "[1] Master (Has priority if multiple info_player_starts exist)" : 0
		]

	]

@PointClass base(BaseEntityPoint) 
	decal()
	studio("models/editor/axis_helper_thick.mdl")
	sphere(distance)
= info_projecteddecal: "An entity that projects a decal onto the world (or props). If the decal has no target name, it will immediately apply itself whe" + "n the level is loaded. If it has a name specified, it won't apply until it receives the 'Activate' input."
	[
	texture(material) : "Texture" : : "The texture used for the decal."
	distance(float) : "Distance" : 64 : "Distance from the origin to project the decal."

	// Inputs
	input Activate(void) : "Force the decal to apply itself to the world."
	]

@PointClass base(BaseEntityPoint) 
	sphere(radius)
	color(220 180 0)
	iconsprite("editor/info_radial_link_controller.vmt")
= info_radial_link_controller: "This entity automatically severs node connections that pass through its radius. If it moves, it will restore those connections."
	[
	radius(float) : "Radius" : 120
	]

@PointClass base(BaseEntityPoint, Origin) = info_remarkable: "An object in the world such that characters seeing it will speak a TLK_REMARK concept"
	[
	contextsubject(string) : "Subject context" : : "Text to put in the SUBJECT context of the TLK_REMARK fired upon sighting this object."
	]

@PointClass base(BaseEntityPoint) 
	studio("models/survivors/survivor_coach.mdl")
	color(255 100 100)
= info_survivor_position: "A point where survivors are placed when escaping the finale"
	[
	order(integer) : "Order" : 1 : "Index of spot based on order people got on board. (1-4)"
	survivorname(string) : "Survivor Name" : : "Force this survivor to use this position (Zoey, Louis, etc.)"
	survivorintrosequence(string) : "Survivor Intro Sequence" : : "Sequence to play when the intro starts."
	gamemode(choices) : "Game Mode" : : "Use this position for a particular game mode only (coop,versus,survival,scavenge)." =
		[
		"coop": "Cooperative"
		"versus": "Versus"
		"survival": "Survival"
		"scavenge": "Scavenge"
		]

	survivorconcept(string) : "Survivor Concept" : : "Response rule concept to play when survivor is moved here."
	hideweapons(choices) : "Hide Weapons" : 0 : "Hide Survivor's weapon while locked to this position." =
		[
		0: "No"
		1: "Yes"
		]


	// Inputs
	input SetViewControl(string) : "If a survivor is assigned to this position, set their view to a point_viewcontrol."
	]

@PointClass base(BaseEntityPoint) 
	color(0 255 0)
	studio("models/survivors/survivor_coach.mdl")
	studio("models/survivors/survivor_biker.mdl")
= info_survivor_rescue: "Survivor rescue point"
	[
	rescueeyepos(vecline) : "Eye position of survivors waiting for rescue"
	model(studio) : "World model" : "models/editor/playerstart.mdl"
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/info_target.vmt")
	studio("models/editor/axis_helper.mdl")
	halfgridsnap
= info_target: "An entity that does nothing. Very useful as a positioning entity for other entities to refer to (i.e. the endpoint of an env_bea" + "m)"
	[
	spawnflags(flags)  =
		[
		1: "[1] Transmit to client (respect PVS)" : 0
		2: "[2] Always transmit to client (ignore PVS)" : 0
		]

	]

@PointClass base(BaseEntityPoint) 
	halfgridsnap
	studio("models/editor/axis_helper.mdl")
	iconsprite("editor/info_target_instructor_hint.vmt")
= info_target_instructor_hint: "A generic target that gets replicated to the client for hud hint targeting."
	[
	]

@PointClass base(BaseEntityPoint) 
	studio("models/editor/playerstart.mdl")
= info_teleport_destination: "An entity that does nothing itself, but can be used to specify the destination for a trigger_teleport entity. An info_target can" + " be used instead."
	[
	]

@PointClass base(BaseEntityPoint, EnableDisable) = info_zombie_border: "No zombies will spawn behind this entity."
	[
	]

@PointClass base(BaseEntityPoint) 
	studio("models/infected/common_male01.mdl")
= info_zombie_spawn: "An entity used to spawn a zombie."
	[
	population(string) : "Population" : "default" : "Zombie population to choose among."
	offer_tank(choices) : "Offer Spawned Tank to PZs" : 0 =
		[
		0: "No"
		1: "Yes"
		]


	// Inputs
	input SpawnZombie(void) : "Spawn a zombie now."
	input StartleZombie(string) : "Startle the zombie (witches only). Optionally pass the name of a survivor to attack."

	// Outputs
	output OnSpawnNormal(void) : "Fired when the spawner creates a normal infected."
	output OnSpawnSmoker(void) : "Fired when the spawner creates a Smoker."
	output OnSpawnBoomer(void) : "Fired when the spawner creates a Boomer."
	output OnSpawnHunter(void) : "Fired when the spawner creates a Hunter."
	output OnSpawnWitch(void) : "Fired when the spawner creates a Witch."
	output OnSpawnTank(void) : "Fired when the spawner creates a Tank."
	output OnSpawnSpitter(void) : "Fired when the spawner creates a Spitter."
	output OnSpawnJockey(void) : "Fired when the spawner creates a Jockey."
	output OnSpawnCharger(void) : "Fired when the spawner creates a Charger."
	]

@PointClass base(BaseEntityPoint) 
	decal()
	studio("models/editor/axis_helper_thick.mdl")
= infodecal: "An entity that places a decal on the world. If the decal has no target name, it will immediately apply itself when the level is " + "loaded.If it has a name specified, it won't apply until it receives the 'Activate' input."
	[
	texture(material) : "Texture" : : "The texture used for the decal."
	lowpriority(choices) : "Low Priority" : 1 : "Allow the decal to be overwritten by other decals when needed. This also makes the decal not persist across savegames." =
		[
		0: "No"
		1: "Yes"
		]


	// Inputs
	input Activate(void) : "Force the decal to apply itself to the world."
	]

@KeyframeClass base(BaseEntityPoint, KeyFrame) 
	line(255 255 255, targetname, nextkey)
	size(-6 -6 -6, 6 6 6)
	color(255 200 0)
	keyframe()
= keyframe_track: "Animation KeyFrame"
	[
	]

@PointClass base(BaseEntityPoint, BaseLight) 
	sphere(_fifty_percent_distance)
	sphere(_zero_percent_distance)
	sphere(_distance)
	color(255 255 0)
	light()
	iconsprite("editor/light.vmt")
	line(255 255 255, targetname, target)
= light: "An invisible omnidirectional lightsource."
	[
	spawnflags(flags)  =
		[
		1: "[1] Initially dark" : 0
		]

	]

@PointClass base(Angles) 
	color(255 255 0)
	iconsprite("editor/ficool2/light_directional.vmt")
= light_directional: "A directional light with no falloff. Similar to sunlight in light_environment."
	[
	pitch(integer) : "Pitch" : 0 : "The downward pitch of the light from the sun. 0 is horizontal, -90 is straight down."
	_light(color255) : "Brightness" : "255 255 255 200"
	_lighthdr(color255) : "BrightnessHDR" : "-1 -1 -1 1"
	_lightscalehdr(float) : "BrightnessScaleHDR" : "0.7" : "Amount to scale the light by when compiling for HDR."
	sunspreadangle(float) : "SpreadAngle" : 0 : "The angular extent of the light for casting soft shadows. Higher numbers are more diffuse. 5 is a good starting value."
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/ficool2/light_dynamic.vmt")
	sphere(distance)
	lightcone()
	line(255 255 255, targetname, target)
= light_dynamic: "An invisible lightsource that changes in some way over time."
	[
	target(target_destination) : "Entity to point at" : : "The name of an entity in the map that the dynamic light will point at."
	_light(color255) : "Light color" : "255 255 255 200"
	brightness(integer) : "Light brightness" : 0
	_inner_cone(integer) : "Inner (bright) angle" : 30
	_cone(integer) : "Outer (fading) angle" : 45
	pitch(integer) : "Pitch" : -90
	distance(float) : "Maximum distance" : 120 : "This is the distance that light is allowed to cast, in inches."
	spotlight_radius(float) : "Spotlight end radius" : 80 : "This is the radius of the light, in inches, at the object that it is hitting."
	style(choices) : "Appearance" : 0 =
		[
		0: "Normal"
		10: "Fluorescent flicker"
		2: "Slow, strong pulse"
		11: "Slow pulse, noblack"
		5: "Gentle pulse"
		1: "Flicker A"
		6: "Flicker B"
		3: "Candle A"
		7: "Candle B"
		8: "Candle C"
		4: "Fast strobe"
		9: "Slow strobe"
		]

	spawnflags(flags)  =
		[
		1: "[1] Do not light world (better perf)" : 0
		2: "[2] Do not light models" : 0
		4: "[4] Add Displacement Alpha" : 0
		8: "[8] Subtract Displacement Alpha" : 0
		]


	// Inputs
	input Color(color255) : "Set the light's render color (R G B)."
	input brightness(integer) : "Set the light brightness."
	input distance(float) : "Set the maximum light distance."
	input _inner_cone(integer) : "Set the inner (bright) angle."
	input _cone(integer) : "Set the outer (fading) angle."
	input spotlight_radius(float) : "Set the radius of the spotlight at the end point."
	input style(integer) : "Change the lightstyle (see Appearance field for possible values)."
	input TurnOn(void) : "Turn the light off."
	input TurnOff(void) : "Turn the light on."
	input Toggle(void) : "Toggle the light on/off."
	]

@PointClass base(BaseLight, Angles) 
	sphere(_fifty_percent_distance)
	sphere(_zero_percent_distance)
	sphere(_distance)
	color(255 255 0)
	iconsprite("editor/ficool2/light_environment.vmt")
	lightprop("models/editor/spot.mdl")
= light_environment: "Sets the color and angle of the light from the sun and sky."
	[
	pitch(angle_negative_pitch) : "Pitch" : 0 : "The downward pitch of the light from the sun. 0 is horizontal, -90 is straight down."
	_light(color255) : "Brightness" : "255 255 255 200"
	_ambient(color255) : "Ambient light" : "255 255 255 20"
	_lighthdr(color255) : "BrightnessHDR" : "-1 -1 -1 1"
	_lightscalehdr(float) : "BrightnessScaleHDR" : 1 : "Amount to scale the light by when compiling for HDR."
	_ambienthdr(color255) : "AmbientHDR" : "-1 -1 -1 1"
	_ambientscalehdr(float) : "AmbientScaleHDR" : 1 : "Amount to scale the ambient light by when compiling for hdr."
	sunspreadangle(float) : "SunSpreadAngle" : 5 : "The angular extent of the sun for casting soft shadows. Higher numbers are more diffuse. 5 is a good starting value."
	]

@PointClass base(BaseEntityPoint, BaseLight) 
	sphere(_fifty_percent_distance)
	sphere(_zero_percent_distance)
	sphere(_distance)
	color(255 255 0)
	lightprop("models/editor/spot.mdl")
	lightcone()
	line(255 255 255, targetname, target)
= light_spot: "An invisible and directional spotlight."
	[
	target(target_destination) : "Entity to point at" : : "The name of an entity in the map that the spotlight will point at. This will override the spotlight's angles."
	_inner_cone(integer) : "Inner (bright) angle" : 30
	_cone(integer) : "Outer (fading) angle" : 45
	_exponent(integer) : "Focus" : 1
	pitch(angle_negative_pitch) : "Pitch" : -90
	spawnflags(flags)  =
		[
		1: "[1] Initially dark" : 0
		]

	]

@PointClass base(BaseEntityPoint) 
	color(200 0 0)
	iconsprite("editor/logic_active_autosave.vmt")
= logic_active_autosave: "An entity that is used to look for opportunities to autosave."
	[
	minimumhitpoints(integer) : "Initiation Hit Points" : 30 : "Start looking for an opportunity to save if player drops below this hitpoint level."
	triggerhitpoints(integer) : "Trigger Hit Points" : 75 : "If started looking for an opportunity, save when hitpoints reach this level."
	timetotrigget(float) : "Time to trigger" : 0 : "If > 0, how long to try and get a save off before giving up."
	dangeroustime(float) : "Dangerous time" : 10 : "If 0, just autosave. Otherwise, do an autosavedangerous with this time threshold."

	// Inputs
	input Enable(void) : "Enable the entity"
	input Disable(void) : "Enable the entity"
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/logic_auto.vmt")
	color(0 100 250)
= logic_auto: "Fires outputs when a map spawns. If 'Remove on fire' flag is set the logic_auto is deleted after firing. It can be set to check " + "a global state before firing. This allows you to only fire events based on what took place in a previous map."
	[
	spawnflags(flags)  =
		[
		1: "[1] Remove on fire" : 1
		]

	globalstate(choices) : "Global State to Read" : : "If set, this specifies a global state to check before firing. The OnMapSpawn output will only fire if the global state is set." =
		[
		"": "--- None ---"
		"is_console": "Game is running on a console"
		"is_pc": "Game is running on a PC"
		]


	// Outputs
	output OnMapSpawn(void) : "Fired when the map is loaded for any reason."
	output OnNewGame(void) : "Fired when the map is loaded to start a new game."
	output OnLoadGame(void) : "Fired when the map is loaded from a saved game."
	output OnMapTransition(void) : "Fired when the map is loaded due to a level transition."
	output OnBackgroundMap(void) : "Fired when the map is loaded as a background to the main menu."
	output OnMultiNewMap(void) : "Fired only in multiplayer, when a new map is loaded."
	output OnMultiNewRound(void) : "Fired only in multiplayer, when a new round is started. Only fired in multiplayer games that use round-based gameplay."
	output OnDemoMapSpawn(void) : "Fired when the map is loaded in Demo Mode."
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/logic_autosave.vmt")
	color(200 0 0)
= logic_autosave: "An entity that is used to force an autosave."
	[
	newlevelunit(choices) : "Force New Level Unit" : 0 : "If set, the save will discard any savedata from previous levels, for the purpose of keeping savegame filesizes down. Can only be" + " safely used if there is no way for the player to return to previous levels." =
		[
		0: "No"
		1: "Yes"
		]

	minimumhitpoints(integer) : "Minimum Hit Points" : 0 : "Don't save dangerous when player has less than this many hitpoints."
	minhitpointstocommit(integer) : "Minimum Hit Points to Commit" : 0 : "Minimum hitpoints required to commit to save. The save will be made if you have at least Minimum Hit Points, but when the autosa" + "ve timer expires, the autosave is only kept if you have at least Min Hitpoints to Commit."

	// Inputs
	input Save(void) : "Force an autosave."
	input SaveDangerous(float) : "Force an autosave as autosavedangerous.sav. If the player is alive after the passed number of seconds it replaces the standard a" + "uto save."
	input SetMinHitpointsThreshold(integer) : "Set MinimumHitPoints to this."
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/logic_branch.vmt")
	color(0 100 250)
= logic_branch: "Tests a boolean value and fires an output based on whether the value is true or false. Use this entity to branch between two pot" + "ential sets of events."
	[
	initialvalue(choices) : "Initial value" : 0 : "Initial value for the boolean value (0 or 1)." =
		[
		0: "0 (False)"
		1: "1 (True)"
		]


	// Inputs
	input SetValue(bool) : "Set the boolean value without performing the comparison. Use this to hold a value for a future test."
	input SetValueTest(bool) : "Set the boolean value and test it, firing OnTrue or OnFalse based on the new value."
	input Toggle(void) : "Toggle the boolean value between true and false."
	input ToggleTest(void) : "Toggle the boolean value and tests it, firing OnTrue or OnFalse based on the new value."
	input Test(void) : "Test the input value and fire OnTrue or OnFalse based on the value."

	// Outputs
	output OnTrue(bool) : "Fired when the input value is true (nonzero)."
	output OnFalse(bool) : "Fired when the input value is false (zero)."
	]

@PointClass base(BaseEntityPoint) 
	color(0 100 250)
	iconsprite("editor/logic_branch_listener.vmt")
	line(255 255 0, targetname, branch01)
	line(255 255 0, targetname, branch02)
	line(255 255 0, targetname, branch03)
	line(255 255 0, targetname, branch04)
	line(255 255 0, targetname, branch05)
	line(255 255 0, targetname, branch06)
	line(255 255 0, targetname, branch07)
	line(255 255 0, targetname, branch08)
	line(255 255 0, targetname, branch09)
	line(255 255 0, targetname, branch10)
	line(255 255 0, targetname, branch11)
	line(255 255 0, targetname, branch12)
	line(255 255 0, targetname, branch13)
	line(255 255 0, targetname, branch14)
	line(255 255 0, targetname, branch15)
	line(255 255 0, targetname, branch16)
= logic_branch_listener: "Contains a list of logic_branch entities and fires outputs when the state of any of the logic_branches changes.\n\nThis entity i" + "s used to fire an event when a set of conditions are all satisfied."
	[
	branch01(target_destination) : "Logic Branch 01" : : "The name of one or more logic_branches (wildcards allowed)."
	branch02(target_destination) : "Logic Branch 02" : : "The name of one or more logic_branches (wildcards allowed)."
	branch03(target_destination) : "Logic Branch 03" : : "The name of one or more logic_branches (wildcards allowed)."
	branch04(target_destination) : "Logic Branch 04" : : "The name of one or more logic_branches (wildcards allowed)."
	branch05(target_destination) : "Logic Branch 05" : : "The name of one or more logic_branches (wildcards allowed)."
	branch06(target_destination) : "Logic Branch 06" : : "The name of one or more logic_branches (wildcards allowed)."
	branch07(target_destination) : "Logic Branch 07" : : "The name of one or more logic_branches (wildcards allowed)."
	branch08(target_destination) : "Logic Branch 08" : : "The name of one or more logic_branches (wildcards allowed)."
	branch09(target_destination) : "Logic Branch 09" : : "The name of one or more logic_branches (wildcards allowed)."
	branch10(target_destination) : "Logic Branch 10" : : "The name of one or more logic_branches (wildcards allowed)."
	branch11(target_destination) : "Logic Branch 11" : : "The name of one or more logic_branches (wildcards allowed)."
	branch12(target_destination) : "Logic Branch 12" : : "The name of one or more logic_branches (wildcards allowed)."
	branch13(target_destination) : "Logic Branch 13" : : "The name of one or more logic_branches (wildcards allowed)."
	branch14(target_destination) : "Logic Branch 14" : : "The name of one or more logic_branches (wildcards allowed)."
	branch15(target_destination) : "Logic Branch 15" : : "The name of one or more logic_branches (wildcards allowed)."
	branch16(target_destination) : "Logic Branch 16" : : "The name of one or more logic_branches (wildcards allowed)."

	// Inputs
	input Test(void) : "Tests the state of all the logic_branches in the list and fires the appropriate output."
	input UniqueStateOn(void) : "Set the state of a logic_branch unique to this input entity to 1. This will generate a branch added to the listener."
	input UniqueStateOff(void) : "Set the state of a logic_branch unique to this input entity to 0. This will generate a branch added to the listener."
	input UniqueStateSet(bool) : "Set the state of a logic_branch unique to this input entity to the provided value. This will generate a branch added to the list" + "ener."
	input UniqueStateToggle(void) : "Toggle the state of a logic_branch unique to this input entity. This will generate a branch added to the listener."

	// Outputs
	output OnAllTrue(void) : "Fired when all the logic_branches in the list become true."
	output OnAllFalse(void) : "Fired when all the logic_branches in the list become false."
	output OnMixed(void) : "Fired when one of the logic branches in the list changes, but some are true and some are false."
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/logic_case.vmt")
	color(0 100 250)
= logic_case: "Compares an input to up to 16 preset values. If the input value is the same as any of the preset values, an output corresponding" + " to that value is fired.\n\nFor example: if Case01 is set to 2 and Case02 is set to 5, and the input value is 5, the OnCase02 ou" + "tput will be fired.\n\nThis entity can also be used to select from a number of random targets via the PickRandom input. One of t" + "he OnCase outputs that is connected to another entity will be picked at random and fired."
	[
	case01(string) : "Case 01" : : "If the input value matches this, fire the corresponding output."
	case02(string) : "Case 02" : : "If the input value matches this, fire the corresponding output."
	case03(string) : "Case 03" : : "If the input value matches this, fire the corresponding output."
	case04(string) : "Case 04" : : "If the input value matches this, fire the corresponding output."
	case05(string) : "Case 05" : : "If the input value matches this, fire the corresponding output."
	case06(string) : "Case 06" : : "If the input value matches this, fire the corresponding output."
	case07(string) : "Case 07" : : "If the input value matches this, fire the corresponding output."
	case08(string) : "Case 08" : : "If the input value matches this, fire the corresponding output."
	case09(string) : "Case 09" : : "If the input value matches this, fire the corresponding output."
	case10(string) : "Case 10" : : "If the input value matches this, fire the corresponding output."
	case11(string) : "Case 11" : : "If the input value matches this, fire the corresponding output."
	case12(string) : "Case 12" : : "If the input value matches this, fire the corresponding output."
	case13(string) : "Case 13" : : "If the input value matches this, fire the corresponding output."
	case14(string) : "Case 14" : : "If the input value matches this, fire the corresponding output."
	case15(string) : "Case 15" : : "If the input value matches this, fire the corresponding output."
	case16(string) : "Case 16" : : "If the input value matches this, fire the corresponding output."

	// Inputs
	input InValue(string) : "Compares the Input value to the case values, and fires the appropriate output, if any."
	input PickRandom(void) : "Fires a random OnCase output with at least one connection."
	input PickRandomShuffle(void) : "Fires a random OnCase output with at least one connection, with no repeats until all cases have been picked, at which point the " + "shuffle starts over."

	// Outputs
	output OnCase01(void) : "Fired when the input value equals the Case01 value."
	output OnCase02(void) : "Fired when the input value equals the Case02 value."
	output OnCase03(void) : "Fired when the input value equals the Case03 value."
	output OnCase04(void) : "Fired when the input value equals the Case04 value."
	output OnCase05(void) : "Fired when the input value equals the Case05 value."
	output OnCase06(void) : "Fired when the input value equals the Case06 value."
	output OnCase07(void) : "Fired when the input value equals the Case07 value."
	output OnCase08(void) : "Fired when the input value equals the Case08 value."
	output OnCase09(void) : "Fired when the input value equals the Case09 value."
	output OnCase10(void) : "Fired when the input value equals the Case10 value."
	output OnCase11(void) : "Fired when the input value equals the Case11 value."
	output OnCase12(void) : "Fired when the input value equals the Case12 value."
	output OnCase13(void) : "Fired when the input value equals the Case13 value."
	output OnCase14(void) : "Fired when the input value equals the Case14 value."
	output OnCase15(void) : "Fired when the input value equals the Case15 value."
	output OnCase16(void) : "Fired when the input value equals the Case16 value."
	output OnDefault(void) : "Fired when the input value does not equal any of the Case values."
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/choreo_scene.vmt")
	color(240 180 250)
	line(240 180 250, targetname, target1)
	line(240 180 250, targetname, target2)
	line(240 180 250, targetname, target3)
	line(240 180 250, targetname, target4)
	line(240 180 250, targetname, target5)
	line(240 180 250, targetname, target6)
	line(240 180 250, targetname, target7)
	line(240 180 250, targetname, target8)
= logic_choreographed_scene: "Manages a choreographed scene of one or more actors."
	[
	scenefile(scene) : "Scene file" : : "The scene that will play when this entity is triggered."
	target1(target_destination) : "Target 1"
	target2(target_destination) : "Target 2"
	target3(target_destination) : "Target 3"
	target4(target_destination) : "Target 4"
	target5(target_destination) : "Target 5"
	target6(target_destination) : "Target 6"
	target7(target_destination) : "Target 7"
	target8(target_destination) : "Target 8"
	busyactor(choices) : "If an Actor is talking..." : 1 : "What to do if an actor this scene needs is already talking when this scene is told to start." =
		[
		0: "Start immediately"
		1: "Wait for actor to finish"
		2: "Interrupt at next interrupt event"
		3: "Cancel at next interrupt event"
		]

	onplayerdeath(choices) : "On Player Death" : 0 : "What should this entity do if the player dies" =
		[
		0: "Do Nothing"
		1: "Cancel Script and return to AI"
		]


	// Inputs
	input Start(void) : "Starts playback of the scene file"
	input Pause(void) : "Pauses playback of the scene file"
	input Resume(void) : "Resumes playback of the scene if it has been paused"
	input Cancel(void) : "Cancels playback of the scene"
	input CancelAtNextInterrupt(void) : "Cancels playback of the scene at the next interrupt event in the scene."
	input PitchShift(float) : "Multiplies the the pitch"
	input InterjectResponse(string) : "Finds an actor who can respond to the specified concept string while the scene continues playing"
	input StopWaitingForActor(void) : "Stop waiting on an actor to stop talking."
	input Trigger(integer) : "Fires the OnTrigger output of the specified number."

	// Outputs
	output OnStart(void) : "The scene has started"
	output OnCompletion(void) : "The scene has completed"
	output OnCanceled(void) : "The scene has been canceled"
	output OnTrigger1(void) : "Scene trigger 1"
	output OnTrigger2(void) : "Scene trigger 2"
	output OnTrigger3(void) : "Scene trigger 3"
	output OnTrigger4(void) : "Scene trigger 4"
	output OnTrigger5(void) : "Scene trigger 5"
	output OnTrigger6(void) : "Scene trigger 6"
	output OnTrigger7(void) : "Scene trigger 7"
	output OnTrigger8(void) : "Scene trigger 8"
	output OnTrigger9(void) : "Scene trigger 9"
	output OnTrigger10(void) : "Scene trigger 10"
	output OnTrigger11(void) : "Scene trigger 11"
	output OnTrigger12(void) : "Scene trigger 12"
	output OnTrigger13(void) : "Scene trigger 13"
	output OnTrigger14(void) : "Scene trigger 14"
	output OnTrigger15(void) : "Scene trigger 15"
	output OnTrigger16(void) : "Scene trigger 16"
	]

@PointClass base(BaseEntityPoint) 
	color(128 128 128)
	iconsprite("editor/ficool2/logic_collision_pair.vmt")
	line(128 128 128, attach1, attach2)
= logic_collision_pair: "An entity that can be used to enables/disable vphysics collisions between two target entities."
	[
	attach1(target_destination) : "Attachment 1" : : "The first entity."
	attach2(target_destination) : "Attachment 2" : : "The second entity."
	startdisabled(choices) : "Start with collisions disabled" : 1 =
		[
		0: "No"
		1: "Yes"
		]


	// Inputs
	input EnableCollisions(void) : "Enable collisions between the first and second entity."
	input DisableCollisions(void) : "Disable collisions between the first and second entity."
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/logic_compare.vmt")
	color(0 100 250)
= logic_compare: "Compares an input value to another value. If the input value is less than the compare value, the OnLessThan output is fired with" + " the input value. If the input value is equal to the compare value, the OnEqualTo output is fired with the input value. If the i" + "nput value is greater than the compare value, the OnGreaterThan output is fired with the input value."
	[
	initialvalue(integer) : "Initial value" : : "Initial value for the input value."
	comparevalue(integer) : "Compare value" : : "The value to compare against."

	// Inputs
	input SetValue(float) : "Set the value that will be compared against the compare value."
	input SetValueCompare(float) : "Set the value that will be compared against the compare value and performs the comparison."
	input SetCompareValue(float) : "Set the compare value."
	input Compare(void) : "Force a compare of the input value with the compare value."

	// Outputs
	output OnLessThan(float) : "Fired when the input value is less than the compare value. Sends the input value as data."
	output OnEqualTo(float) : "Fired when the input value is equal to the compare value. Sends the input value as data."
	output OnNotEqualTo(float) : "Fired when the input value is different from the compare value. Sends the input value as data."
	output OnGreaterThan(float) : "Fired when the input value is greater than the compare value. Sends the input value as data."
	]

@PointClass base(BaseEntityPoint) = logic_director_query: "Allows firing of output based on the Director's state."
	[
	minangerrange(integer) : "Min Anger Range" : 1 : "Min remapping range of anger"
	maxangerrange(integer) : "Max Anger Range" : 10 : "Max remapping range of anger"
	noise(choices) : "Noise" : 0 : "How noisy do you want the anger result?" =
		[
		0: "'Pure' anger value. No noise."
		25: "Some noise"
		50: "Average mix of random and absolute"
		75: "Much noise"
		100: "Complete noise"
		]


	// Inputs
	input HowAngry(void) : "Ask the director to tell this query how angry it is"

	// Outputs
	output OutAnger(integer) : "A HowAngry input will cause this output to fire with the anger value remapped."
	output On20SecondsToMob(void) : "Fires 20 seconds before a mob is spawned."
	output On60SecondsToMob(void) : "Fires 60 seconds before a mob is spawned."
	]

@PointClass base(BaseEntityPoint) = logic_game_event: "Allows firing game events. No parameters are settabld, for now."
	[
	eventname(string) : "Game Event Name" : : "event name ( from ModEvents.res ) to fire. no params for now"
	spawnflags(flags)  =
		[
		1: "[1] userid field with activator" : 0
		]


	// Inputs
	input FireEvent(void) : "Fire the event"
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/ficool2/logic_lineto")
	color(0 100 250)
	line(255 255 0, targetname, source, targetname, target)
= logic_lineto: "An entity that calculates and outputs a vector from one entity to another."
	[
	source(target_destination) : "Start entity" : : "Name of the entity the line should start from."
	target(target_destination) : "End entity" : : "Name of the entity that line should end at."

	// Outputs
	output Line(vector) : "Fired when the vector, from the start entity to the end entity, changes. Passes along the vector as a parameter."
	]

@PointClass base(BaseEntityPoint) 
	color(0 100 250)
	iconsprite("editor/logic_measure_movement.vmt")
	line(255 255 0, targetname, measureReference)
	line(255 0 255, targetname, measureTarget, targetname, measureReference)
	line(255 255 0, targetname, targetReference)
	line(255 0 255, targetname, target, targetname, TargetReference)
= logic_measure_movement: "An entity that can measure the movement of an entity relative to another entity and apply that movement to a third entity."
	[
	measuretarget(target_destination) : "Entity to Measure" : : "Entity whose movement you want to measure."
	measurereference(target_destination) : "Measure Reference" : : "The movement of Entity to Measure will be measured relative to this entity."
	target(target_destination) : "Entity to Move" : : "This entity will be moved to mimic the motions of Entity to Measure."
	targetreference(target_destination) : "Movement Reference" : : "The Entity to Move will move relative to this entity."
	targetscale(float) : "Movement scale" : 1 : "A scale to divide the measured movements by, before applying those movements to the Entity to Move. 1 = target entity moves as m" + "uch as the measured entity, 2 = target entity moves half as far as the measured entity, and 0.5 = target entity moves twice as f" + "ar as the measured entity."
	measuretype(choices) : "Measurement Type" : 0 =
		[
		0: "Position"
		1: "Eye position"
		]


	// Inputs
	input SetMeasureTarget(string) : "Set the Entity to Measure, whose movement should be measured."
	input SetMeasureReference(string) : "Set the Measure Reference entity."
	input Target(string) : "Set the Entity to Move, which will be moved to mimic the measured entity."
	input SetTargetReference(string) : "Set the Movement Reference entity."
	input SetTargetScale(float) : "Set the scale to divide the measured movements by."
	input Enable(void) : "Enable the logic_measure_movement."
	input Disable(void) : "Disable the logic_measure_movement."
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/logic_multicompare.vmt")
= logic_multicompare: "Compares a set of inputs to each other. If they are all the same, fires an OnEqual output. If any are different, fires the OnNot" + "Equal output. It is not possible to clear the memory, so this only works once."
	[
	integervalue(integer) : "Integer Value (optional)" : : "The value all inputs are compared to if ''Should use Reference Value'' is enabled."
	shouldcomparetovalue(choices) : "Should use Integer Value" : 0 : "If enabled, all inputs are compared to the reference value. If not enabled, they are instead compared to the last input added." =
		[
		0: "No"
		1: "Yes"
		]


	// Inputs
	input InputValue(integer) : "Adds a value to our set of inputs and fires CompareValues automatically, comparing existing inputs to this one if set to do so."
	input CompareValues(void) : "Compares the values and fires appropriate outputs."

	// Outputs
	output OnEqual(void) : "Fires if all of the values are equal."
	output OnNotEqual(void) : "Fires if any of the values are not equal."
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/ficool2/logic_navigation")
	line(128 128 128, targetname, target)
= logic_navigation: "An entity that is used to set navigation properties on other entities. Useful to make NPCs ignore physics props in their way tha" + "t they can easily push."
	[
	target(target_destination) : "Navigation Entity" : : "Name of the entity to set navigation properties on."
	spawnflags(flags)  =
		[
		1: "[1] Start On" : 1
		]

	navprop(string) : "Nav Property" : "Ignore" : "The only valid property is to ignore this entity, so NPCs will bump into it."

	// Inputs
	input TurnOn(void) : "Turn on. The Navigation Entity will have its navigation properties set."
	input TurnOff(void) : "Turn off. The Navigation Entity will have its navigation properties returned to the default settings."
	input Toggle(void) : "Toggle on/off."
	]

@PointClass base(BaseEntityPoint, EnableDisable) 
	iconsprite("editor/logic_relay.vmt")
	color(0 100 250)
= logic_relay: "A message forwarder. Fires an OnTrigger output when triggered, and can be disabled to prevent forwarding outputs.\n\nUseful as a" + "n intermediary between one entity and another for turning on or off an I/O connection, or as a container for holding a set of ou" + "tputs that can be triggered from multiple places."
	[
	spawnflags(flags)  =
		[
		1: "[1] Only trigger once" : 0
		2: "[2] Allow fast retrigger" : 0
		]


	// Inputs
	input Trigger(void) : "Trigger the relay, causing its OnTrigger output to fire if it is enabled."
	input Toggle(void) : "Toggle the relay between enabled and disabled."
	input CancelPending(void) : "Cancel any events fired by this relay that are currently pending in the I/O event queue."
	input EnableRefire(void) : "Allow this relay to trigger again quickly, if fast retrigger is disabled. This input allows the relay to fire again early if it " + "is in this state.This is automatically triggered 0.01s after the last OnTrigger output."

	// Outputs
	output OnSpawn(void) : "Fired when the relay is spawned. If the relay is set to only trigger once, it will delete itself after firing this output."
	output OnTrigger(void) : "Fired when the relay is triggered. If the relay is set to only trigger once, it will delete itself after firing this output."
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/ficool2/logic_scene_list_manager.vmt")
	color(240 180 250)
	line(240 180 250, targetname, scene0)
	line(240 180 250, targetname, scene1)
	line(240 180 250, targetname, scene2)
	line(240 180 250, targetname, scene3)
	line(240 180 250, targetname, scene4)
	line(240 180 250, targetname, scene5)
	line(240 180 250, targetname, scene6)
	line(240 180 250, targetname, scene7)
	line(240 180 250, targetname, scene8)
	line(240 180 250, targetname, scene9)
	line(240 180 250, targetname, scene10)
	line(240 180 250, targetname, scene11)
	line(240 180 250, targetname, scene12)
	line(240 180 250, targetname, scene13)
	line(240 180 250, targetname, scene14)
	line(240 180 250, targetname, scene15)
= logic_scene_list_manager: "Manages a list of logic_choreographed_scene entities. Store choreo scenes in them in order that they will be played by other inp" + "uts. Whenever a scene plays, the manager will remove all scenes before that one in the list. The name of another logic_scene_lis" + "t_manager can be entered in a slot instead of an invididual scene, which will cause all scenes in that manager to be removed whe" + "n a later scene in this list is played."
	[
	scene0(target_destination) : "Scene 1" : : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene1(target_destination) : "Scene 2" : : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene2(target_destination) : "Scene 3" : : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene3(target_destination) : "Scene 4" : : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene4(target_destination) : "Scene 5" : : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene5(target_destination) : "Scene 6" : : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene6(target_destination) : "Scene 7" : : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene7(target_destination) : "Scene 8" : : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene8(target_destination) : "Scene 9" : : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene9(target_destination) : "Scene 10" : : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene10(target_destination) : "Scene 11" : : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene11(target_destination) : "Scene 12" : : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene12(target_destination) : "Scene 13" : : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene13(target_destination) : "Scene 14" : : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene14(target_destination) : "Scene 15" : : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene15(target_destination) : "Scene 16" : : "The name of a logic_choreographed_scene, or logic_scene_list_manager."

	// Inputs
	input Shutdown(void) : "Remove the manager and all scenes referenced by it (and all scenes referenced by logic_scene_list_manager's embedded in this one" + ")."
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/point_servercommand.vmt")
	color(200 200 200)
	line(200 200 200, targetname, group00)
	line(200 200 200, targetname, group08)
	line(200 200 200, targetname, group01)
	line(200 200 200, targetname, group09)
	line(200 200 200, targetname, group02)
	line(200 200 200, targetname, group10)
	line(200 200 200, targetname, group03)
	line(200 200 200, targetname, group11)
	line(200 200 200, targetname, group04)
	line(200 200 200, targetname, group12)
	line(200 200 200, targetname, group05)
	line(200 200 200, targetname, group13)
	line(200 200 200, targetname, group06)
	line(200 200 200, targetname, group14)
	line(200 200 200, targetname, group07)
	line(200 200 200, targetname, group15)
= logic_script: "An entity that acts as a container for scripts."
	[
	group00(target_destination) : "EntityGroup[0]"
	group01(target_destination) : "EntityGroup[1]"
	group02(target_destination) : "EntityGroup[2]"
	group03(target_destination) : "EntityGroup[3]"
	group04(target_destination) : "EntityGroup[4]"
	group05(target_destination) : "EntityGroup[5]"
	group06(target_destination) : "EntityGroup[6]"
	group07(target_destination) : "EntityGroup[7]"
	group08(target_destination) : "EntityGroup[8]"
	group09(target_destination) : "EntityGroup[9]"
	group10(target_destination) : "EntityGroup[10]"
	group11(target_destination) : "EntityGroup[11]"
	group12(target_destination) : "EntityGroup[12]"
	group13(target_destination) : "EntityGroup[13]"
	group14(target_destination) : "EntityGroup[14]"
	group15(target_destination) : "EntityGroup[15]"
	]

@PointClass base(BaseEntityPoint, EnableDisable) 
	iconsprite("editor/logic_timer.vmt")
	color(0 100 250)
= logic_timer: "An entity that fires a timer event at regular, or random, intervals. It can also be set to oscillate between a high and low end," + " in which case it will fire alternating high/low outputs each time it fires."
	[
	spawnflags(flags)  =
		[
		1: "[1] Oscillator (alternates between OnTimerHigh and OnTimerLow outputs)" : 0
		]

	userandomtime(choices) : "Use Random Time" : 0 =
		[
		0: "No"
		1: "Yes"
		]

	lowerrandombound(string) : "Minimum Random Interval" : : "If 'Use Random Time' is set, this is the minimum time between timer fires. The time will be a random number between this and the" + " 'Maximum Random Interval'."
	upperrandombound(string) : "Maximum Random Interval" : : "If 'Use Random Time' is set, this is the maximum time between timer fires. The time will be a random number between the 'Minimum" + " Random Interval' and this."
	refiretime(string) : "Refire Interval" : : "If 'Use Random Time' isn't set, this is the time between timer fires, in seconds."

	// Inputs
	input RefireTime(integer) : "Set a new Refire Interval."
	input ResetTimer(void) : "Reset the timer. It will fire after the Refire Interval expires."
	input FireTimer(void) : "Force the timer to fire immediately."
	input Enable(void) : "Enable the timer."
	input Disable(void) : "Disable the timer."
	input Toggle(void) : "Toggle the timer on/off."
	input LowerRandomBound(float) : "Set a new Minimum Random Interval."
	input UpperRandomBound(float) : "Set a new Maximum Random Interval."
	input AddToTimer(float) : "Add time to the timer if it is currently enabled.  Does not change the Refire Interval."
	input SubtractFromTimer(float) : "Subtract time from the timer if it is currently enabled.  Does not change the Refire Interval."

	// Outputs
	output OnTimer(void) : "Fired when the timer expires."
	output OnTimerHigh(void) : "Fired every other time for an oscillating timer."
	output OnTimerLow(void) : "Fired every other time for an oscillating timer."
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/logic_auto.vmt")
= logic_versus_random: "Fires random outputs in the first round of a versus map, and then repeats those outputs in the second round of a versus map. "
	[

	// Inputs
	input PickRandom(void) : "Fires a random output with at least one connection."

	// Outputs
	output OnRandom01(void) : "Fired when the input value equals the Random01 value."
	output OnRandom02(void) : "Fired when the input value equals the Random02 value."
	output OnRandom03(void) : "Fired when the input value equals the Random03 value."
	output OnRandom04(void) : "Fired when the input value equals the Random04 value."
	output OnRandom05(void) : "Fired when the input value equals the Random05 value."
	output OnRandom06(void) : "Fired when the input value equals the Random06 value."
	output OnRandom07(void) : "Fired when the input value equals the Random07 value."
	output OnRandom08(void) : "Fired when the input value equals the Random08 value."
	output OnRandom09(void) : "Fired when the input value equals the Random09 value."
	output OnRandom10(void) : "Fired when the input value equals the Random10 value."
	output OnRandom11(void) : "Fired when the input value equals the Random11 value."
	output OnRandom12(void) : "Fired when the input value equals the Random12 value."
	output OnRandom13(void) : "Fired when the input value equals the Random13 value."
	output OnRandom14(void) : "Fired when the input value equals the Random14 value."
	output OnRandom15(void) : "Fired when the input value equals the Random15 value."
	output OnRandom16(void) : "Fired when the input value equals the Random16 value."
	]

@PointClass base(BaseEntityPoint) 
	color(0 100 250)
	line(255 255 0, targetname, parentname)
	iconsprite("editor/ficool2/material_modify_control.vmt")
= material_modify_control: "An entity that can be used to directly control material vars. To use it, you need to add the MaterialModify or MaterialModifyAni" + "mated proxy to the material you intend to change. Parent this entity the entity who's material you want to control. If not paren" + "ted, this applies to all materials in the map with the given name."
	[
	materialname(string) : "Material to modify."
	materialvar(string) : "Material variable to modify."

	// Inputs
	input SetMaterialVar(string) : "Fire to modify a material variable. The argument is the value to set the variable to."
	input SetMaterialVarToCurrentTime(void) : "This sets the material variable to the current time on the server."
	input StartAnimSequence(string) : "Force an animated material with the MaterialModifyAnimated proxy to play a set of animation frames. Format is: <Frame Start> <Fr" + "ame End> <Frame Rate> <Loop>. Setting <Frame End> to -1 uses the last frame of the texture. <Loop> should be 1 or 0."
	input StartFloatLerp(string) : "Force a material with the MaterialModify proxy to lerp a material var between two floating point values. Format is: <Start Value" + "> <End Value> <Transition Time> <Loop>. <Loop> should be 1 or 0."
	]

@PointClass base(BaseEntityPoint) 
	color(0 100 250)
	iconsprite("editor/math_colorblend.vmt")
= math_colorblend: "Used to create a blend between two colors for controlling the color of another entity."
	[
	spawnflags(flags)  =
		[
		1: "[1] Ignore out of range input values" : 1
		]

	inmin(integer) : "Minimum Valid Input Value" : 0 : "Input values below this value will be ignored."
	inmax(integer) : "Maximum Valid Input Value" : 1 : "Input values above this value will be ignored."
	colormin(color255) : "Output RGB color when input is min." : "0 0 0" : "When the input value is equal to 'Minimum Valid Input Value', this is the output RGB color."
	colormax(color255) : "Output RGB color when input is max." : "255 255 255" : "When the input value is equal to 'Maximum Valid Input Value', this is the output RGB color."

	// Inputs
	input InValue(float) : "Input a value and fire the output with the remapped value."

	// Outputs
	output OutColor(color255) : "Fired when the InValue input is received, with the remapped RGB color as the parameter."
	]

@PointClass base(BaseEntityPoint, EnableDisable) 
	iconsprite("editor/math_counter.vmt")
	color(0 100 250)
= math_counter: "Holds a numeric value and performs arithmetic operations upon it. If either the minimum or maximum legal value is nonzero, OutVa" + "lue will be clamped to the legal range, and the OnHitMin/OnHitMax outputs will be fired at the appropriate times. If both min an" + "d max are set to zero, no clamping is performed and only the OutValue output will be fired."
	[
	startvalue(float) : "Initial Value" : 0 : "Starting value for the counter."
	min(float) : "Minimum Legal Value" : 0 : "Minimum legal value for the counter. If min=0 and max=0, no clamping is performed."
	max(float) : "Maximum Legal Value" : 0 : "Maximum legal value for the counter. If min=0 and max=0, no clamping is performed."

	// Inputs
	input Add(float) : "Add an amount to the counter and fire the OutValue output with the result."
	input Divide(float) : "Divide the counter by an amount and fire the OutValue output with the result."
	input Multiply(float) : "Multiply the counter by an amount and fire the OutValue output with the result."
	input SetValue(float) : "Set the counter to a new value and fire the OutValue output with the result."
	input SetValueNoFire(float) : "Set the counter to a new value without firing any outputs."
	input Subtract(float) : "Subtract an amount from the counter and fire the OutValue output with the result."
	input SetHitMax(float) : "Set the upper bound of the counter and fire the OutValue output with the current value."
	input SetHitMin(float) : "Set the lower bound of the counter and fire the OutValue output with the current value."
	input GetValue(void) : "Causes the counter fire its OnGetValue output with the current value of the counter. Used for polling the counter when you don't" + " want constant updates from the OutValue output."

	// Outputs
	output OutValue(float) : "Fired when the counter value changes."
	output OnHitMin(void) : "Fired when the counter value meets or goes below the min value. The counter must go back above the min value before the output w" + "ill fire again."
	output OnHitMax(void) : "Fired when the counter value meets or exceeds the max value. The counter must go below the max value before the output will fire" + " again."
	output OnGetValue(float) : "Fired in response to the GetValue input. Used for polling the counter when you don't want constant updates from the OutValue out" + "put."
	]

@PointClass base(BaseEntityPoint, EnableDisable) 
	color(0 100 250)
	iconsprite("editor/math_remap.vmt")
= math_remap: "An entity that remaps a range of input values to a given range of output values."
	[
	spawnflags(flags)  =
		[
		1: "[1] Ignore out of range input values" : 1
		2: "[2] Clamp output to output range" : 0
		]

	in1(integer) : "Minimum Valid Input Value" : 0 : "Input values below this value will be ignored."
	in2(integer) : "Maximum Valid Input Value" : 1 : "Input values above this value will be ignored."
	out1(integer) : "Output Value When Input Is Min." : : "When the input value is equal to 'Minimum Valid Input Value', this is the output value."
	out2(integer) : "Output Value When Input Is Max." : : "When the input value is equal to 'Maximum Valid Input Value', this is the output value."

	// Inputs
	input InValue(float) : "Input a value and fire the output with the remapped value."

	// Outputs
	output OutValue(float) : "Fired when the InValue input is received, with the remapped input value as the parameter."
	]

@MoveClass base(BaseEntityPoint, KeyFrame, Mover) 
	line(255 255 255, targetname, nextkey)
	size(-8 -8 -8, 8 8 8)
	color(255 170 0)
	animator()
= move_keyframed: "Keyframed Move Behavior"
	[
	]

@MoveClass base(BaseEntityPoint, Mover, KeyFrame) 
	line(255 255 255, targetname, nextkey)
	size(-8 -8 -8, 8 8 8)
	color(255 0 0)
	animator()
= move_track: "Track Move Behavior"
	[
	wheelbaselength(integer) : "Distance between the wheels" : 50
	damage(integer) : "Damage done to blocking entities" : 0
	norotate(choices) : "Turn to face down path" : 0 =
		[
		0: "No"
		1: "Yes"
		]

	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/multisource")
= multisource: "Goldsource-era entity for combining multiple inputs. Superceded by the I/O system, and logic_branch_listener.Entities with their" + " 'trigger' keyvalue set to the name of this will be detected, Then once they all have Use-ed this, it will fire the output."
	[

	// Inputs
	input Use(void) : "Toggle the value associated with the caller in this entity."

	// Outputs
	output OnTrigger(void) : "Fired when the multisource's inputs are all active.."
	]

@PointClass base(BaseEntityPoint) 
	line(255 255 255, targetname, target)
	iconsprite("editor/ficool2/path_corner")
	studio("models/editor/angle_helper.mdl")
	color(247 181 82)
= path_corner: "Generic path point"
	[
	spawnflags(flags)  =
		[
		1: "[1] Wait for retrigger" : 0
		2: "[2] Teleport to THIS path_corner" : 0
		]

	target(target_destination) : "Next stop target"
	wait(integer) : "Wait here (secs)" : 0
	speed(integer) : "New Train Speed" : 0
	yaw_speed(integer) : "New Train rot. Speed" : 0

	// Inputs
	input SetNextPathCorner(target_destination) : "Sets next pathcorner"

	// Outputs
	output OnPass(void) : "Fires when a path follower passes this point"
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/ficool2/path_corner_crash")
	color(255 0 0)
= path_corner_crash: "Helicopter Crash Path"
	[
	target(target_destination) : "Next stop target"
	]

@PointClass base(BaseEntityPoint) 
	cylinder(255 255 255, targetname, target, radius, targetname, targetname, radius)
	color(255 192 0)
	studio("models/editor/angle_helper.mdl")
	sphere(radius)
	iconsprite("editor/ficool2/path_track")
= path_track: "An entity used to build paths for other entities to follow. Each path_track is a node on the path, each holding the name of the " + "next path_track in the path."
	[
	spawnflags(flags)  =
		[
		1: "[1] Disabled" : 0
		2: "[2] Fire once" : 0
		4: "[4] Branch Reverse" : 0
		8: "[8] Disable train" : 0
		16: "[16] Teleport to THIS path track" : 0
		]

	target(target_destination) : "Next Stop Target" : : "The next path_track in the path."
	altpath(target_destination) : "Branch Path" : : "An alternative path_track to be the next node in the path. Useful for making branching paths. Use the ToggleAlternatePath / Enab" + "leAlternatePath inputs to make the alternative path active."
	speed(float) : "New Train Speed" : 0 : "When the train reaches this path_track, it will set its speed to this speed. This speed must be a positive value that is less th" + "an the train's max speed. A value of 0 will cause no change in the train's speed."
	radius(float) : "Path radius" : 0 : "Used by NPCs who follow track paths (attack chopper/gunship). This tells them the maximum distance they're allowed to be from th" + "e path at this node."
	orientationtype(choices) : "Orientation Type" : 1 : "The way that the path follower faces as it moves through this path track." =
		[
		0: "No change"
		1: "Face direction of motion"
		2: "Face this path_track's angles"
		]


	// Inputs
	input ToggleAlternatePath(void) : "Cause the track to toggle to/from its alternate path."
	input EnableAlternatePath(void) : "Enable the alternate path of the track."
	input DisableAlternatePath(void) : "Disable the alternate path of the track."
	input TogglePath(void) : "Cause the track to toggle on/off/"
	input EnablePath(void) : "Enable the track."
	input DisablePath(void) : "Disable the track."

	// Outputs
	output OnPass(void) : "Fired when any entity following this path passes this path_track node."
	output OnTeleport(void) : "Fired when any entity following this path teleports directly to this path_track node."
	]

@PointClass base(BaseEntityPoint) 
	color(128 128 128)
	iconsprite("editor/phys_constraintsystem.vmt")
= phys_constraintsystem: "An entity used to manage a group of interacting constraints and keep them stable. All constraints on a set of entities should be" + " placed in the same system, or they will fight each other during simulation."
	[
	additionaliterations(integer) : "Additional System Iterations" : 0 : "Adding iterations makes the interactions among constraints in a system tighter. It will not compensate for errors due to collisi" + "on, but will help in cases where objects of disparate mass are constrained to each other."
	]

@PointClass base(BaseEntityPoint) 
	color(128 128 128)
	line(255 255 0, targetname, target)
	iconsprite("editor/phys_convert.vmt")
= phys_convert: "Turns an arbitrary entity into a physically simulated entity. i.e. brush entities will behave like func_physbox, model entities " + "behave like prop_physics."
	[
	spawnflags(flags)  =
		[
		1: "[1] Convert Asleep" : 0
		2: "[2] Convert As Debris" : 0
		]

	target(target_destination) : "Entity to convert" : : "Name of the entity or entities that will be converted to a physics object when the ConvertTarget input is fired. Maximum of 512 " + "entities."
	swapmodel(target_destination) : "Model Swap Entity" : : "If specified, the entity will be switched to use this entity's model instead of its own. Only one entity will be converted."
	massoverride(float) : "Mass Override" : 0 : "Sets the mass when the object(s) are converted (0 means auto-calculate)"

	// Inputs
	input ConvertTarget(void) : "Converts this entity's target to a physically simulated object."

	// Outputs
	output OnConvert(void) : "Fires after the conversion has taken place."
	]

@PointClass base(BaseEntityPoint) 
	color(128 128 128)
	iconsprite("editor/ficool2/phys_keepupright.vmt")
	line(128 128 128, targetname, attach1)
= phys_keepupright: "A controller that tries to keep an entity facing a particular direction."
	[
	spawnflags(flags)  =
		[
		1: "[1] Start inactive" : 0
		]

	attach1(target_destination) : "Target Entity" : : "The entity to align to the desired angles."
	angularlimit(float) : "Angular Limit" : 15 : "The maximum angular velocity that this controller can compensate for, in degrees per second."

	// Inputs
	input TurnOn(void) : "Enable the controller."
	input TurnOff(void) : "Disable the controller."
	]

@PointClass base(BaseEntityPoint) 
	halfgridsnap
	color(128 128 128)
	line(128 128 128, targetname, attach1)
	iconsprite("editor/ficool2/phys_motor")
= phys_motor: "An entity that tries to spin a target entity at a particular speed."
	[
	speed(string) : "Rotation Speed" : 0 : "Angular speed (units are degress/second)"
	spinup(string) : "Spin up time" : 1 : "spin up time in seconds (also affects the rate at which speed changes happen)"
	inertiafactor(float) : "System Interia Scale" : "1.0" : "Make this larger if the object being driven is constrained to a set of heavier objects."
	axis(vecline) : "Rotation Axis"
	spawnflags(flags)  =
		[
		1: "[1] Start On" : 1
		2: "[2] No world collision" : 0
		4: "[4] Hinge Object" : 1
		]

	attach1(target_destination) : "Attached Object" : : "Object to apply the force to"

	// Inputs
	input SetSpeed(float) : "Sets target speed"
	input TurnOn(void) : "Turns motor on"
	input TurnOff(void) : "Turns motor off"
	]

@PointClass base(BaseEntityPoint, EnableDisable) 
	iconsprite("editor/ficool2/phys_ragdollmagnet")
	sphere(radius)
	line(255 255 0, targetname, target)
	color(128 128 128)
= phys_ragdollmagnet: "An entity that acts like a magnet for ragdolls. Useful for crafting exaggerated ragdoll behavior (i.e. guys falling over rails o" + "n death). If the Bar Magnet spawnflag is set, the magnet works like it was a cylindrical magnet i.e. it attracts ragdolls to the" + " nearest point on a line."
	[
	axis(vecline) : "Bar Magnet Axis" : : "If the Bar Magnet spawnflag is set, ragdolls will be attracted to any point on this line."
	radius(float) : "Effective Radius" : 512 : "Radius in which ragdolls are affected around this entity's origin."
	force(float) : "Force" : 5000 : "Magnetic force to apply to ragdolls within the radius. Expressed as kilograms per inch per second. So a force of 1000 will add 1" + "0 inches/second to a 100kg man. It will add 100 inches per second to a 10kg headcrab."
	target(target_destination) : "Entity to affect" : : "If specified, the phys_ragdollmagnet will only affect the target entity."
	spawnflags(flags)  =
		[
		2: "[2] Bar Magnet (use axis helper)" : 0
		]

	]

@PointClass base(BaseEntityPoint) 
	halfgridsnap
	color(128 128 128)
	iconsprite("editor/ficool2/phys_spring")
	line(128 128 128, targetname, attach1)
	line(128 128 128, targetname, attach2)
	line(128 128 128, targetname, attach1, targetname, attach2)
	sphere(length)
	sphere(breaklength)
= phys_spring: "A physically simulated spring. 'Length' is what's known as the 'natural spring length'. This is how long the spring would be if " + "it was at rest (nothing hanging on it or attached). When you attach something to the spring, it will stretch longer than its 'na" + "tural length'. The amount of stretch is determined by the 'Sprint Constant'. The larger the spring constant the less stretch the" + " spring."
	[
	spawnflags(flags)  =
		[
		1: "[1] Force only on stretch" : 0
		]

	attach1(target_destination) : "Entity 1"
	attach2(target_destination) : "Entity 2"
	springaxis(vecline) : "Spring Axis" : : "Use the helper. Drag it out to match the virtual spring."
	length(string) : "Spring Length" : 0 : "How long the spring would be if it was at rest (nothing hanging on it or attached). 0 means the length of the brush."
	constant(string) : "Spring Constant" : 50 : "Stiffness of the spring.  The larger the number the less the spring will stretch."
	damping(string) : "Damping Constant" : "2.0" : "How much energy the spring loses.  The larger the number, the less bouncy the spring."
	relativedamping(string) : "Relative Damping Constant" : "0.1" : "The amount of energy the spring loses proportional to the relative velocity of the two objects the spring is attached to."
	breaklength(string) : "Break on Length" : 0 : "If the spring's length ever exceeds this length, the spring breaks."

	// Inputs
	input SetSpringConstant(float) : "Set the Spring Constant."
	input SetSpringLength(float) : "Set the Spring Length."
	input SetSpringDamping(float) : "Set the Spring Damping."
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/ficool2/player_loadsaved")
= player_loadsaved: "Load Auto-Saved game"
	[
	duration(string) : "Fade Duration (seconds)" : 2
	holdtime(string) : "Hold Fade (seconds)" : 0
	renderamt(integer) : "Fade Alpha" : 255
	rendercolor(color255) : "Fade Color (R G B)" : "0 0 0"
	loadtime(string) : "Reload delay" : 0

	// Inputs
	input Reload(void) : "Ends this game and reloads"
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/player_speedmod.vmt")
= player_speedmod: "Speeds up or slows down player velocity over time (slow mo/fast forward)"
	[
	spawnflags(flags)  =
		[
		1: "[1] Suppress weapons" : 0
		2: "[2] Suppress HUD" : 0
		4: "[4] Suppress jump" : 0
		8: "[8] Suppress duck" : 0
		16: "[16] Suppress use" : 0
		32: "[32] Suppress sprint" : 0
		64: "[64] Suppress attack" : 0
		128: "[128] Suppress zoom" : 0
		]


	// Inputs
	input ModifySpeed(float) : "Modifies player speed by X ammount."
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/player_weaponstrip.vmt")
= player_weaponstrip: "Removes weapons from the player."
	[

	// Inputs
	input Strip(void) : "Removes all weapons."
	input StripActiveWeapon(void) : "Removes the active weapon."
	input StripWeaponByClassname(string) : "Removes a weapon by classname, eg 'weapon_dieselcan'"
	]

@PointClass base(BaseEntityPoint, EnableDisable) 
	iconsprite("editor/ficool2/point_anglesensor")
	color(0 100 250)
	line(0 100 250, targetname, target)
	line(0 100 250, targetname, target, targetname, lookatname)
= point_anglesensor: "An entity that detects if another entity points in a given direction for a period of time."
	[
	target(target_destination) : "Target Entity Name" : : "Name of the entity whose angles will be sensed."
	lookatname(target_destination) : "Look At Entity" : : "The entity we want to check to see if the Target Entity is looking at."
	duration(float) : "Duration" : : "The amount of time the Target Entity must look at the 'Look at Entity' to trigger this entity, in seconds."
	tolerance(integer) : "Tolerance" : : "The tolerance, in degrees, in the checking to determine when the Target Entity is looking at the Look At Entity."
	spawnflags(flags)  =
		[
		1: "[1] Use target entity's angles (NOT position)" : 0
		]


	// Inputs
	input Toggle(void) : "Toggle the sensor between enabled and disabled."
	input Test(void) : "Check to see if the Target Entity is facing the Look At Entity within the specified tolerance, firing either the OnFacingLookat " + "or OnNotFacingLookat output based on the result."

	// Outputs
	output TargetDir(vector) : "Fired when the forward direction of the Target Entity changes. Passes the new forward direction as a parameter."
	output OnFacingLookat(void) : "Fired when the Target Entity points at the Look At Entity for more than the specified Duration, or in response to a Test input."
	output OnNotFacingLookat(void) : "Fires in response to a Test input when the Target Entity is not pointing at the Look At Entity."
	output FacingPercentage(float) : "Normalized value (0..1) where 1 is facing directly at target and 0 is at or beyond the angle of tolerance."
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/ficool2/point_angularvelocitysensor")
	color(0 100 250)
	line(0 100 250, targetname, target)
= point_angularvelocitysensor: "An entity that detects if another entity's angular velocity meets or exceeds a threshold value."
	[
	target(target_destination) : "Target Entity Name" : : "Name of the entity whose angular velocity will be sensed."
	threshold(float) : "Threshold Velocity" : 0 : "The threshold angular velocity to compare against, in degrees per second."
	fireinterval(float) : "Fire Interval" : "0.2" : "Angular velocity must cross the threshold for at least this long to fire."
	axis(vecline) : "Axis"
	usehelper(choices) : "Use Axis Helper" : 0 : "Use axis helper to determine rotation values (clockwise/counter-clockwise)." =
		[
		0: "No"
		1: "Yes"
		]


	// Inputs
	input Test(void) : "Checks to see if the Target Entity's angular velocity meets or exceeds the Threshold Velocity, firing either the OnGreaterThanOr" + "EqualTo or OnLessThan output based on the result."
	input TestWithInterval(void) : "Checks to see if the Target Entity's angular velocity meets or exceeds the Threshold Velocity. Once the Fire Interval expires, f" + "ires the appropriate test result output if the result is stable throughout the Fire Interval."

	// Outputs
	output AngularVelocity(float) : "Fired when the Target's Angular Velocity changes, passing the new magnitude of the angular velocity."
	output OnGreaterThan(void) : "Fired when the Target Entity goes from slower than the threshold angular velocity to faster than the threshold angular velocity."
	output OnGreaterThanOrEqualTo(void) : "Fired when the Target Entity goes from slower than the threshold angular velocity to faster than the threshold angular velocity."
	output OnLessThan(void) : "Fired when the Target Entity goes from faster than the threshold angular velocity to slower than the threshold angular velocity."
	output OnLessThanOrEqualTo(void) : "Fired when the Target Entity goes from faster than the threshold angular velocity to slower than the threshold angular velocity."
	output OnEqualTo(void) : "Fired when the Target Entity reaches the threshold angular velocity from a different velocity."
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/ficool2/point_bonusmaps_accessor")
	color(200 0 0)
= point_bonusmaps_accessor: "An entity that relays bonus maps changes."
	[
	filename(string) : "File Name"
	mapname(string) : "Map Name"

	// Inputs
	input Unlock(void) : "Unlocks the filename/map combination."
	input Complete(void) : "Completes the filename/map combination."
	input Save(void) : "Saves bonus map data."
	]

@PointClass base(BaseEntityPoint) 
	color(200 0 0)
	iconsprite("editor/point_clientcommand.vmt")
= point_broadcastclientcommand: "An entity that issues commands to each valid client's console, as if it was typed in by that player locally."
	[

	// Inputs
	input Command(string) : "Command to execute for all players."
	]

@PointClass base(BaseEntityPoint) 
	studioprop("models/editor/camera.mdl")
	frustum(FOV, fogstart, fogend, 250 250 250, -1)
= point_camera: "Camera"
	[
	spawnflags(flags)  =
		[
		1: "[1] Start Off" : 0
		]

	fov(float) : "FOV" : 90 : "Field of view in degrees"
	usescreenaspectratio(choices) : "Screen Aspect Ratio" : 0 =
		[
		0: "No"
		1: "Yes"
		]

	fogenable(choices) : "Fog Enable" : 0 =
		[
		0: "No"
		1: "Yes"
		]

	fogcolor(color255) : "Fog Color" : "0 0 0"
	fogstart(float) : "Fog Start" : 2048 : "The near fog plane."
	fogend(float) : "Fog End" : 4096 : "The far fog/clipping plane."
	fogmaxdensity(float) : "Fog Max Density [0..1]" : 1 : "The maximum fog density. 0=no fog, 1=full fog."

	// Inputs
	input ChangeFOV(string) : "Changes camera's FOV over time"
	input SetOnAndTurnOthersOff(void) : "Turn the camera on, and turn all other cameras off."
	input SetOn(void) : "Turn the camera on."
	input SetOff(void) : "Turn the camera off."
	]

@PointClass base(BaseEntityPoint) 
	color(200 0 0)
	iconsprite("editor/point_clientcommand.vmt")
= point_clientcommand: "An entity that issues commands to the client console, as if it was typed in by the player (if activator is a player, or the loca" + "l player in single player)."
	[

	// Inputs
	input Command(string) : "Command to execute."
	]

@PointClass base(BaseEntityPoint) 
	studioprop("models/editor/camera.mdl")
= point_deathfall_camera: "A camera entity that players falling to their deaths look through."
	[
	fov(float) : "Field of view" : 90 : "Player FOV"
	fov_rate(float) : "Seconds to reach FOV target" : "1.0" : "Amount of time it should take to reach the specified FOV"
	]

@PointClass base(BaseEntityPoint) 
	studioprop("models/editor/camera.mdl")
	iconsprite("editor/point_devshot_camera.vmt")
	frustum(fov, 16, 256, 255 255 255 10, -1)
= point_devshot_camera: "An entity used by the -makedevshots system, which automatically takes screenshots at the position of every devshot camera in the" + " level."
	[
	cameraname(string) : "Camera Name" : : "Used as the name of the directory to store screenshots from this camera. Must be unique within the level."
	fov(integer) : "Camera FOV" : 75 : "FOV of this camera."
	]

@PointClass base(BaseEntityPoint) 
	line(255 255 255, targetname, parentname)
	iconsprite("editor/ficool2/point_enable_motion_fixup")
= point_enable_motion_fixup: "An entity used to move a motion-disabled prop when it enables motion. Parent this entity to the prop, and when the prop has its " + "motion enabled, it will immediately teleport to the origin of this entity."
	[
	]

@PointClass base(BaseEntityPoint) 
	line(255 255 0, targetname, referencename)
	line(255 255 0, targetname, filtername)
	color(0 100 250)
	iconsprite("editor/point_entity_finder")
= point_entity_finder: "An entity that will find an entity and pass it along as the !caller with the OutEntity output. Requires using !caller as the par" + "ameter on the input."
	[
	filtername(filterclass) : "Filter Name" : : "Filter to use to narrow set of findable entities. See filter_activator_name for more explanation."
	referencename(target_destination) : "Reference Entity" : : "Name of the entity to use when evaluating criteria. For example, when using 'Nearest', this is the entity that distance will be " + "measured from. If left blank will use the point_entity_finder."
	method(choices) : "Search Method" : 0 =
		[
		0: "Nearest"
		1: "Farthest"
		2: "Random"
		]


	// Inputs
	input FindEntity(void) : "Find an entity that meets the specified criteria.  Will fire OutEntity if found and pass the entity as !Caller."

	// Outputs
	output OnFoundEntity(void) : "Fired when FindEntity is input and an entity was found. Passes the found entity as !Caller."
	]

@PointClass base(BaseEntityPoint, EnableDisable) 
	iconsprite("editor/ficool2/point_gamestats_counter")
	color(0 255 0)
= point_gamestats_counter: "Generic game statistics counter."
	[
	name(string) : "Name of statistic counter"

	// Inputs
	input SetName(string) : "Changes name of statistic counter"
	input Increment(float) : "Increments named statistic counter by specified value"
	]

@PointClass base(BaseEntityPoint, DamageType) 
	sphere(DamageRadius)
	line(255 0 0, targetname, damagetarget)
	iconsprite("editor/ficool2/point_hurt")
= point_hurt: "An entity that does damage to all entities in a radius around itself, with a specified delay. If 'Target Entity' is specified, t" + "he damage is only done to that entity."
	[
	damagetarget(target_destination) : "Target Entity" : : "If specified, only this entity will take damage. Otherwise, all entities within the Radius will take damage."
	damageradius(float) : "Radius" : 256 : "All entities within this radius of this entity will take damage. If a 'Target Entity' is specified, only that entity will take d" + "amage."
	damage(integer) : "Damage" : 5 : "Damage done to all affected entities each time this entity fires."
	damagedelay(float) : "Delay" : 1 : "Delay between refires, in seconds."
	spawnflags(flags)  =
		[
		1: "[1] Start Active" : 0
		]


	// Inputs
	input Hurt(void) : "Force a single fire, damaging either the Target Entity or all entities within the radius."
	input TurnOn(void) : "Enable this entity. It will start damaging entities everytime it fires, and refire based upon the specified Delay."
	input TurnOff(void) : "Disable this entity. It will stop damaging entities."
	input Toggle(void) : "Toggle this entity between On/Off state."
	]

@PointClass base(BaseEntityPoint) 
	studio("models/editor/axis_helper.mdl")
	color(200 200 0)
	iconsprite("editor/ficool2/point_message.vmt")
	sphere(radius)
= point_message: "An entity that displays a text message in the world, at its origin."
	[
	spawnflags(flags)  =
		[
		1: "[1] Start Disabled" : 0
		]

	message(string) : "Entity Message"
	radius(integer) : "Show message radius" : 128 : "Distance the player must be within to see this message."
	developeronly(choices) : "Developer Only?" : 0 : "If set, this message will only be visible when developer mode is on." =
		[
		0: "No"
		1: "Yes"
		]


	// Inputs
	input Enable(void) : "Start displaying the message text, if the player is within the message radius."
	input Disable(void) : "Stop displaying the message text."
	]

@PointClass base(BaseEntityPoint, NavAttributeRegion) 
	wirebox(mins, maxs)
= point_nav_attribute_region: "A point entity that holds attributes to be applied to regions of nav areas during generation."
	[
	mins(vector) : "Mins" : "-4 -128 -80"
	maxs(vector) : "Maxs" : "4 128 80"
	]

@PointClass base(BaseEntityPoint, NavBlocker) 
	obb(boxmins, boxmaxs)
= point_nav_blocker: "A point entity that can block nav areas touching its AABB."
	[
	boxmins(vector) : "Mins" : "-8 -8 -8"
	boxmaxs(vector) : "Maxs" : "8 8 8"
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/ficool2/point_playermoveconstraint.vmt")
	sphere(radius)
= point_playermoveconstraint: "An entity that constrains players to a radius around itself, slowing them down the closer they get to the edge of the radius."
	[
	radius(float) : "Radius" : 256 : "Radius to constrain players to."
	width(float) : "Constraint Width" : "75.0" : "Width of the constraint edge. This is the distance in which to start slowing players down as they approach the edge of the radiu" + "s."
	speedfactor(float) : "Speed Factor" : "0.15" : "Factor applied to the player's max speed as they approach the radius edge."

	// Inputs
	input TurnOn(void) : "Start constraining any players within the radius."
	input TurnOff(void) : "Stop constraining any players previously constrained."

	// Outputs
	output OnConstraintBroken(void) : "Fired when a player breaks through the constraint."
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/ficool2/point_posecontroller")
	line(255 255 0, targetname, propname)
= point_posecontroller: "An entity that controls a pose parameter of a prop and cycles the pose clientside."
	[
	propname(target_destination) : "Target" : : "Name of the prop to control. Can be any animating entity."
	poseparametername(string) : "Pose Parameter Name" : : "Name of the pose parameter to control. Setting this to an invalid value will crash the game!"
	posevalue(float) : "Pose Parameter Value" : 0 : "Normalized value for the pose parameter from 0.0 and 1.0 (maps to min and max range)."
	interpolationtime(float) : "Interpolation Time" : 0 : "Number of seconds (0.0 to 10.0) for client to match absolue pose values."
	interpolationwrap(choices) : "Interpolation Wrap" : 0 : "Should wrap from 0.0 to 1.0 when interpolating." =
		[
		0: "No"
		1: "Yes"
		]

	cyclefrequency(float) : "Cycle Frequency" : 0 : "Base cycles per second from -10.0 to 10.0."
	fmodulationtype(choices) : "Frequency Modulation Type" : 0 =
		[
		0: "None"
		1: "Sine"
		2: "Square"
		3: "Triangle"
		4: "Sawtooth"
		5: "Noise"
		]

	fmodtimeoffset(float) : "Frequency Modulation Time Offset" : 0 : "Modulation time offset from -1.0f to 1.0."
	fmodrate(float) : "Frequency Modulation Rate" : 0 : "Modulation cycles per second from -10.0f to 10.0."
	fmodamplitude(float) : "Frequency Modulation Amplitude" : 0 : "Modulation extents from 0.0f to 10.0."

	// Inputs
	input SetPoseParameterName(string) : "Sets the pose parameter to control."
	input SetPoseValue(float) : "Set the pose parameter to a normalized value between 0.0 and 1.0 (maps to min and max range)."
	input SetInterpolationTime(float) : "Set the interpolation time to a number of seconds between 0.0 and 10.0."
	input SetCycleFrequency(float) : "Set the pose parameter's base cycles per second from -10.0f to 10.0."
	input SetFModType(integer) : "Set the type of frequency modulation."
	input SetFModTimeOffset(float) : "Set the modulation time offset from -1.0f to 1.0."
	input SetFModRate(float) : "Set the modulation cycles per second from -10.0f to 10.0."
	input SetFModAmplitude(float) : "Set the modulation extents from 0.0f to 10.0."
	input RandomizeFMod(float) : "Randomize the frequency modulation by an extremeness of 0.0 to 1.0."
	]

@PointClass base(BaseEntityPoint) 
	line(255 255 0, targetname, nozzle)
= point_prop_use_target: "A use target for carried props. Triggers the prop's use behavior."
	[
	spawnflags(flags)  =
		[
		1: "[1] Useable by Gas Can" : 1
		2: "[2] Useable by Cola Bottles" : 0
		]

	nozzle(target_destination) : "Gas nozzle" : : "The name of the prop_dynamic gas nozzle for this use_target (scavenge mode)."

	// Inputs
	input Activate(void) : "Activate the use target."
	input Deactivate(void) : "Deactivate the use target."

	// Outputs
	output OnUseStarted(void) : "Fired when a player starts using this target."
	output OnUseCancelled(void) : "Fired when a player use is cancelled."
	output OnUseFinished(void) : "Fired when a player use is complete."
	]

@PointClass base(BaseEntityPoint, EnableDisable) 
	color(0 100 250)
	line(0 100 250, targetname, target)
	iconsprite("editor/point_proximity_sensor.vmt")
= point_proximity_sensor: "An entity that detects another entity's proximity to a target position."
	[
	target(target_destination) : "Target Entity Name" : : "Name of the entity whose position will be sensed."
	spawnflags(flags)  =
		[
		1: "[1] Test the distance as measured along the axis specified by our direction." : 0
		]


	// Inputs
	input Toggle(void) : "Toggle the sensor between enabled and disabled."

	// Outputs
	output Distance(float) : "Distance of the target entity away from this entity."
	]

@PointClass base(BaseEntityPoint) 
	sphere(radius)
	sphere(inner_radius)
	studio("models/editor/cone_helper.mdl")
	iconsprite("editor/ficool2/point_push")
	frustum(influence_cone, inner_radius, radius, 255 255 255 10, -1)
= point_push: "Pulls objects to, or pushes them away from a point. In Portal 2, if a portal is placed nearby it will transfer the suction and p" + "roduce a 'broken_tube_suck' effect for Diversity Vents."
	[
	spawnflags(flags)  =
		[
		1: "[1] Test LOS before pushing" : 0
		2: "[2] Use angles for push direction" : 0
		4: "[4] No falloff (constant push at any distance)" : 0
		8: "[8] Push players" : 1
		16: "[16] Push physics" : 1
		]

	enabled(choices) : "Start Enabled" : 1 =
		[
		0: "No"
		1: "Yes"
		]

	magnitude(float) : "Magnitude" : 100 : "How strongly to push away from the center."
	radius(float) : "Radius" : 128 : "Radius to affect items in."
	influence_cone(float) : "Cone of Influence" : 0 : "If greater than zero, the cone (in degrees) within which the object must lie for it to be affected."

	// Inputs
	input Enable(void) : "Enable the push."
	input Disable(void) : "Disable the push."
	]

@PointClass base(BaseEntityPoint) 
	line(255 255 0, targetname, model)
= point_script_use_target: "Makes an entity 'usable' by a player. An attached script determines the display text and use time."
	[
	model(target_destination) : "Use Model" : : "The name of the entity the player will be using."

	// Outputs
	output OnUseStarted(void) : "Fired when a player starts using this target."
	output OnUseCanceled(void) : "Fired when a player use is canceled."
	output OnUseFinished(void) : "Fired when a player use is complete."
	]

@PointClass base(BaseEntityPoint) 
	color(200 0 0)
	iconsprite("editor/point_servercommand.vmt")
= point_servercommand: "An entity that issues commands to the server console."
	[

	// Inputs
	input Command(string) : "Command to execute."
	]

@PointClass base(BaseEntityPoint, SystemLevelChoice) 
	studio("models/editor/cone_helper.mdl")
	sphere(spotlightlength)
	sphere(spotlightwidth)
= point_spotlight: "An entity to draw a spotlight. Will draw a beam when the player views it side on, and a halo when it's facing towards the player" + ". Unless the 'No Dynamic Light' spawnflag is checked, it will also create a dynamic light wherever the end of the spotlight rest" + "s."
	[
	spawnflags(flags)  =
		[
		1: "[1] Start On" : 1
		2: "[2] No Dynamic Light" : 1
		]

	spotlightlength(integer) : "Spotlight Length" : 500 : "Length of the spotlight beam."
	spotlightwidth(integer) : "Spotlight Width" : 50 : "Width of the spotlight beam."
	rendercolor(color255) : "Color (R G B)" : "255 255 255"
	hdrcolorscale(float) : "HDR color scale." : "0.7" : "float value to multiply sprite color by when running in HDR mode."
	haloscale(float) : "Halo size scale." : 60 : "float value to determine the size of the halo."

	// Inputs
	input LightOn(void) : "Turn the spotlight on."
	input LightOff(void) : "Turn the spotlight off"

	// Outputs
	output OnLightOn(void) : "Fires when light turns on."
	output OnLightOff(void) : "Fires when light turns off."
	]

@PointClass base(BaseEntityPoint) 
	studioprop()
	iconsprite("editor/point_teleport.vmt")
	line(255 255 255, targetname, target)
= point_teleport: "An entity that teleports a target entity to this position and angles. If 'Teleport Home' spawn flag is set, teleports the target" + " entity to its spawn position instead. If object is physically simulated, simulation is turned off when teleported."
	[
	target(target_destination) : "Entity To Teleport" : : "Name of the entity that will be teleported."
	model(studio) : "[H] Model" : "models/editor/angle_helper.mdl" : "The model shown in Hammer, to use for positioning."
	spawnflags(flags)  =
		[
		1: "[1] Teleport Home" : 0
		2: "[2] Into Duck (episodic)" : 0
		]


	// Inputs
	input Teleport(void) : "Teleport the target entity."
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/point_template.vmt")
	line(255 255 0, targetname, Template01)
	line(255 255 0, targetname, Template09)
	line(255 255 0, targetname, Template02)
	line(255 255 0, targetname, Template10)
	line(255 255 0, targetname, Template03)
	line(255 255 0, targetname, Template11)
	line(255 255 0, targetname, Template04)
	line(255 255 0, targetname, Template12)
	line(255 255 0, targetname, Template05)
	line(255 255 0, targetname, Template13)
	line(255 255 0, targetname, Template06)
	line(255 255 0, targetname, Template14)
	line(255 255 0, targetname, Template07)
	line(255 255 0, targetname, Template15)
	line(255 255 0, targetname, Template08)
	line(255 255 0, targetname, Template16)
= point_template: "Turns an entity, or set of entities, into a single template that can be instanced anywhere, and multiple times. If there are int" + "erdependencies (entity I/O, hierarchy, or other name references) between the entities in the template, the entities in the templ" + "ate will have their names changed and the interdependencies will be reconnected to the changes names. The name change format is " + "as follows: '<original name>&0000', where the 0000 will be replaced with the current global template instance, so wildcard searc" + "hes for '<original name>*' will still find them.\nIf you don't want the name fixup to happen, because you're only spawning the t" + "emplate once, or you want inputs to trigger all instances of the template, check the 'Preserve entity names' spawnflag. \nTo spa" + "wn the template in other places, use an env_entity_maker."
	[
	spawnflags(flags)  =
		[
		1: "[1] Don't remove template entities" : 0
		2: "[2] Preserve entity names (Don't do name fixup)" : 1
		]

	template01(target_destination) : "Template 1"
	template02(target_destination) : "Template 2"
	template03(target_destination) : "Template 3"
	template04(target_destination) : "Template 4"
	template05(target_destination) : "Template 5"
	template06(target_destination) : "Template 6"
	template07(target_destination) : "Template 7"
	template08(target_destination) : "Template 8"
	template09(target_destination) : "Template 9"
	template10(target_destination) : "Template 10"
	template11(target_destination) : "Template 11"
	template12(target_destination) : "Template 12"
	template13(target_destination) : "Template 13"
	template14(target_destination) : "Template 14"
	template15(target_destination) : "Template 15"
	template16(target_destination) : "Template 16"

	// Inputs
	input ForceSpawn(void) : "Spawn an instance of the template at the original position."

	// Outputs
	output OnEntitySpawned(void) : "Fired after spawning an instance of this template."
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/ficool2/point_tesla")
	color(200 200 0)
	line(255 255 0, targetname, m_SourceEntityName)
	sphere(m_flRadius)
= point_tesla: "An entity that creates tesla lightning arcs around its origin."
	[
	m_bon(choices) : "Start Enabled" : 0 : "Should the tesla start active?" =
		[
		0: "No"
		1: "Yes"
		]

	m_sourceentityname(target_destination) : "Source Entity" : : "If specified, tesla lightning will originate from the specified entity. Otherwise, they originate from this entity."
	m_soundname(sound) : "Sound Name" : "DoSpark" : "Sound to be played whenever lightning is created."
	texture(sprite) : "Sprite Name" : "sprites/physbeam.vmt" : "Material to use for the tesla lightning beams."
	m_color(color255) : "Color" : "255 255 255"
	m_flradius(float) : "Radius" : 200 : "Radius around the origin to find a point to strike with a tesla lightning beam."
	beamcount_min(integer) : "Min # of Beams" : 6 : "Minimum number of tesla lightning beams to create when creating an arc."
	beamcount_max(integer) : "Max # of Beams" : 8 : "Maximum number of tesla lightning beams to create when creating an arc."
	thick_min(float) : "Min Beam Width" : 4 : "Minimum width of the tesla lightning beams."
	thick_max(float) : "Max Beam Width" : 5 : "Maximum width of the tesla lightning beams."
	lifetime_min(float) : "Min Time Visible" : "0.3" : "Minimum lifetime of the tesla lightning beams."
	lifetime_max(float) : "Max Time Visible" : "0.3" : "Maximum lifetime of the tesla lightning beams."
	interval_min(float) : "Min Time Between Arcs" : "0.5" : "Minimum time delay between random arcing."
	interval_max(float) : "Max Time Between Arcs" : 2 : "Maximum time delay between random arcing."

	// Inputs
	input TurnOn(void) : "Turn emitter on."
	input TurnOff(void) : "Turn emitter off."
	input DoSpark(void) : "Force a single arc."
	]

@PointClass base(BaseEntityPoint) 
	color(0 100 250)
	line(0 100 250, targetname, target)
	iconsprite("editor/ficool2/point_velocitysensor")
= point_velocitysensor: "An entity that detects and outputs an entity's velocity."
	[
	target(target_destination) : "Target Entity Name" : : "Name of the entity whose velocity will be sensed."
	axis(vecline) : "Measurement Axis"
	enabled(choices) : "Start Enabled" : 1 : "Whether or not to start enabled and active." =
		[
		0: "No"
		1: "Yes"
		]


	// Inputs
	input Enable(void) : "Enable the sensor."
	input Disable(void) : "Disable the sensor."

	// Outputs
	output Velocity(float) : "Fired when the Target's Velocity changes, passing the new magnitude of the velocity."
	]

@PointClass base(BaseEntityPoint) 
	studioprop("models/editor/camera.mdl")
	color(200 0 0)
	frustum(fov, 16, 256, 255 255 255 10, -1)
	line(255 255 0, targetname, target)
	line(255 255 0, targetname, moveto)
= point_viewcontrol: "A camera entity that controls the player's view. While it's active, the player will see out of the camera."
	[
	target(target_destination) : "Entity to Look At" : : "Name of the entity that the camera should point at and track while active."
	targetattachment(string) : "Target Attachment Name" : : "If set, the camera will focus on the specified attachment on the 'Entity to Look At'."
	wait(integer) : "Hold Time" : 10 : "The amount of time the camera should control the player's view for, after which it deactivates itself. If the camera should stay" + " active until told to deactive, set the 'Infinite Hold Time' spawnflag."
	moveto(target_destination) : "Path Corner" : : "The first path corner in a track that the camera should move along once it's activated. If not specified, the camera won't move."
	interpolatepositiontoplayer(choices) : "Interpolate Position To Player" : 0 : "Gradually interpolate player's position to here on start. (Episodic only)" =
		[
		0: "No"
		1: "Yes"
		]

	spawnflags(flags)  =
		[
		1: "[1] Start At Player" : 1
		2: "[2] Follow Player" : 1
		4: "[4] Freeze Player" : 0
		8: "[8] Infinite Hold Time" : 0
		16: "[16] Snap to goal angles" : 0
		32: "[32] Make Player non-solid" : 0
		64: "[64] Interruptable by Player" : 0
		]

	speed(string) : "Initial Speed" : 0 : "The starting speed that the camera moves at, if it's on a path track."
	acceleration(string) : "Acceleration units/sec^2" : 500 : "The speed at which the camera accelerates to path corner's desired speeds."
	deceleration(string) : "Stop Deceleration units/sec^2" : 500 : "The speed at which the camera decelerates to path corner's desired speeds."
	dontsetplayerview(choices) : "Don't set player view" : 0 : "Prevents this point_viewcontrol from actually controlling the player's view. FOV, player-affecting spawnflags, etc. may still ha" + "ppen." =
		[
		0: "No"
		1: "Yes"
		]


	// Inputs
	input Enable(void) : "Enable the point_viewcontrol, and start controlling the player's view."
	input Disable(void) : "Disable the point_viewcontrol, and stop controlling the player's view."

	// Outputs
	output OnEndFollow(void) : "Fired when the point_viewcontrol deactivates, due to the Disable input being received, the Entity to Look At being destroyed, or" + " the Hold Time expiring."
	]

@PointClass base(BaseEntityPoint) 
	color(200 0 0)
	studioprop("models/editor/camera.mdl")
	frustum(fov, 16, 256, 255 255 255 10, -1)
	line(255 255 0, targetname, target_entity)
= point_viewcontrol_multiplayer: "A camera entity that controls all players' views. While it's active, the players will see out of the camera."
	[
	fov(float) : "Field of view" : 90 : "Player FOV"
	fov_rate(float) : "Seconds to reach FOV target" : 1 : "Amount of time it should take to reach the specified FOV"
	target_entity(target_destination) : "Target Entity" : : "Entity to move to. (End of move will match origin and angles)."
	interp_time(float) : "Seconds to reach target entity" : 1 : "Amount of time it should take to reach the target entity's origin and angles."
	spawnflags(flags)  =
		[
		1: "[1] Disable when move finished" : 1
		2: "[2] Set FOV" : 0
		]


	// Inputs
	input Enable(void) : "Enable the point_viewcontrol_multiplayer, and start controlling the players' view."
	input Disable(void) : "Disable the point_viewcontrol_multiplayer, and stop controlling the players' view."
	input StartMovement(void) : "Start the movement to the target entity."
	]

@PointClass base(BaseEntityPoint) 
	studioprop("models/editor/camera.mdl")
= point_viewcontrol_survivor: "A camera entity that controls the player's view. Travels from camera position to a first-person view on input."
	[
	fov(float) : "Field of view" : 90 : "Player FOV (if Set FOV spawnflag is set)"
	fov_rate(float) : "Seconds to reach FOV target" : "1.0" : "Amount of time it should take to reach the specified FOV"
	spawnflags(flags)  =
		[
		1: "[1] Disable when move finished" : 1
		2: "[2] Set FOV" : 0
		]


	// Inputs
	input Enable(string) : "Enable the point_viewcontrol, and start controlling the player's view. Pass a survivor name to control that survivor's view.(ie " + "'!zoey')"
	input Disable(void) : "Disable the point_viewcontrol, and stop controlling the player's view."
	input StartMovement(void) : "Start the movement to first-person view."
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/fog_controller.vmt")
	color(255 255 255)
= postprocess_controller: "An entity that controls the postprocess settings in the map."
	[
	fadetime(float) : "Fade-in time" : 2
	localcontraststrength(float) : "Local contrast strength [-1..x]" : 0
	localcontrastedgestrength(float) : "Local contrast edge strength [0..1]" : 0
	vignettestart(float) : "Vignette start distance [0..1]" : "0.8"
	vignetteend(float) : "Vignette end distance [0..x]" : "1.1"
	vignetteblurstrength(float) : "Vignette blur strength [0..1]" : 0
	fadetoblackstrength(float) : "Fade to black strength [0..1]" : 0
	grainstrength(float) : "Film grain strength [0..x]" : 0
	spawnflags(flags)  =
		[
		1: "[1] Master (Has priority if multiple postprocess_controllers exist)" : 0
		]


	// Inputs
	input SetLocalContrastStrength(float) : "Set the local contrast strength."
	input SetLocalContrastEdgeStrength(float) : "Set the local contrast strength at the edge of the screen (controlled by vignette)."
	input SetVignetteStart(float) : "Set the vignette start distance (from screen center)."
	input SetVignetteEnd(float) : "Set the vignette end distance."
	input SetVignetteBlurStrength(float) : "Set the strength of the desaturated blur on the vignette."
	input SetFadeToBlackStrength(float) : "Set the fadeout strength."
	]

@PointClass base(Origin, Angles, DetailPropBase) 
	studioprop()
= prop_detail: "Allows manually placing model-based detail props. These are normally generated by VBSP on materials with %detailtype set."
	[
	model(studio) : "World model" : : "The model to use for this prop."
	]

@PointClass base(Origin, Angles, DetailPropBase) 
	iconsprite("editor/ficool2/prop_detail_sprite")
	wirebox(position_ul, position_lr)
= prop_detail_sprite: "Allows manually placing sprite-based detail props. These are normally generated by VBSP on materials with %detailtype set."
	[
	position_ul(vector) : "Upper-Left Position" : "-10 20" : "Position of the upper-left corner of the sprite in the world."
	position_lr(vector) : "Lower-Right Position" : "10 0" : "Position of the lower-right corner of the sprite in the world."
	tex_ul(vector) : "Upper-Left Sprite Position" : "0 0" : "Position of the upper-left corner of the sprite in the texture."
	tex_size(vector) : "Sprite Size" : "64 64" : "Width and height of the sprite in the texture."
	tex_total_size(float) : "Spritesheet Size" : 512 : "The width of the spritesheet texture. \nValve Bug: the aspect ratio must match the default detail/detailsprites!"
	]

@PointClass base(Angles) 
	color(255 255 0)
	sphere(fademindist)
	sphere(fademaxdist)
	studioprop()
= prop_static: "A prop that doesn't move and doesn't animate."
	[
	model(studio) : "World Model" : : "Specify the model to place."
	skin(integer) : "Skin" : 0 : "Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead o" + "f the default."
	renderamt(integer) : "Alpha" : 255 : "Alpha of the fade, where 0 = fully transparent and 255 = fully opaque."
	rendercolor(color255) : "Color (R G B)" : "255 255 255"
	solid(choices) : "Collisions" : 6 =
		[
		0: "Not Solid"
		1: "Use BSP (QPhysics)"
		2: "Use Bounding Box"
		3: "Use Oriented Bounding Box"
		4: "Use Oriented Bounding Box, constrained to Yaw only"
		6: "Use VPhysics"
		]

	linedivider_levels(string) readonly : "----------------------------------------------------------------------------------------------------------"
	mincpulevel(choices) : "Minimum CPU Level" : 0 =
		[
		0: "default (low)"
		1: "low"
		2: "medium"
		3: "high"
		]

	maxcpulevel(choices) : "Maximum CPU Level" : 0 =
		[
		0: "default (high)"
		1: "low"
		2: "medium"
		3: "high"
		]

	mingpulevel(choices) : "Minimum GPU Level" : 0 =
		[
		0: "default (very low)"
		1: "very low"
		2: "low"
		3: "medium"
		4: "high"
		]

	maxgpulevel(choices) : "Maximum GPU Level" : 0 =
		[
		0: "default (high)"
		1: "very low"
		2: "low"
		3: "medium"
		4: "high"
		]

	mindxlevel(choices) : "Minimum DX Level" : 0 =
		[
		0: "default (lowest)"
		70: "dx7"
		80: "dx8.0 (4600Ti)"
		81: "dx8.1 (FX5200)"
		90: "dx9 SM2.0"
		95: "dx9 SM3.0"
		]

	maxdxlevel(choices) : "Maximum DX Level" : 0 =
		[
		0: "default (highest)"
		60: "dx6"
		70: "dx7"
		80: "dx8.0 (4600Ti)"
		81: "dx8.1 (FX5200)"
		90: "dx9 SM2.0"
		95: "dx9 SM3.0"
		]

	disablex360(choices) : "Disable on Xbox 360" : 0 =
		[
		0: "No"
		1: "Yes"
		]

	linedivider_light(string) readonly : "----------------------------------------------------------------------------------------------------------"
	disableshadows(choices) : "Disable Shadows" : 0 =
		[
		0: "No"
		1: "Yes"
		]

	disablevertexlighting(choices) : "Disable Vertex lighting" : 0 : "Disable per-vertex lighting on this prop." =
		[
		0: "No"
		1: "Yes"
		]

	disableselfshadowing(choices) : "Disable Self-Shadowing" : 0 : "When vertex lighting is enabled, prevent the geometry from self-shadowing -- casting shadows onto itself." =
		[
		0: "No"
		1: "Yes"
		]

	ignorenormals(choices) : "Ignore Surface Normal" : 0 : "When vertex lighting is enabled, ignore the surface normal of faces when calculating the vertex lighting. Useful for thin, trans" + "lucent objects such as leaves on foliage props." =
		[
		0: "No"
		1: "Yes"
		]

	drawinfastreflection(choices) : "Render in Fast Reflections" : 0 : "If enabled, causes this entity/prop to to render in fast water reflections (i.e. when a water material specifies $reflectonlymar" + "kedentities) and in the world impostor pass." =
		[
		0: "No"
		1: "Yes"
		]

	lightingorigin(target_destination) : "Lighting Origin" : : "Select an info_lighting to specify a location to sample lighting from, instead of using this entity's origin."
	linedivider_fade(string) readonly : "----------------------------------------------------------------------------------------------------------"
	screenspacefade(choices) : "Screen Space Fade" : 0 : "The method by which the fading distance should be determined. If 'No', the fade distances is the distance from the player's view" + " to the object, in inches. If 'Yes', the fade distance is the size of the object onscreen, in pixels." =
		[
		0: "No"
		1: "Yes"
		]

	fademindist(float) : "Start Fade Dist/Pixels" : -1 : "Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number" + " of pixels wide covered by the prop when it starts to fade."
	fademaxdist(float) : "End Fade Dist/Pixels" : 0 : "Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *min" + "imum* number of pixels wide covered by the prop when it fades."
	fadescale(float) : "Fade Scale" : 1 : "If you specify a fade in the worldspawn, or if the engine is running under dx7 [hl2/ep1/portal] or dx8 [ep2/tf], then the engine" + " will forcibly fade out props even if fademindist/fademaxdist isn't specified. This scale factor gives you some control over the" + " fade. Using 0 here turns off the forcible fades. Numbers smaller than 1 cause the prop to fade out at further distances, and gr" + "eater than 1 cause it to fade out at closer distances."
	]

@PointClass base(BaseEntityPoint, DXLevelChoice, SystemLevelChoice) 
	studio("models/editor/scriptedsequence.mdl")
	color(255 0 255)
	sphere(m_flRadius)
= scripted_sequence: "Grabs an NPC and makes them play a specified set of animations. The NPC can be told to move to the scripted sequence position or" + " can be told to play the script wherever they currently are. Multiple scripted sequences of the same name will frame-synchronize" + " in the action animation once all the actors have moved to position. This allows tight interaction between actors (one actor gra" + "bbing another, hitting them, etc.) The flow is as follows:\n\n1) Move to position using the specified movement animation. If 'Mo" + "ve to Position' is set to NONE, skip to step 2.\n2) If forced to wait for another actor to move to position, play the pre-action" + " idle animation, otherwise skip to step 3. If there is no pre-action idle specified, ACT_IDLE is used.\n3) Fire the OnBeginSeque" + "nce output.\n4) Play the action animation. If no action animation is specified, skip to step 5.\n5) Play the post-action idle an" + "imation. If none is specified, skip to step 6. If the 'Loop in Post Idle' spawnflag is set, keep playing the post-action idle un" + "til the script is cancelled. If no post-action idle animation is specified, ACT_IDLE is used.\n6) Fire the OnEndSequence output." + "\n7) If a next script to play is specified, hand the NPC to the next script and repeat this process for that script.\n\nThe Move" + "ToPosition input runs steps 1 and 2, then waits while playing the pre-action idle animation until the BeginSequence input is rec" + "eived.\n\nIf the sequence has motion extraction in it, set the 'Don't Teleport NPC On End' spawnflag."
	[
	m_iszentity(target_destination) : "Target NPC" : : "The name or class name (such as 'npc_zombie') of an NPC to use for this script."
	m_iszidle(string) : "Pre Action Idle Animation" : : "The name of the sequence (such as 'idle01') or activity (such as 'ACT_IDLE') to play before the action animation if the NPC must" + " wait for the script to be triggered. Use 'Start on Spawn' flag or MoveToPosition input to play this idle animation."
	m_iszentry(string) : "Entry Animation" : : "The name of the sequence (such as 'reload02') or activity (such as 'ACT_RELOAD') to play when the sequence starts, before transi" + "tioning to play the main action sequence."
	m_iszplay(string) : "Action Animation" : : "The name of the main sequence (such as 'reload02') or activity (such as 'ACT_RELOAD') to play."
	m_iszpostidle(string) : "Post Action Idle Animation" : : "The name of the sequence (such as 'idle01') or activity (such as 'ACT_IDLE') to play after the action animation. If the ''Loop i" + "n Post Idle'' spawnflag is not ticked, this will act as an Exit Animation, similar to the Entry Animation."
	m_iszcustommove(string) : "Custom Move Animation" : : "Used in conjunction with the 'Custom movement' setting for the 'Move to Position' property, specifies the sequence (such as 'cro" + "uch_run01') or activity (such as 'ACT_RUN') to use while moving to the scripted position."
	m_bloopactionsequence(choices) : "Loop Action Animation?" : 0 : "Loops the action animation until the sequence is cancelled or interrupted." =
		[
		0: "No"
		1: "Yes"
		]

	m_bsynchpostidles(choices) : "Synch Post Idles?" : 0 =
		[
		0: "No"
		1: "Yes"
		]

	m_flradius(integer) : "Search Radius (0=everywhere)" : 0 : "Radius to search within for an NPC to use. 0 searches everywhere."
	m_flrepeat(integer) : "Repeat Rate ms" : 0
	m_fmoveto(choices) : "Move to Position" : 1 =
		[
		0: "No"
		1: "Walk"
		2: "Run"
		3: "Custom movement"
		4: "Instantaneous"
		5: "No - Turn to Face"
		]

	onplayerdeath(choices) : "On player death" : 0 : "What should this entity do if the player dies" =
		[
		0: "Do Nothing"
		1: "Cancel Script and return to AI"
		]

	m_isznextscript(target_destination) : "Next Script" : : "The name of the script to run immediately after this script completes. The NPC will not return to AI between the two scripts."
	m_bignoregravity(choices) : "Ignore Gravity on NPC during script" : 0 : "If this is set to 'Yes', the NPC will not be subject to gravity while playing this script." =
		[
		0: "No"
		1: "Yes"
		]

	m_bdisablenpccollisions(choices) : "Disable NPC collisions during script" : 0 : "Useful for when NPCs playing scripts must interpenetrate while riding on trains, elevators, etc. This only disables collisions b" + "etween the NPCs in the script and must be enabled on BOTH scripted_sequences." =
		[
		0: "No"
		1: "Yes"
		]

	spawnflags(flags)  =
		[
		4: "[4] Repeatable" : 0
		8: "[8] Leave Corpse" : 0
		16: "[16] Start on Spawn" : 0
		32: "[32] No Interruptions" : 0
		64: "[64] Override AI" : 0
		128: "[128] Don't Teleport NPC On End" : 0
		256: "[256] Loop in Post Idle" : 0
		512: "[512] Priority Script" : 0
		1024: "[1024] Search Cyclically" : 0
		2048: "[2048] Don't Complain" : 0
		4096: "[4096] Allow actor death without stopping scene" : 0
		]


	// Inputs
	input BeginSequence(void) : "Summons an NPC to act out the scripted sequence."
	input MoveToPosition(void) : "Summons an NPC to the script location. They will play their scripted idle (or ACT_IDLE if none is specified) until BeginSequence" + " is triggered."
	input CancelSequence(void) : "Stops the scripted sequence. If fired after a sequence starts, this input will not take effect until the NPC finishes playing th" + "e scripted action animation."

	// Outputs
	output OnBeginSequence(void) : "Fires when the action animation begins playing."
	output OnEndSequence(void) : "Fires when the action animation completes."
	output OnCancelSequence(void) : "Fires when the sequence is cancelled."
	output OnCancelFailedSequence(void) : "Fires when the sequence is cancelled without ever playing (OnCancelSequence will also fire)."
	output OnScriptEvent01(void) : "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 1 } in the QC."
	output OnScriptEvent02(void) : "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 2 } in the QC."
	output OnScriptEvent03(void) : "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 3 } in the QC."
	output OnScriptEvent04(void) : "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 4 } in the QC."
	output OnScriptEvent05(void) : "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 5 } in the QC."
	output OnScriptEvent06(void) : "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 6 } in the QC."
	output OnScriptEvent07(void) : "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 7 } in the QC."
	output OnScriptEvent08(void) : "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 8 } in the QC."
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/shadow_control.vmt")
	color(200 0 0)
	sphere(distance)
= shadow_control: "An entity to control the shadows in the map."
	[
	angles(angle) : "Pitch Yaw Roll (Y Z X)" : "80 30 0" : "This is the shadow direction. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, and roll is the rotati" + "on around the X axis."
	color(color255) : "Shadow Color" : "128 128 128" : "This is the color of the shadows."
	distance(float) : "Maximum Distance" : 75 : "This is the maximum distance the shadow is allowed to cast, in Source units."
	disableallshadows(choices) : "All Shadows Disabled" : 0 =
		[
		0: "No"
		1: "Yes"
		]

	enableshadowsfromlocallights(choices) : "Enable Shadows From Local Lights" : 1 =
		[
		0: "No"
		1: "Yes"
		]


	// Inputs
	input color(color255) : "Set the shadow color."
	input direction(vector) : "Set the shadow direction."
	input SetDistance(float) : "Set the maximum shadow cast distance."
	input SetAngles(string) : "Set the shadow direction."
	input SetShadowsDisabled(integer) : "Set shadows disabled state."
	input SetShadowsFromLocalLightsEnabled(integer) : "Set local light shadows enabled state."
	]

@PointClass base(BaseEntityPoint) 
	color(173 223 245)
	studioprop("models/editor/sky_camera.mdl")
	sphere(fogstart)
	sphere(fogend)
= sky_camera: "An entity used to control the 3D Skybox. Its origin is used to determine the 3D Skybox's position relative to the map. Place thi" + "s entity, in the 3D Skybox, at the point where the origin of the map should be."
	[
	parentname(target_destination) : "Parent" : : "The name of the entity to move with. NOTE: sky_camera's position is normally only updated on spawn, so this may not work."
	scale(integer) : "3D Skybox scale" : 16 : "Scale of the skybox."
	fogenable(choices) : "Fog Enable" : 0 =
		[
		0: "No"
		1: "Yes"
		]

	fogblend(choices) : "Fog Blend" : 0 =
		[
		0: "No"
		1: "Yes"
		]

	use_angles(choices) : "Use Angles for Fog Dir" : 0 =
		[
		0: "No"
		1: "Yes"
		]

	use_angles_for_sky(choices) : "Use Angles for Sky" : 0 : "Uses angles for actual skybox rotation, as if the world were tilted on this entity's axis." =
		[
		0: "No"
		1: "Yes"
		]

	clip_3d_skybox_near_to_world_far(choices) : "Clip 3D sky near plane to world far plane" : 0 =
		[
		0: "No"
		1: "Yes"
		]

	clip_3d_skybox_near_to_world_far_offset(integer) : "3D sky near plane offset" : 0 : "Offset for the near clip plane for the 3D sky in world units.  This is only used if the above field is true. Negative values to " + "pull closer, etc."
	fogcolor(color255) : "Primary Fog Color" : "255 255 255"
	fogcolor2(color255) : "Secondary Fog Color" : "255 255 255"
	fogdir(string) : "Primary Fog Direction" : "1 0 0"
	fogstart(float) : "Fog Start" : 500 : "Distance at which the skybox fog should start."
	fogend(float) : "Fog End" : 2000 : "Distance at which the skybox fog should be fully opaque."
	fogmaxdensity(float) : "Fog Max Density [0..1]" : 1
	hdrcolorscale(float) : "HDR color scale." : 1 : "float value to multiply fog color by when running in HDR mode."

	// Inputs
	input DeactivateSkybox(void) : "Stops making this sky_camera the active skybox if it is currently the active skybox, which causes the sky to clear."
	]

@PointClass base(BaseEntityPoint) = sound_mix_layer: "Set a mix layer to a specific value."
	[
	mixlayername(string) : "Mix Layer Name" : : "Name of the mix layer to be setting the level of."
	level(float) : "Level" : "0.0" : "Set the Mix Layer Level"

	// Inputs
	input Level(float) : "Set the Mix Layer Level"
	]

@PointClass base(BaseEntityPoint, Angles) 
	size(-2 -2 -2, 2 2 2)
	color(200 0 0)
= spark_shower: "Temporary spark shower effect created by env_explosions.When spawned, moves in the forward direction whilst producing sparks, un" + "til it fades out."
	[
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/tanktrain_ai.vmt")
	line(255 255 255, targetname, target)
= tanktrain_ai: "Tank movement AI. This takes control of a func_tracktrain, moving it to follow a target."
	[
	target(target_destination) : "Train Name" : : "The func_tracktrain to control."
	startsound(sound) : "Start Moving Sound" : "vehicles/diesel_start1.wav"
	enginesound(sound) : "Engine Loop Sound" : "vehicles/diesel_turbo_loop1.wav"
	movementsound(sound) : "Vehicle Movement Sound" : "vehicles/tank_treads_loop1.wav"

	// Inputs
	input TargetEntity(string) : "Change the tank to target the specified entity."
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/tanktrain_aitarget.vmt")
	line(255 255 255, targetname, target)
	line(255 255 255, targetname, newtarget)
= tanktrain_aitarget: "An entity that changes the target of a func_tank or tanktrain_ai entity. This simply fires TargetEntity on the tank when this is" + " USEd."
	[
	target(target_destination) : "Tank AI Entity" : : "The tanktrain_ai entity to change the target of."
	newtarget(target_destination) : "New Target Entity" : : "The entity to tell the tanktrain_ai to target."
	]

@PointClass base(BaseEntityPoint) 
	color(255 255 255)
	iconsprite("editor/ficool2/test_traceline")
= test_traceline: "A debugging tool for testing tracelines. Pretty much useless for other people. This spins wildly, tracing lines to the closest b" + "rush."
	[
	]

@SolidClass base(BaseEntityBrush, EnableDisable) = trigger_brush: "A trigger volume that can be used, and can relay touches to its parent."
	[
	spawnflags(flags)  =
		[
		1: "[1] Ignore Players" : 1
		2: "[2] Ignore NPCs" : 1
		4: "[4] Ignore func_pushable" : 1
		8: "[8] Ignore touches" : 1
		16: "[16] Ignore +USE" : 1
		]

	inputfilter(integer) : "Input Flags" : 0 : "Filters what kind of entities can interact with this. Set this in spawnflags instead."
	dontmessageparent(choices) : "Proxy To Parent" : 0 : "Relay touching or USEing this entity to the parent entity. The input filters will still apply." =
		[
		1: "No"
		0: "Yes"
		]


	// Outputs
	output OnStartTouch(void) : "Fired when something touches us."
	output OnEndTouch(void) : "Fired when something stops touching us."
	output OnUse(void) : "Fired when the player (or I/O) USEs us."
	]

@PointClass base(BaseEntityPoint) = upgrade_spawn
	[
	laser_sight(integer) : "Laser Sight" : 1
	upgradepack_incendiary(integer) : "UpgradePack - Incendiary" : 1
	upgradepack_explosive(integer) : "UpgradePack - Explosive" : 1
	spawnflags(flags)  =
		[
		1: "[1] Enable Physics on spawned item" : 0
		2: "[2] Spawned Item Must Exist" : 0
		]

	]

@PointClass base(BaseEntityPoint) 
	color(200 200 0)
	studioprop("models/editor/vgui_arrows.mdl")
	sphere(width)
	sphere(height)
= vgui_screen: "A VGUI screen. Useful for in-world monitors."
	[
	panelname(string) : "Panel Name" : : "The type of display to show."
	overlaymaterial(material) : "Overlay Material" : : "Name of a material to overlay over the top of the VGUI screen. NOTE: This material must write Z for the VGUI screen to work."
	width(integer) : "Panel Width in World (Green)" : 256 : "Width of the panel in units."
	height(integer) : "Panel Height in World (Blue)" : 128 : "Height of the panel in units."
	istransparent(choices) : "Is Transparent?" : 0 : "Set this to true if you would like your background to be invisible instead of a black fill." =
		[
		0: "No"
		1: "Yes"
		]


	// Inputs
	input SetActive(void) : "Make the vgui screen visible."
	input SetInactive(void) : "Make the vgui screen invisible."
	]

@PointClass base(BaseEntityPoint) 
	color(200 200 0)
	studioprop("models/editor/vgui_arrows.mdl")
	sphere(width)
	sphere(height)
= vgui_slideshow_display: "Slideshow Display"
	[
	displaytext(string) : "Display Text"
	directory(string) : "Image Directory (materials/vgui/...)" : "slideshow"
	minslidetime(float) : "Min Slide Time" : "0.5" : "Minimum amount of random time that a slide is displayed."
	maxslidetime(float) : "Max Slide Time" : "0.5" : "Maximum amount of random time that a slide is displayed."
	cycletype(choices) : "Cycle Type" : 0 =
		[
		0: "Random"
		1: "Forward"
		2: "Backward"
		]

	nolistrepeat(choices) : "No List Repeat" : 0 =
		[
		0: "Allow List Repeats"
		1: "No List Repeats"
		]

	width(integer) : "Panel width" : 256 : "Width of the panel in units."
	height(integer) : "Panel height" : 128 : "Height of the panel in units."

	// Inputs
	input Enable(void) : "Make slideshow visible."
	input Disable(void) : "Make slideshow invisible."
	input SetDisplayText(string) : "Sets the display text."
	input RemoveAllSlides(void) : "Removes all slides from slideshow."
	input AddSlides(string) : "Adds slides by keyword."
	input SetMinSlideTime(float) : "Sets min random time between slides."
	input SetMaxSlideTime(float) : "Sets max random time between slides."
	input SetCycleType(integer) : "0 - random, 1 - forward, 2 - backward"
	input SetNoListRepeat(bool) : "Sets if lists can be randomly picked twice in a row."
	]

@PointClass base(BaseEntityPoint) 
	iconsprite("editor/waterlodcontrol.vmt")
	sphere(cheapwaterstartdistance)
	sphere(cheapwaterenddistance)
	color(64 64 200)
= water_lod_control: "An entity used to control the LOD behavior of any water in the map. If your map has water, this entity is required."
	[
	cheapwaterstartdistance(float) : "Start Transition to Cheap Water" : 1000 : "This is the distance from the camera that water will start transitioning to cheap water, in unit."
	cheapwaterenddistance(float) : "End Transition to Cheap Water" : 2000 : "This is the distance from the camera that water will finish transitioning to cheap water, in unit."

	// Inputs
	input SetCheapWaterStartDistance(float) : "Set the distance that water starts transitioning to cheap water."
	input SetCheapWaterEndDistance(float) : "Set the distance that water finishes transitioning to cheap water."
	]

@PointClass base(BaseEntityPoint) = weapon_item_spawn
	[
	item1(integer) : "Ammo pile" : 1
	item2(integer) : "First aid kit" : 0
	item3(integer) : "Molotov Cocktail" : 1
	item4(integer) : "Pain Pills" : 1
	item5(integer) : "Pipe Bomb" : 1
	item6(integer) : "Oxygen Tank" : 0
	item7(integer) : "Propane Tank" : 0
	item8(integer) : "Gasoline Can" : 0
	item11(integer) : "Adrenaline" : 1
	item12(integer) : "Defibrillator" : 0
	item13(integer) : "Boomer Bile" : 0
	item16(integer) : "Chainsaw" : 0
	item17(integer) : "Grenade Launcher" : 0
	item18(integer) : "M60 Machinegun" : 0
	melee_weapon(string) : "Melee Weapon" : : "Options: 'Any' or a comma-delimited string of melee weapon script names. Leave blank for none."
	spawnflags(flags)  =
		[
		1: "[1] Enable Physics on spawned item" : 0
		2: "[2] Spawned Item Must Exist" : 0
		8: "[8] Infinite Items" : 0
		]

	]

@SolidClass base(BaseEntity, ResponseContext) = worldspawn: "This is the world entity. Each map can only contain one, and it's automatically created for you."
	[
	message(string) : "Map Description / Title"
	skyname(string) : "SkyBox Texture Name" : "sky_l4d_rural02_hdr" : "Texture used for the 2D skybox."
	chaptertitle(string) : "Chapter Title" : : "Chapter Title that appears onscreen when this level starts."
	startdark(choices) : "Level Fade In" : 0 =
		[
		0: "No"
		1: "Yes"
		]

	gametitle(choices) : "Display Game Title" : 0 : "Game Title that appears onscreen when this level starts." =
		[
		0: "No"
		1: "Yes"
		]

	newunit(choices) : "New Level Unit" : 0 : "Used to clear out savegame data of previous levels to keep the savegame size as small as possible. Only set it to Yes if the pla" + "yer cannot return to any previous levels." =
		[
		0: "No, keep current"
		1: "Yes, clear previous levels"
		]

	timeofday(choices) : "Time of day" : 0 =
		[
		0: "Midnight"
		1: "Dawn"
		2: "Morning"
		3: "Afternoon"
		4: "Dusk"
		5: "Evening"
		]

	startmusictype(choices) : "Start Music Type" : 0 =
		[
		0: "Mission Start"
		1: "Check Point"
		]

	musicpostfix(string) : "Music Post-Fix String" : "Waterfront"
	maxoccludeearea(float) : "Max occludee area" : 0 : "[Used on PC] Prevents occlusion testing for entities that take up more than X% of the screen."
	minoccluderarea(float) : "Min occluder area" : 0 : "[Used on PC] Prevents occluders from being used if they take up less than X% of the screen."
	maxoccludeearea_x360(float) : "Max occludee area (Xbox)" : 0 : "[Used on 360] Prevents occlusion testing for entities that take up more than X% of the screen."
	minoccluderarea_x360(float) : "Min occluder area (Xbox)" : 0 : "[Used on 360] Prevents occluders from being used if they take up less than X% of the screen."
	maxpropscreenwidth(float) : "Start Fade Pixels" : -1 : "Number of pixels wide at which all props in the level start to fade (<0 = use fademaxdist). This number is ignored if the prop h" + "as a specific fade distance specified."
	minpropscreenwidth(float) : "End Fade Pixels" : 0 : "Minimum number of pixels wide at which the prop is visible (0 = don't fade out). This number is ignored if the prop has a specif" + "ic fade distance specified."
	detailvbsp(string) : "Detail.vbsp file" : "detail.vbsp" : "Detail .vbsp file to use for emitting detail props (found in directory <root>/modname)"
	detailmaterial(material) : "Detail material file" : "detail/detailsprites" : "Material for detail sprites to use for drawing detail props"
	coldworld(choices) : "World is cold" : 0 : "Emit steam from NPC's mouths and similar effects." =
		[
		0: "No"
		1: "Yes"
		]

	]

@BaseClass base(BaseEntityAnimating, DamageFilter) = BaseLogicalNPC
	[
	health(integer) : "Health" : : "Overrides the NPC's default health. Cannot be higher than Max Health."
	max_health(integer) : "Max Health" : : "Overrides the NPC's max health. Health cannot exceed this amount."
	squadname(string) : "Squad Name" : : "NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attac" + "king and covering each other."
	hintgroup(string) : "Hint Group" : : "Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with mat" + "ching hint group names will be considered by this NPC."
	hintlimiting(choices) : "Hint Limit Nav" : 0 : "Limits NPC to using specified hint group for navigation requests, but does not limit local navigation." =
		[
		0: "No"
		1: "Yes"
		]

	additionalequipment(choices) : "Weapon Held" : 0 : "Gives the NPC a weapon. NPCs may attack oddly or not attack if they don't know how to use a particular weapon." =
		[
		0: "Nothing"
		]

	relationship(string) : "Relationship" : : "Changes whether this NPC likes or dislikes certain others. Format is: <string|targetname or classname> <string|disposition> <int" + "eger|rank>. Values for disposition are: D_HT (Hate), D_FR (Fear), D_LI (Like), D_NU, (Neutral)."
	spawnflags(flags)  =
		[
		1: "[1] Wait Till Seen" : 0
		2: "[2] Gag (No IDLE sounds until angry)" : 0
		4: "[4] Fall to ground (unchecked means *teleport* to ground)" : 1
		8: "[8] Drop Healthkit" : 0
		16: "[16] Efficient - Don't acquire enemies or avoid obstacles" : 0
		128: "[128] Wait For Script" : 0
		256: "[256] Long Visibility/Shoot" : 0
		512: "[512] Fade Corpse" : 1
		1024: "[1024] Think outside PVS" : 0
		2048: "[2048] Template NPC (used by npc_maker, will not spawn)" : 0
		4096: "[4096] Do Alternate collision/player avoidance for this NPC (largely obsolete, use Start/StopScripting)" : 0
		8192: "[8192] Don't drop weapons" : 0
		16384: "[16384] Ignore player push (dont give way to player)" : 0
		]

	sleepstate(choices) : "Sleep State" : 0 : "Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'." =
		[
		0: "None"
		1: "Waiting for threat"
		2: "Waiting for PVS"
		3: "Waiting for input, ignore PVS"
		4: "Auto PVS"
		5: "Auto PVS after PVS"
		]

	wakeradius(float) : "Wake Radius" : 0 : "Auto-wake if player within this distance"
	wakesquad(choices) : "Wake Squad" : 0 : "Wake all of the NPCs squadmates if the NPC is woken" =
		[
		0: "No"
		1: "Yes"
		]

	enemyfilter(filterclass) : "Enemy Filter" : : "Filter by which to filter potential enemies"
	ignoreunseenenemies(choices) : "Ignore unseen enemies" : 0 : "Prefer visible enemies, regardless of distance or relationship priority" =
		[
		0: "No"
		1: "Yes"
		]

	physdamagescale(float) : "Physics Impact Damage Scale" : "1.0" : "Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics."
	velocity(vector) : "Local Velocity" : : "Velocity generated by the entity, can cause strange behavior if changed with AddOutput."
	basevelocity(vector) : "Base Velocity" : : "Velocity to start with on spawn. Can be changed with AddOutput, where it will be immediately added."
	avelocity(vector) : "Angular Velocity" : : "Angular velocity to start with on spawn. Can be changed with AddOutput, where it will be immediately added."
	waterlevel(choices) : "Water Level" : 0 : "Current water level of the entity, can cause strange behavior if changed with AddOutput." =
		[
		0: "Not in Water"
		1: "Feet"
		2: "Waist"
		3: "Eyes"
		]


	// Inputs
	input SetRelationship(string) : "Changes this entity's relationship with another entity or class. Format: <entityname/classname> <D_HT/D_FR/D_LI/D_NU> <priority>"
	input SetEnemyFilter(target_destination) : "Changes this NPC's enemy filter to the named filter."
	input SetHealth(integer) : "Set this NPC's health."
	input PhysDamageScale(float) : "Sets the value that scales damage energy when this character is hit by a physics object. NOTE: 0 means this feature is disabled " + "for backwards compatibility."
	input Break(void) : "Makes the NPC die and disappear."
	input StartScripting(void) : "Enter scripting state. In this state, NPCs ignore a variety of stimulus that would make them break out of their scripts: They ig" + "nore danger sounds, ignore +USE, don't idle speak or respond to other NPC's idle speech, and so on."
	input StopScripting(void) : "Exit scripting state."
	input SetSquad(string) : "Set the name of this NPC's squad. It will be removed from any existing squad automatically. Leaving the parameter blank will rem" + "ove the NPC from any existing squad."
	input Wake(void) : "Wakes up the NPC if it is sleeping."
	input ForgetEntity(target_destination) : "Clears out the NPC's knowledge of a named entity."
	input GagEnable(void) : "Turn on the NPC Gag flag. NPC won't speak outside of choreographed scenes."
	input GagDisable(void) : "Turn off the NPC Gag flag."
	input IgnoreDangerSounds(float) : "Ignore danger sounds for the specified number of seconds."
	input HolsterWeapon(void) : "Force the NPC to holster their weapon. Ignored if the NPC is scripting, if the NPC's weapon is already holstered, or if the NPC " + "doesn't use weapons."
	input HolsterAndDestroyWeapon(void) : "Identical to HolsterWeapon, except the weapon is destroyed once it has been holstered and concealed."
	input UnholsterWeapon(void) : "Force the NPC to draw their weapon. Ignored if the NPC is scripting, if the NPC's weapon is already drawn, or if the NPC doesn't" + " use weapons."
	input ForceInteractionWithNPC(string) : "Force the NPC to use a dynamic interaction with another NPC. Parameter format: <target NPC name> <dynamic interaction name>"
	input UpdateEnemyMemory(string) : "Update (or Create) this NPC's memory of an enemy and its location"
	input BecomeRagdoll(void) : "This NPC will instantly become a ragdoll with ZERO force (just go limp). OnDeath, OnHalfHealth, etc. Outputs will **NOT** BE FIR" + "ED."

	// Outputs
	output OnDamaged(void) : "Fired when this NPC takes damage."
	output OnDeath(void) : "Fired when this NPC is killed."
	output OnHalfHealth(void) : "Fired when this NPC reaches half of its maximum health."
	output OnHearWorld(void) : "Fired when this NPC hears a sound (other than combat or the player)."
	output OnHearPlayer(void) : "Fired when this NPC hears the player."
	output OnHearCombat(void) : "Fired when this NPC hears combat sounds."
	output OnFoundEnemy(string) : "Fired when this NPC establishes line of sight to its enemy (outputs entity)."
	output OnLostEnemyLOS(void) : "Fired when this NPC loses line of sight to its enemy."
	output OnLostEnemy(void) : "Fired when this NPC loses its enemy. Usually due to the enemy being killed/removed, or because this NPC has selected a newer, mo" + "re dangerous enemy."
	output OnFoundPlayer(string) : "Fired when this NPC establishes line of sight to its enemy, and that enemy is a player (outputs player entity)."
	output OnLostPlayerLOS(void) : "Fired when this NPC loses line of sight to its enemy, and that enemy is a player."
	output OnLostPlayer(void) : "Fired when this NPC loses its enemy, and that enemy was a player. Usually due to the enemy being killed/removed, or because this" + " NPC has selected a newer, more dangerous enemy."
	output OnDamagedByPlayer(void) : "Fired when this NPC is hurt by a player."
	output OnDamagedByPlayerSquad(void) : "Fired when this NPC is hurt by a player OR by one of the player's squadmates."
	output OnDenyCommanderUse(void) : "Fired when this NPC has refused to join the player's squad."
	output OnSleep(void) : "Fired when this NPC enters a sleep state."
	output OnWake(void) : "Fired when this NPC comes out of a sleep state."
	output OnForcedInteractionStarted(void) : "Fired when the NPC starts a forced interaction."
	output OnForcedInteractionAborted(void) : "Fired when the NPC aborts a forced interaction for some reason (target NPC died, couldn't be pathed to, etc)"
	output OnForcedInteractionFinished(void) : "NPCs in actbusies can no longer perform dynamic interactions."
	]

@BaseClass base(BaseEntityPhysics, BreakableProp, SystemLevelChoice, BaseFadeProp) = BasePropPhysics: "For prop_physics-like entities."
	[
	spawnflags(flags)  =
		[
		1: "[1] Start Asleep" : 0
		2: "[2] Don't take physics damage" : 0
		4: "[4] Debris - Don't collide with the player or other debris" : 0
		8: "[8] Motion Disabled" : 0
		64: "[64] Enable motion on Physcannon grab" : 0
		128: "[128] Not affected by rotor wash" : 0
		256: "[256] Generate output on +USE " : 1
		512: "[512] Prevent pickup" : 0
		1024: "[1024] Prevent motion enable on player bump" : 0
		4096: "[4096] Debris with trigger interaction" : 0
		8192: "[8192] Force server-side (Multiplayer only)" : 0
		32768: "[32768] Autoaim target" : 0
		1048576: "[1048576] Physgun can ALWAYS pick up. No matter what." : 0
		]

	minhealthdmg(integer) : "Min Damage to Hurt" : 0 : "The prop will ignore any damage events if the damage is less than this amount."
	shadowcastdist(integer) : "Shadow Cast Distance" : 0 : "Use this to override how far this object casts shadows. 0 = default distance."
	physdamagescale(float) : "Physics Impact Damage Scale" : "0.1" : "Scales damage energy when this object is hit by a physics object. NOTE: 0 means this feature is disabled for backwards compatibi" + "lity.\nSet to 1.0 for materials as strong as flesh, smaller numbers indicate stronger materials."
	damagetype(choices) : "Impact damage type" : 0 =
		[
		0: "Blunt"
		1: "Sharp"
		]

	nodamageforces(choices) : "Damaging it Doesn't Push It" : 0 : "Used to determine whether or not damage should cause the brush to move." =
		[
		0: "No"
		1: "Yes"
		]

	inertiascale(float) : "Scale Factor For Inertia" : "1.0" : "Scales the angular mass of an object. Used to hack angular damage and collision response."
	massscale(float) : "Mass Scale" : 0 : "A scale multiplier for the object's mass."
	overridescript(string) : "Override Parameters" : : "A list of physics key/value pairs that are usually in a physics prop .qc file. Format is 'key,value,key,value,etc'."
	damagetoenablemotion(integer) : "Health Level to Override Motion" : 0 : "If specified, this object will start motion disabled. Once its health has dropped below this specified amount, it will enable mo" + "tion."
	forcetoenablemotion(float) : "Physics Impact Force to Override Motion" : 0 : "If specified, this object will start motion disabled. Any impact that imparts a force greater than this value on the physbox wil" + "l enable motion."
	puntsound(sound) : "Sound to make when punted."

	// Inputs
	input Wake(void) : "Wake up this physics object, if it is sleeping."
	input Sleep(void) : "Put this physics object to sleep. It will wake if given the Wake input, or if force is applied to it. Note that physics objects " + "go to sleep automatically after coming to rest for a while, so you don't really need to use this."
	input EnableMotion(void) : "Enable physics motion/collision response."
	input DisableMotion(void) : "Disable physics motion/collision response."
	input DisableFloating(void) : "Disable fluid/floating simulation to reduce cost."
	input SetBodyGroup(integer) : "Set this prop's body group (from 0 - n)."
	input physdamagescale(float) : "Set the Physics Impact Damage Scale for this character. NOTE: 0 means this feature is disabled for backwards compatibility."
	input EnableDamageForces(void) : "Damaging the entity applies physics forces to it."
	input DisableDamageForces(void) : "Damaging the entity does *not* apply physics forces to it."
	input EnablePuntSound(void) : "Allow this prop to play its own sound when punted."
	input DisablePuntSound(void) : "Prevent this prop from playing its own sound when punted."

	// Outputs
	output OnMotionEnabled(void) : "Fired when motion is enabled on this prop, either via 'Health Level to Override Motion' or from the EnableMotion input."
	output OnAwakened(void) : "Fired when this entity becomes awake (collision/force is applied to it while it's asleep)."
	output OnPhysGunPickup(void) : "Fired when the player picks up the prop with the physcannon or +USE."
	output OnPhysGunPunt(void) : "Fired when a player punts this object with the physgun."
	output OnPhysGunOnlyPickup(void) : "Fired when a player picks this object up WITH THE PHYSGUN. +USE pickups do not fire this output."
	output OnPhysGunDrop(void) : "Fired when the player drops the prop with the physcannon or USE."
	output OnPlayerUse(void) : "Fired when the player tries to +USE the prop. This output will fire only if the Generate output on +USE spawnflag is set."
	output OnPlayerPickup(void) : "Fired whenever the player picks up this prop (with the physcannon or with +USE)."
	output OnOutOfWorld(void) : "Fired whenever the prop is out of the allowed world bounds."
	]

@BaseClass base(BaseEntityVisBrush) = BaseTrain
	[
	spawnflags(flags)  =
		[
		1: "[1] No Pitch (X-rot)" : 0
		2: "[2] No User Control" : 0
		8: "[8] Passable" : 0
		16: "[16] Fixed Orientation" : 0
		128: "[128] Ridable Train (HL1 Train)" : 0
		256: "[256] Use max speed for pitch shifting move sound" : 0
		512: "[512] Is unblockable by player" : 0
		]

	target(target_destination) : "Spawn path_track" : : "The name of the first path_track in the train's path. The train will spawn at this path_track. It will also turn to face directi" + "on indicated by the 'Orientation Type' setting."
	startspeed(integer) : "Max Speed (units / second)" : 100 : "The maximum speed that this train can move. Any speeds applied to this train, such as by path_tracks or SetSpeed inputs, will be" + " clipped to this maximum value."
	speed(integer) : "Initial Speed (units / second)" : 0 : "The speed that the train will move at after it spawns, 0 = stopped."
	velocitytype(choices) : "Change Velocity" : 0 : "The method through which this train changes its velocity as it moves along the path." =
		[
		0: "Instantaneously"
		1: "Linear blend"
		2: "Ease in/ease out"
		]

	orientationtype(choices) : "Change Orientation" : 1 : "The method through which this train changes its orientation as it moves along the path." =
		[
		0: "Never (fixed orientation)"
		1: "Near path_tracks"
		2: "Linear blend"
		3: "Ease in/ease out"
		]

	wheels(integer) : "Distance Between the Wheels" : 50 : "Used for turning and stopping."
	height(integer) : "Height above track" : 4 : "The height above the track that this train moves."
	bank(string) : "Bank Angle on Turns" : 0
	dmg(integer) : "Damage on Crush" : 0 : "The amount of damage this train does to entities that block it."
	line_basetrain(string) readonly : "----------------------------------------------------------------------------------------------------------"
	movesound(sound) : "Move Sound" : : "A sound that is played (and looped) while the train is moving."
	movepingsound(sound) : "Move Ping Sound" : : "A sound that is played more frequently as the train speeds up."
	startsound(sound) : "Start Sound" : : "A sound played when the train starts moving."
	stopsound(sound) : "Stop Sound" : : "A sound played when the train stops moving."
	volume(integer) : "Volume (10 = loudest)" : 10
	movesoundminpitch(integer) : "Min pitch (1-255, > 100 = higher)" : 60 : "The sound pitch value that the train will approach as it comes to a stop."
	movesoundmaxpitch(integer) : "Max pitch (1-255, > 100 = higher)" : 200 : "The sound pitch value that the train will approach as it approaches its max speed  or 1000 units/second if the 'Use max speed fo" + "r pitch shifting move sound' flag is not set."
	movesoundmintime(float) : "Min move sound interval" : 0 : "Minimum interval at which to play the move ping sound."
	movesoundmaxtime(float) : "Max move sound interval" : 0 : "Maximum interval at which to play the move ping sound."

	// Inputs
	input SetSpeed(float) : "Set the speed of the train, as a ratio of max speed [0, 1]"
	input SetSpeedDir(float) : "Set the speed of the train, as a ratio of max speed. Negative values reverse the direction [-1, 1]"
	input SetSpeedReal(float) : "Set the speed of the train. Must be a positive value from 0 to max speed."
	input Stop(void) : "Stop the train."
	input StartForward(void) : "Start the train moving forward."
	input StartBackward(void) : "Start the train moving backward."
	input Resume(void) : "Resume the train moving in the current direction after it was stopped via the 'Stop' or 'Toggle' input."
	input Reverse(void) : "Reverse the direction of the train."
	input Toggle(void) : "Toggle the train between start and stop."
	]

@BaseClass base(BaseEntityVisBrush, _Breakable, DamageFilter) = BreakableBrush
	[
	spawnflags(flags)  =
		[
		1: "[1] Only Break on Trigger" : 0
		2: "[2] Break on Touch" : 0
		4: "[4] Break on Pressure" : 0
		512: "[512] Break immediately on Physics" : 0
		1024: "[1024] Don't take physics damage" : 0
		2048: "[2048] Don't allow bullet penetration" : 0
		]

	propdata(choices) : "Prop Data" : 0 : "Set to the best approximation of the size and material of this entity's brushes. If set, it will override this entity's health a" + "nd damage taken from various weapons. See the propdata.txt file in the scripts directory of your MOD to get a detailed list of w" + "hat each entry specifies." =
		[
		0: "None"
		1: "Wooden.Tiny"
		2: "Wooden.Small"
		3: "Wooden.Medium"
		4: "Wooden.Large"
		5: "Wooden.Huge"
		6: "Metal.Small"
		7: "Metal.Medium"
		8: "Metal.Large"
		9: "Cardboard.Small"
		10: "Cardboard.Medium"
		11: "Cardboard.Large"
		12: "Stone.Small"
		13: "Stone.Medium"
		14: "Stone.Large"
		15: "Stone.Huge"
		16: "Glass.Small"
		17: "Plastic.Small"
		18: "Plastic.Medium"
		19: "Plastic.Large"
		20: "Pottery.Small"
		21: "Pottery.Medium"
		22: "Pottery.Large"
		23: "Pottery.Huge"
		24: "Glass.Window"
		25: "Wooden.Medium.NoStand"
		]

	health(integer) : "Strength" : 1 : "Number of points of damage to take before breaking. 0 means don't break."
	material(choices) : "Material Type" : 0 : "Set to the material type of the brush. Used to decide what sounds to make when damaged, and what gibs to produce when broken." =
		[
		0: "Glass"
		1: "Wood"
		2: "Metal"
		3: "Flesh"
		4: "CinderBlock"
		5: "Ceiling Tile"
		6: "Computer"
		7: "Unbreakable Glass"
		8: "Rocks"
		10: "None"
		]

	explosion(choices) : "Gibs Direction" : 0 : "Used to decide which direction to throw gibs when broken." =
		[
		0: "Random"
		1: "Relative to Attack"
		2: "Use Precise Gib Dir"
		]

	gibdir(angle) : "Precise Gib Direction" : "0 0 0" : "Specifies the direction to throw gibs when this breakable breaks. Be sure to select Use Precise Gib Dir in the Gibs Direction fi" + "eld!"
	nodamageforces(choices) : "Damaging it Doesn't Push It" : 0 : "Used to determine whether or not damage should cause the brush to move." =
		[
		0: "No"
		1: "Yes"
		]

	breakabletype(choices) : "Breakable By" : 0 : "Who can break this?" =
		[
		0: "Everyone"
		1: "All Infected"
		2: "Only Tanks"
		]


	// Inputs
	input EnableDamageForces(void) : "Damaging the entity applies physics forces to it."
	input DisableDamageForces(void) : "Damaging the entity does *not* apply physics forces to it."
	]

@BaseClass base(BaseEntityVisBrush, MasterEnt) = Door
	[
	speed(float) : "Speed" : 100 : "The speed at which the door moves."
	noise1(sound) : "Start Sound" : : "Sound to play when the door starts moving."
	noise2(sound) : "Stop Sound" : : "Sound to play when the door stops moving."
	startclosesound(sound) : "Start Close Sound" : : "(Optional) Sound to play when the door starts closing. If not set, the Start Sound will be used instead."
	closesound(sound) : "Stop Close Sound" : : "(Optional) Sound to play when the door stops closing. If not set, the Stop Sound will be used instead."
	loopmovesound(choices) : "Loop Moving Sound?" : 0 : "If set to true, the door's 'Start Sound' will be continually looped until the door finishes moving." =
		[
		0: "No"
		1: "Yes"
		]

	wait(integer) : "Delay Before Reset (-1 stay)" : -1 : "Amount of time, in seconds, after the door has opened before it closes. Once it has closed, it can be used again. If the value i" + "s set to -1, the door never closes itself."
	lip(integer) : "Lip" : 0 : "The amount the door will keep overlapping with the original position. The distance moved = the size of the brush on the movement" + " axis - lip. Negative values cause the door to move even further."
	dmg(integer) : "Blocking Damage" : 0 : "Amount of damage done to entities that block the movement of this door, per frame."
	chainstodoor(target_destination) : "Linked Door" : : "Passes the door's +use inputs and touch events onto a different door, so it also is activated."
	forceclosed(choices) : "Force Closed" : 0 : "If set, this door will close no matter what. Useful for doors that have to close even if the player tries to block them with obj" + "ects." =
		[
		0: "No"
		1: "Yes"
		]

	ignoredebris(choices) : "Ignore Debris" : 0 : "If set this will change the door's collision group to one that ignore collisions with debris objects (note that this is not comp" + "atible with the non-solid-to-player spawnflag)." =
		[
		0: "No"
		1: "Yes"
		]

	health(integer) : "Door Health" : : "The health of the door (allows someone to shoot it open). 0 means invincible."
	locked_sound(sound) : "Locked Sound" : : "Sound played when the player tries to use the door, and fails because it's locked."
	unlocked_sound(sound) : "Unlocked Sound" : : "Sound played when the button is door."
	spawnpos(choices) : "Spawn Position" : 0 =
		[
		0: "Closed"
		1: "Open"
		]

	spawnflags(flags)  =
		[
		1: "[1] Starts Open - OBSOLETE, use 'Spawn Position' key instead" : 0
		4: "[4] Non-solid to Player" : 0
		8: "[8] Passable" : 0
		32: "[32] Toggle" : 0
		256: "[256] Use Opens" : 0
		512: "[512] NPCs Can't" : 0
		1024: "[1024] Touch Opens" : 1
		2048: "[2048] Starts locked" : 0
		4096: "[4096] Door Silent" : 0
		131072: "[131072] Block Infected nav when closed" : 0
		262144: "[262144] Block Survivor nav when closed" : 0
		65536: "[65536] New +USE rules - Allow +USE only when when the door is closed/closing or is open/opening and can be manually closed" : 0
		]

	locked_sentence(choices) : "Locked Sentence" : 0 : "A sentence played when the player tries to use the door, and fails because it's locked." =
		[
		0: "None"
		1: "[EA] Gen. Access Granted"
		2: "[ED] Security Disengaged"
		3: "[EF] Blast Door"
		4: "[EFIRE] Fire Door"
		5: "[ECHEM] Chemical Door"
		6: "[ERAD] Radiation Door"
		7: "[ECON] gen. Containment"
		8: "[EH] Maintenance area"
		]

	unlocked_sentence(choices) : "Unlocked Sentence" : 0 : "A sentence played when the door is unlocked." =
		[
		0: "None"
		1: "[EA] Gen. Access Granted"
		2: "[ED] Security Disengaged"
		3: "[EF] Blast Door"
		4: "[EFIRE] Fire Door"
		5: "[ECHEM] Chemical Door"
		6: "[ERAD] Radiation Door"
		7: "[ECON] gen. Containment"
		8: "[EH] Maintenance area"
		]


	// Inputs
	input Open(void) : "Open the door, if it is not fully open."
	input Close(void) : "Close the door, if it is not fully closed."
	input Toggle(void) : "Toggle the door between open and closed."
	input Lock(void) : "Lock the door."
	input Unlock(void) : "Unlock the door."
	input SetSpeed(float) : "Set the door speed."
	input SetToggleState(bool) : "Force the door instantly to currently open or closed."

	// Outputs
	output OnClose(void) : "Fired when the door starts closing."
	output OnOpen(void) : "Fired when the door starts opening."
	output OnFullyOpen(void) : "Fired when the door reaches the fully open position. Reversed if 'Start Open' flag is set."
	output OnFullyClosed(void) : "Fired when the door reaches the fully closed position. Reversed if 'Start Open' flag is set."
	output OnBlockedClosing(void) : "Fired when the door is blocked while closing."
	output OnBlockedOpening(void) : "Fired when the door is blocked while opening."
	output OnUnblockedClosing(void) : "Fired when the door is unblocked while closing."
	output OnUnblockedOpening(void) : "Fired when the door is unblocked while opening."
	output OnLockedUse(void) : "Fired when the player uses the door, but it is locked."
	]

@BaseClass base(TriggerOnce) = Trigger
	[

	// Inputs
	input EndTouch(void) : "Fires the OnEndTouch output. If called by an entity inside the trigger, the OnEndTouch will be fired for them as the activator. " + "Note that this input is passed even if the player is being treated as 'not' touching the trigger while outside it."

	// Outputs
	output OnStartTouchAll(void) : "Fired when an entity starts touching this trigger, and no other entities are touching it. Only entities that passed this trigger" + "'s filters are considered."
	output OnEndTouch(void) : "Fired when an entity stops touching this trigger. Only entities that passed this trigger's filters will cause this output to fir" + "e."
	output OnEndTouchAll(void) : "Fires when an entity stops touching this trigger, and no other entities are touching it. Only entities that passed this trigger'" + "s filters are considered."
	]

@BaseClass base(BaseEntityPhysics) = WeaponSpawnSingle
	[
	solid(choices) : "Collisions" : 6 =
		[
		0: "Not Solid"
		2: "Use Bounding Box"
		6: "Use VPhysics"
		]

	spawnflags(flags)  =
		[
		1: "[1] Enable Physics" : 0
		2: "[2] Must Exist" : 0
		8: "[8] Infinite items (overrides count)" : 0
		]

	]

@NpcClass base(BaseEntityAnimating) 
	sphere(fademindist)
	sphere(fademaxdist)
	studio()
= commentary_dummy: "Commentary Dummy"
	[
	model(studio) : "Dummy Model" : "models/survivors/survivor_coach.mdl"
	eyeheight(integer) : "Eye Height" : 64 : "Eye height relative to origin. Only necessary when staring at players"
	startinganim(string) : "Starting Animation" : "Idle_Calm_Pistol" : "The name of the starting animation that this dummy will play when it spawns."
	startingweapons(string) : "Starting Weapons" : "weapon_pistol" : "The names of any weapons the dummy should have when it spawns. Separated by spaces, commas, or semicolons. Last specified weapon" + " will be equipped"
	lookatplayers(choices) : "Stare at players" : 0 : "Set to true if you want the dummy to attempt to stare at players all the time." =
		[
		0: "No"
		1: "Yes"
		]

	headyawposeparam(string) : "Head Yaw Pose Parameter" : "Head_Yaw" : "The name of the head yaw pose parameter. Only necessary when staring at players"
	headpitchposeparam(string) : "Head Pitch Pose Parameter" : "Head_Pitch" : "The name of the head yaw pose parameter. Only necessary when staring at players"

	// Inputs
	input SetAnimation(string) : "Force the dummy to play an animation. The parameter should be the name of the animation."
	]

@PointClass base(logic_relay) 
	iconsprite("editor/logic_relay.vmt")
	color(0 100 250)
	line(255 255 255, targetname, target)
= comp_numeric_transition: "When triggered, animates a keyvalue/input over time with various options."
	[
	target(target_destination) : "Entity to Control" : : "The entity which the outputs will be directed to."
	opt_name(string) : "Keyvalue/Input Name" : "SetSpeed" : "The name of the keyvalue or input to change.If the target is not an entity findable by the postcompiler, IO Type must be set."
	io_type(choices) : "I/O Type" : "auto" : "The method used to control an entity. If Input, use the input name provided.If KeyValue, use AddOutput to change the keyvalue.If" + " Auto, examine the entity class that is being controlled to determine the appropriate mode." =
		[
		"auto": "Automatic"
		"io": "Input"
		"kv": "KeyValue (AddOutput)"
		]

	transform(choices) : "Value Type" : "speed" : "The behaviour of the input, used to control what actual values are sent. Regardless of this value, the other options are 'positi" + "on'-type values!" =
		[
		"set": "Instantly Set"
		"moveto": "Move to value"
		"speed": "Adjust Speed"
		"light": "Light Pattern"
		]

	line_trans2(string) readonly : "-------------------------------------------"
	beat_interval(float) : "Beat Interval" : "0.1" : "Time between each output. Smaller values are more accurate, but increase the outputs generated."
	delay(float) : "Start Delay" : "0.0" : "Wait this amount of time after being triggered before animating."
	duration(float) : "Duration" : 5 : "Time the change will take."
	startval(float) : "Start Value" : 0 : "Starting value. If the Value Type is Light Pattern, these may be a-z letters."
	endval(float) : "Ending Value" : 100 : "Ending value. If the Value Type is Light Pattern, these may be a-z letters."
	line_trans3(string) readonly : "-------------------------------------------"
	easing_start(choices) : "Easing Start" : "linear" : "Controls how the animation begins." =
		[
		"linear": "None"
		"quad": "Quadratic (x≤)"
		"cubic": "Cubic (x≥)"
		"quartic": "Quartic (x^4)"
		"sine": "Sinusoidal"
		]

	easing_end(choices) : "Easing End" : "linear" : "Controls how the animation ends." =
		[
		"linear": "None"
		"quad": "Quadratic (x≤)"
		"cubic": "Cubic (x≥)"
		"quartic": "Quartic (x^4)"
		"sine": "Sinusoidal"
		]

	]

@PointClass base(BaseBeam) 
	line(255 255 255, targetname, LightningStart, targetname, LightningEnd)
	cylinder(255 255 255, targetname, LightningStart, Radius, targetname, LightningEnd, Radius)
	line(64 64 64, targetname, lightningStart)
	line(64 64 64, targetname, lightningEnd)
	line(10 10 10, targetname, filtername)
	iconsprite("editor/env_beam.vmt")
	sphere(radius)
	color(200 200 0)
= env_beam: "An entity that creates a visible beam between two points. The points can be attached to entities to make the beam move around."
	[
	radius(integer) : "Radius" : 16 : "If the 'Random Strike' spawnflag is set, this radius determines the area within which the endpoints will randomly strike."
	life(float) : "Life (seconds 0 = infinite)" : 0 : "Amount of time before the beam dies. Setting to zero will make the beam stay forever."
	boltwidth(float) : "Width of beam" : 2 : "Pixel width of the beam."
	striketime(float) : "Strike again time (secs)" : 1 : "Refire time between random strikes of the beam. Only used if the 'Random Strike' spawnflag is set."
	lightningstart(target_destination) : "Start Entity" : : "Entity that the beam starts at."
	lightningend(target_destination) : "Ending Entity" : : "Entity that the beam ends at. If not set, the Ending Location will be used instead."
	decalname(string) : "Decal Name" : "Bigshot" : "Decal to be applied at the end of the beam"
	spawnflags(flags)  =
		[
		1: "[1] Start On" : 0
		2: "[2] Toggle" : 0
		4: "[4] Random Strike" : 0
		8: "[8] Ring" : 0
		16: "[16] StartSparks" : 0
		32: "[32] EndSparks" : 0
		64: "[64] Decal End" : 0
		128: "[128] Shade Start" : 0
		256: "[256] Shade End" : 0
		512: "[512] Taper Out" : 0
		]

	touchtype(choices) : "Touch Type (tripwire)" : 0 : "If you want the beam to fire an output when touched by entities, choose the entity type here." =
		[
		0: "Not a tripwire"
		1: "Player Only"
		2: "NPC Only"
		3: "Player or NPC"
		4: "Player or NPC or Physprop"
		]

	filtername(filterclass) : "Filter Name" : : "Filter to use to determine what triggers the output."
	targetpoint(vecline) : "Ending Location" : "0 0 0" : "If an Ending Entity is not specified, use this point as the destination instead.It is relative to the beam origin."
	clipstyle(choices) : "Beam clipping" : 0 : "Select whether you want the beam to clip against geometry or characters, making it stop prematurely." =
		[
		0: "Do not clip (default)"
		1: "Clip to geometry"
		2: "Clip to everything solid"
		]


	// Inputs
	input StrikeOnce(void) : "Causes the beam to strike once. It will stay on for its set Life and then turn off (it will never turn off if Life is set to zer" + "o)."
	input Amplitude(float) : "Set the amplitude of beam noise (0 - 255)."

	// Outputs
	output OnTouchedByEntity(void) : "Fired when an entity touches the beam. Only fired if the entity passes the 'Touch Type' choice."
	]

@PointClass base(BaseEntityAnimating, Angles) 
	sphere(fademindist)
	sphere(fademaxdist)
	iconsprite("editor/ficool2/env_effectscript")
	studioprop()
= env_effectscript: "An entity that allows you to script special visual effects via a script file."
	[
	model(studio) : "Script Model" : : "Model to use for animation sequences."
	scriptfile(string) : "Script File" : "scripts/effects/testeffect.txt" : "Name of the script to use for this model."

	// Inputs
	input SetSequence(string) : "Sets the script model's sequence."
	]

@PointClass base(env_sprite) 
	studio("models/editor/axis_helper_white.mdl")
	sprite()
	color(20 140 20)
	sphere(GlowProxySize)
= env_glow: "Obselete older name for env_sprite."
	[
	]

@PointClass base(BaseBeam) 
	iconsprite("editor/ficool2/env_laser.vmt")
	line(255 255 255, targetname, LaserTarget)
	color(200 200 0)
= env_laser: "An entity that creates a laser beam between itself and a given target."
	[
	lasertarget(target_destination) : "Target of Laser" : : "Name of entity, or entities, to strike at. The target is randomly chosen if there are multiple entities matching the given name."
	width(float) : "Width of Beam" : 2 : "The width of the laser beam, in pixels."
	endsprite(sprite) : "End Sprite" : : "If specified, this sprite will be drawn at the end of the laser beam."
	spawnflags(flags)  =
		[
		1: "[1] Start On" : 0
		16: "[16] StartSparks" : 0
		32: "[32] EndSparks" : 0
		64: "[64] Decal End" : 0
		]

	]

@PointClass base(gibshooterbase) 
	line(255 255 255, targetname, lightingorigin)
	iconsprite("editor/ficool2/env_rotorshooter.vmt")
	color(200 200 0)
= env_rotorshooter: "An entity that creates gibs when it's within the influence of a helicopter's rotor wash."
	[
	shootmodel(studio) : "Model" : : "Thing to shoot out.  Can be a .mdl or a .vmt."
	shootsounds(choices) : "Material Sound" : -1 =
		[
		-1: "None"
		0: "Glass"
		1: "Wood"
		2: "Metal"
		3: "Flesh"
		4: "Concrete"
		]

	simulation(choices) : "Simulation Type" : 0 =
		[
		0: "Point"
		1: "Physics"
		2: "Ragdoll"
		]

	skin(integer) : "Gib Skin" : 0 : "Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin on all gi" + "bs produced by this shooter."
	spawnflags(flags)  =
		[
		2: "[2] On fire" : 0
		]

	rotortime(float) : "Time Under Rotor" : 1 : "The average time it has to be under the rotor before it shoots a gib."
	rotortimevariance(float) : "Time variance" : "0.3" : "The random amount to vary the time it has to be under the rotor before it shoots a gib."
	]

@PointClass base(gibshooterbase) 
	line(255 255 255, targetname, lightingorigin)
	iconsprite("editor/env_shooter.vmt")
	color(200 200 0)
= env_shooter: "An entity that shoots models, or sprites, out of its origin."
	[
	shootmodel(studio) : "Model" : : "Thing to shoot out. Can be a .mdl or a .vmt."
	shootsounds(choices) : "Material Sound" : -1 =
		[
		-1: "None"
		0: "Glass"
		1: "Wood"
		2: "Metal"
		3: "Flesh"
		4: "Concrete"
		]

	simulation(choices) : "Simulate" : 0 =
		[
		0: "Point"
		1: "Physics"
		2: "Ragdoll"
		]

	skin(integer) : "Gib Skin" : 0 : "Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin on all gi" + "bs produced by this shooter."
	spawnflags(flags)  =
		[
		2: "[2] On fire" : 0
		4: "[4] strict remove after lifetime" : 0
		]

	nogibshadows(choices) : "Disable Shadows on Gibs" : 0 =
		[
		0: "No"
		1: "Yes"
		]

	gibgravityscale(float) : "Gib gravity scale" : 1 : "ONLY WORKS FOR POINT GIBS. This field allows you to scale gravity so that gibs fall faster, slower, or not at all."
	massoverride(float) : "Mass override" : 0 : "EPISODIC ONLY. Specify an arbitrary mass for the gibs emitted by me."
	]

@PointClass base(env_soundscape) 
	sphere(radius)
	line(255 255 255, targetname, position0)
	line(255 255 255, targetname, position1)
	line(255 255 255, targetname, position2)
	line(255 255 255, targetname, position3)
	line(255 255 255, targetname, position4)
	line(255 255 255, targetname, position5)
	line(255 255 255, targetname, position6)
	line(255 255 255, targetname, position7)
	iconsprite("editor/env_soundscape_triggerable.vmt")
= env_soundscape_triggerable: "An entity that works like env_soundscape except that it works in conjunction with trigger_soundscape to determine when a player " + "hears it."
	[
	]

@PointClass base(env_sprite) 
	studio("models/editor/axis_helper_white.mdl")
	sprite()
	color(20 140 20)
	sphere(GlowProxySize)
= env_sprite_oriented: "A env_sprite that allows orientation."
	[
	]

@PointClass base(env_tonemap_controller) 
	iconsprite("editor/env_tonemap_controller.vmt")
	color(200 0 0)
= env_tonemap_controller_ghost: "An entity that controls the HDR tonemapping for ghost players."
	[
	]

@PointClass base(env_tonemap_controller) 
	iconsprite("editor/env_tonemap_controller.vmt")
	color(200 0 0)
= env_tonemap_controller_infected: "An entity that controls the HDR tonemapping for infected players."
	[
	]

@FilterClass base(filter_base) 
	color(0 255 0)
	iconsprite("editor/filter_class.vmt")
= filter_activator_class: "A filter that filters by the class name of the activator."
	[
	filterclass(string) : "Filter Classname" : : "The class name to filter by. If the filter mode is Allow, only entities whose class name matches the given string will pass the " + "filter. If the filter mode is Disallow, all entities EXCEPT those whose class name matches the given string will pass the filter" + "."
	]

@FilterClass base(filter_base) 
	color(0 255 0)
	iconsprite("editor/filter_context.vmt")
= filter_activator_context: "A filter that filters by a context on the activator."
	[
	responsecontext(string) : "Filter Context" : : "The context to filter by. If the filter mode is Allow, only entities that have a context matching the given string, of any value" + ", will pass the filter. If the filter mode is Disallow, all entities EXCEPT those whose context matches the string will pass the" + " filter."
	]

@FilterClass base(filter_base) 
	color(0 255 0)
	iconsprite("editor/filter_team.vmt")
= filter_activator_infected_class: "A filter that filters by the activator's infected class."
	[
	filterinfectedclass(choices) : "Filter Infected Class" : 2 : "The infected class to filter by. If the filter mode is Allow, only entities whose class matches the given team will pass the fil" + "ter. If the filter mode is Disallow, all entities EXCEPT those whose class matches the given team will pass the filter." =
		[
		1: "Smoker"
		2: "Boomer"
		3: "Hunter"
		4: "Spitter"
		5: "Jockey"
		6: "Charger"
		8: "Tank"
		]

	]

@FilterClass base(filter_base) 
	color(0 255 0)
	iconsprite("editor/filter_mass.vmt")
= filter_activator_mass_greater: "A filter that filters by the mass of the activator."
	[
	filtermass(float) : "Filter Mass" : : "The mass to filter by. If the filter mode is Allow, only entities whose mass is greater than the give float will pass the filter" + ". If the filter mode is Disallow, all entities EXCEPT those whose mass is greater than the given float will pass the filter."
	]

@FilterClass base(filter_base) 
	color(0 255 0)
	iconsprite("editor/filter_model.vmt")
= filter_activator_model: "A filter that filters by the model of the activator."
	[
	model(studio) : "Filter Model" : : "The model to filter by. If the filter mode is Allow, only entities whose model matches the given string will pass the filter. If" + " the filter mode is Disallow, all entities EXCEPT those whose model matches the string will pass the filter."
	]

@FilterClass base(filter_base) 
	color(0 255 0)
	iconsprite("editor/filter_name.vmt")
	line(0 255 0, targetname, filtername)
= filter_activator_name: "A filter that filters by the name of the activator."
	[
	filtername(target_destination) : "Filter Name" : : "The name to filter by. If the filter mode is Allow, only entities whose name matches the given string will pass the filter. If t" + "he filter mode is Disallow, all entities EXCEPT those whose name matches the string will pass the filter."
	]

@FilterClass base(filter_base) 
	color(0 255 0)
	iconsprite("editor/filter_team.vmt")
= filter_activator_team: "A filter that filters by the team of the activator."
	[
	filterteam(choices) : "Filter Team Number" : 2 : "The team number to filter by.  If the filter mode is Allow, only entities whose team number matches the given team will pass the" + " filter. If the filter mode is Disallow, all entities EXCEPT those whose team number matches the given team will pass the filter" + "." =
		[
		2: "Survivor"
		3: "Infected"
		]

	]

@FilterClass base(filter_base) 
	color(0 255 0)
	iconsprite("editor/filter_damage_type.vmt")
= filter_damage_type: "A damage filter that filters by the type of damage inflicted. This can only be used as a damage filter, not as an activator filt" + "er."
	[
	damagetype(choices) : "Damage Type" : 64 : "The damage type to filter by. If the filter mode is Allow, only damage types that match will pass the filter. If the filter mode" + " is Disallow, all damage types EXCEPT those who match will pass the filter." =
		[
		0: "Generic"
		1: "Crush"
		2: "Bullet"
		4: "Slash"
		8: "Burn"
		16: "Freeze"
		32: "Fall"
		64: "Blast"
		128: "Club"
		256: "Shock"
		512: "Sonic"
		1024: "Energy Beam"
		16384: "Drown"
		32768: "Paralyse"
		65536: "Nerve Gas"
		131072: "Poison"
		262144: "Radiation"
		524288: "Drown Recover"
		1048576: "Chemical"
		2097152: "Slow Burn"
		4194304: "Remove No Ragdoll"
		16777216: "Full Gib"
		33554432: "Airboat (gun)"
		67108864: "Dissolve"
		134217728: "Blast Surface"
		268435456: "Direct"
		536870912: "Buckshot"
		]

	]

@FilterClass base(filter_base) 
	color(0 255 0)
	iconsprite("editor/ficool2/filter_enemy.vmt")
	sphere(filter_radius)
	sphere(filter_outer_radius)
	line(0 255 0, targetname, filtername)
= filter_enemy: "A filter that filters a potential enemy entity by a set of criteria."
	[
	filtername(string) : "Name/Classname" : : "The classname or entity name to filter by. If the filter mode is Allow, only entities whose class name matches the given string " + "will pass the filter. If the filter mode is Disallow, all entities EXCEPT those whose class name matches the given string will p" + "ass the filter."
	filter_radius(float) : "Radius" : 0 : "Radius by which to test the proximity of the enemy.  If the filter mode is Allow, only entities whose distance is equal to or cl" + "oser than the radius will pass the filter. If the filter mode is Disallow, all entities outside the radius will pass the filter."
	filter_outer_radius(float) : "Outer Radius" : 0 : "Enemies outside this radius are considered invalid if Allow is set and valid if Disallow is set."
	filter_max_per_enemy(integer) : "Max Squadmates Per Enemy" : 0 : "Maximum number of squadmates allowed to target any given entity."
	spawnflags(flags)  =
		[
		1: "[1] Do not lose target if already aquired but filter failed." : 0
		]

	]

@FilterClass base(filter_base) 
	color(0 255 0)
	iconsprite("editor/ficool2/filter_base.vmt")
= filter_health: "A damage filter that filters based on if the entity causing the damage has adrenaline active or not."
	[
	adrenalinepresence(choices) : "Adrenaline presence" : 1 : "Allows this state of adrenaline on the attacker to pass the filter." =
		[
		0: "only inactive"
		1: "only active"
		]

	healthmin(integer) : "Min Health" : 0 : "The lower bound on player health that will pass this filter (inclusive)."
	healthmax(integer) : "Max Health" : 100 : "The upper bound on player health that will pass this filter (inclusive)."
	]

@FilterClass base(filter_base, DamageType) 
	color(0 255 0)
	iconsprite("editor/ficool2/filter_base.vmt")
= filter_melee_damage: "A damage filter that filters by the damage, allowing only melee damage. damagetype specifies which types of melee damage are all" + "owed"
	[
	]

@FilterClass base(filter_base) 
	color(0 255 0)
	iconsprite("editor/filter_multiple.vmt")
	line(0 255 0, targetname, filter01)
	line(0 255 0, targetname, filter02)
	line(0 255 0, targetname, filter03)
	line(0 255 0, targetname, filter04)
	line(0 255 0, targetname, filter05)
	line(0 255 0, targetname, filter06)
	line(0 255 0, targetname, filter07)
	line(0 255 0, targetname, filter08)
	line(0 255 0, targetname, filter09)
	line(0 255 0, targetname, filter10)
	line(0 255 0, targetname, filter11)
	line(0 255 0, targetname, filter12)
	line(0 255 0, targetname, filter13)
	line(0 255 0, targetname, filter14)
	line(0 255 0, targetname, filter15)
	line(0 255 0, targetname, filter16)
	line(0 255 0, targetname, filter17)
	line(0 255 0, targetname, filter18)
	line(0 255 0, targetname, filter19)
	line(0 255 0, targetname, filter20)
= filter_multi: "A filter that tests the activator against multiple filters. This allows you to build more complex filters, such as 'Allow anyone" + " on Team 1 who is also class engineer', or 'Allow everyone except classes npc_zombie and npc_headcrab'."
	[
	filtertype(choices) : "Logic Type" : 0 =
		[
		0: "AND (all filters must pass)"
		1: "OR (any filter must pass)"
		]

	negated(choices) : "Negate Outcome" : 0 : "Whether to negate the result of the subfilters, after combining them using the Logic Type chosen.\nNegating the outcome using th" + "e AND logic type means that any subfilter must fail for this filter to pass.\nNegating the outcome using the OR logic type means" + " that all subfilters must fail for this filter to pass." =
		[
		0: "No"
		1: "Yes"
		]

	filter01(filterclass) : "Filter 1" : : "Activator filter to test."
	filter02(filterclass) : "Filter 2" : : "Activator filter to test."
	filter03(filterclass) : "Filter 3" : : "Activator filter to test."
	filter04(filterclass) : "Filter 4" : : "Activator filter to test."
	filter05(filterclass) : "Filter 5" : : "Activator filter to test."
	filter06(filterclass) : "Filter 6" : : "Activator filter to test."
	filter07(filterclass) : "Filter 7" : : "Activator filter to test."
	filter08(filterclass) : "Filter 8" : : "Activator filter to test."
	filter09(filterclass) : "Filter 9" : : "Activator filter to test."
	filter10(filterclass) : "Filter 10" : : "Activator filter to test."
	]

@SolidClass base(BaseEntityVisBrush, EnableDisable, Toggle) 
	sphere(fademindist)
	sphere(fademaxdist)
= func_brush: "An brush built entity with various features."
	[
	spawnflags(flags)  =
		[
		2: "[2] Ignore player +USE" : 1
		]

	solidity(choices) : "Solidity" : 0 : "How the solidity changes." =
		[
		0: "Toggle with Enable/Disable"
		1: "Never Solid"
		2: "Always Solid"
		]

	excludednpc(string) : "NPC class excluded from collisions" : : "If an NPC classname is specified here, NPCs of that type won't collide with these brushes. In Episodic, you may also specify an " + "individual entity's name."
	invert_exclusion(choices) : "Invert NPC class exclusion" : 0 : "If set, then the excluded NPC class will consider this brush solid, and all other NPC classes will consider it non-solid." =
		[
		0: "No"
		1: "Yes"
		]

	solidbsp(choices) : "Solid BSP" : 0 : "Set this if this brush is in heirarchy with a moving object of some kind, and the player can stand on this brush." =
		[
		0: "No"
		1: "Yes"
		]


	// Inputs
	input SetExcluded(string) : "Change the NPC class excluded from collisions."
	input SetInvert(bool) : "Set the state of inversion for NPC class exclusion (0 or 1)."
	input Toggle(void) : "Toggle visibility/solidity of this brush."
	]

@SolidClass base(BaseEntityVisBrush, Origin) 
	sphere(fademindist)
	sphere(fademaxdist)
= func_buildable_button: "An timed button which calls into its script scope during button-pressing related events."
	[
	spawnflags(flags)  =
		[
		2048: "[2048] Starts locked" : 0
		]

	is_cumulative_use(choices) : "Cumulative Use" : 0 =
		[
		0: "No"
		1: "Yes"
		]


	// Inputs
	input Enable(void) : "Enable the button, so it glows and can be used."
	input Disable(void) : "Disable the button, so it can't be used and doesn't glow."

	// Outputs
	output OnPressed(void) : "Fired when the button is pressed."
	output OnUnPressed(void) : "Fired when the button is unpressed."
	output OnTimeUp(void) : "Fired when the button has been held more than the required amount of time."
	output OnUseLocked(void) : "Fired when the button is used while locked."
	]

@SolidClass base(BaseEntityVisBrush, Button) 
	sphere(fademindist)
	sphere(fademaxdist)
= func_button: "A brush entity that's designed to be used for a player-useable button. When used by the player, it moves to a pressed position. " + "Do not lock while pressed; it will not return when unlocked."
	[
	movedir(angle) : "Move Direction (Pitch Yaw Roll)" : "0 0 0" : "Specifies the direction of motion to move when the button is used."
	speed(integer) : "Speed" : 5 : "The speed that the button moves, in units per second."
	health(integer) : "Health (Obsolete)" : 0 : "Legacy method of specifying whether or not the button can be shot to activate it. Use the 'Damage Activates' spawnflag instead."
	lip(integer) : "Lip" : 0 : "The amount the button will keep overlapping with the original position. The distance moved = the size of the brush on the moveme" + "nt axis - lip."
	wait(integer) : "Delay Before Reset (-1 stay)" : 3 : "Amount of time, in seconds, after the button has been pressed before it returns to the starting position. Once it has returned, " + "it can be used again. If the value is set to -1, the button never returns."
	spawnflags(flags)  =
		[
		1: "[1] Don't move" : 0
		32: "[32] Toggle" : 0
		256: "[256] Touch Activates" : 0
		512: "[512] Damage Activates" : 0
		1024: "[1024] Use Activates" : 1
		2048: "[2048] Starts locked" : 0
		4096: "[4096] Sparks" : 0
		]

	]

@SolidClass base(BaseEntityVisBrush) 
	sphere(fademindist)
	sphere(fademaxdist)
	line(0 255 0, targetname, glow)
= func_button_timed: "An entity that takes time to use."
	[
	use_time(integer) : "Use Time" : 5
	use_string(string) : "Use String" : "Using...."
	glow(target_destination) : "Glow Entity" : : "The name of an entity that will get the +use glow for this button."
	auto_disable(choices) : "Auto-Disable On Time Up" : 1 : "When the use timer is up, disable the button. (Can be enabled with an input)" =
		[
		0: "No"
		1: "Yes"
		]

	spawnflags(flags)  =
		[
		2048: "[2048] Starts locked" : 0
		]

	locked_sound(choices) : "Locked Sound" : 0 : "Sound played when the player tries to use the button, and fails because it's locked. These are sounds in the Buttons.snd* catego" + "ry." =
		[
		0: "None (Silent)"
		1: "Buttons.snd1: Big zap & Warmup"
		2: "Buttons.snd2: Access Denied"
		3: "Buttons.snd3: Access Granted"
		4: "Buttons.snd4: Quick Combolock"
		5: "Buttons.snd5: Power Deadbolt 1"
		6: "Buttons.snd6: Power Deadbolt 2"
		7: "Buttons.snd7: Plunger"
		8: "Buttons.snd8: Small zap"
		9: "Buttons.snd9: Keycard Sound"
		10: "Buttons.snd10: Buzz"
		11: "Buttons.snd11: Buzz Off"
		12: "Buttons.snd12: Latch locked"
		13: "Buttons.snd13: Latch Unlocked"
		14: "Buttons.snd14: Lightswitch"
		15: "Buttons.snd15: Small bleek"
		16: "Buttons.snd16: Small deny"
		17: "Buttons.snd17: Small doop"
		18: "Buttons.snd18: Small tech deny"
		19: "Buttons.snd19: Click and combine screen fuzz"
		20: "Buttons.snd20: Roomy beep"
		21: "Buttons.snd21: Lever or Wheel: turn + move sqeek"
		22: "Buttons.snd22: Lever or Wheel: latch + release gas"
		23: "Buttons.snd23: Lever or Wheel: ratchet + sqeek"
		24: "Buttons.snd24: Lever or Wheel: large ratchet"
		25: "Buttons.snd25: Lever or Wheel: clanky + gas release"
		26: "Buttons.snd26: Lever or Wheel: latch + large metal thud"
		27: "Buttons.snd27: Lever or Wheel: smaller ratchet"
		28: "Buttons.snd28: Lever or Wheel: smaller lever move"
		31: "Buttons.snd31: Shock buzz"
		32: "Buttons.snd32: Clickbeep"
		33: "Buttons.snd33: Tech blip"
		34: "Buttons.snd34: Clickbeepbeep open"
		35: "Buttons.snd35: Small high blip"
		36: "Buttons.snd36: Small tech fuzz blip"
		37: "Buttons.snd37: Small click bleep (change to lightswitch)"
		40: "Buttons.snd40: Combine door lock - locked"
		41: "Buttons.snd41: Combine blip growl"
		42: "Buttons.snd42: Combine squick growl"
		43: "Buttons.snd43: Combine whine purr"
		44: "Buttons.snd44: Combine click talk"
		45: "Buttons.snd45: Combine click growl fizz"
		46: "Buttons.snd46: Combine click fizz (deny)"
		47: "Buttons.snd47: Combine click talker"
		]

	use_sub_string(string) : "Use Sub-String"

	// Inputs
	input Lock(void) : "Lock the button, preventing it from functioning and playing a locked sound."
	input Unlock(void) : "Unlock the button, allowing it to function."
	input Enable(void) : "Enable the button, so it glows and can be used."
	input Disable(void) : "Disable the button, so it can't be used and doesn't glow."

	// Outputs
	output OnPressed(void) : "Fired when the button is pressed."
	output OnUnPressed(void) : "Fired when the button is unpressed."
	output OnTimeUp(void) : "Fired when the button has been held more than the required amount of time."
	output OnUseLocked(void) : "Fired when the button is used while locked."
	]

@SolidClass base(CombineBallSpawners) = func_combine_ball_spawner: "Spawns Combine balls."
	[

	// Outputs
	output OnBallReinserted(void) : "Fired when a combine ball is reinserted into the field (only gets triggered when Combine Power supply is checked)"
	output OnLastBallGrabbed(void) : "Fired when the last combine ball is grabbed from the field by a mega physcannon"
	]

@SolidClass base(BaseEntityVisBrush) 
	sphere(fademindist)
	sphere(fademaxdist)
= func_conveyor: "A brush entity that functions as a conveyor belt, with a moving surface. The surface material should have a ConveyorScroll Mater" + "ial Proxy, to synchronize the material movement and push effect."
	[
	movedir(angle) : "Move Direction (Pitch Yaw Roll)" : "0 0 0" : "The direction conveyor moves."
	spawnflags(flags)  =
		[
		1: "[1] No Push" : 0
		2: "[2] Not Solid" : 0
		]

	speed(float) : "Conveyor Speed" : 100

	// Inputs
	input ToggleDirection(void) : "Change direction of conveyor."
	input SetSpeed(float) : "Sets Conveyor Speed."
	]

@SolidClass base(BaseEntityVisBrush) 
	sphere(fademindist)
	sphere(fademaxdist)
= func_elevator: "A brush entity that moves vertically."
	[
	top(vecline) : "Top floor position"
	bottom(vecline) : "Bottom floor position"
	speed(integer) : "Speed" : 100 : "The speed that the elevator moves, in units per second."
	acceleration(integer) : "Acceleration" : 100 : "The acceleration at which the elevator approaches its target speed, in units per second per second."
	blockdamage(float) : "Block Damage" : 0 : "The amount of damage to do to any entity that blocks the elevator, per frame."
	startsound(sound) : "Sound played when the elevator starts moving."
	stopsound(sound) : "Sound played when the elevator stops moving."
	disablesound(sound) : "Sound played when the elevator is disabled."

	// Inputs
	input MoveToFloor(string) : "Start the elevator moving to the specified floor."
	input Disable(void) : "Stops the elevator and prevents it from moving again."
	input SetMaxSpeed(float) : "Set the max speed of the elevator."

	// Outputs
	output OnReachedTop(string) : "Fired when the brush reaches the top."
	output OnReachedBottom(string) : "Fired when the brush reaches the bottom."
	]

@SolidClass base(BaseEntityVisBrush) 
	sphere(fademindist)
	sphere(fademaxdist)
	line(255 255 0, targetname, target)
= func_guntarget: "This is a moving target that moves along a path of path_tracks. It can be shot and killed."
	[
	speed(integer) : "Speed (units per second)" : 100 : "The speed at which the target moves along its path."
	target(target_destination) : "Spawn Track" : : "The name of the first path_track entity in the path that this target should follow."
	health(integer) : "Damage to Take" : 0 : "The amount of damage taken before this target is killed."

	// Inputs
	input Start(void) : "Start the target moving."
	input Stop(void) : "Stop the target from moving."
	input Toggle(void) : "Toggle the target between moving and stopped."

	// Outputs
	output OnDeath(void) : "Fires when the target is killed."
	]

@SolidClass base(BaseEntityVisBrush) 
	sphere(fademindist)
	sphere(fademaxdist)
= func_illusionary: "Legacy support. Use func_brush instead. A brush that is always non-solid."
	[
	]

@SolidClass base(BaseEntityVisBrush) 
	sphere(fademindist)
	sphere(fademaxdist)
	sphere(DisappearDist)
	sphere(DisappearMinDist)
	sphere(DisappearMaxDist)
= func_lod: "Brush-built model that fades out over a specified distance. Useful for creating world detail that doesn't need to be drawn far a" + "way, for performance reasons."
	[
	solid(choices) : "Solid" : 0 : "Set whether or not these brushes should collide with other entities." =
		[
		0: "Solid"
		1: "Nonsolid"
		]

	disappearmaxdist(integer) : "Disappear Max Distance" : 2200 : "Distance at which these brushes should be completely faded out."
	disappearmindist(integer) : "Disappear Min Distance" : 2000 : "Distance at which these brushes should starting fade out."
	]

@SolidClass base(BaseEntityVisBrush) 
	sphere(fademindist)
	sphere(fademaxdist)
	sphere(movedistance)
= func_movelinear: "A brush entity that moves linearly along a given distance, in a given direction."
	[
	movedir(angle) : "Move Direction (Pitch Yaw Roll)" : "0 0 0" : "The direction the brushes will move, when told to open or passed a positive SetPosition value."
	spawnflags(flags)  =
		[
		8: "[8] Not Solid" : 0
		]

	startposition(float) : "Start Position" : 0 : "Position of brush when spawned, where 0 is the starting position and 1 is the opened position. Negatives will position it in the" + " opposite direction."
	speed(float) : "Speed" : 100 : "The speed that the brush moves, in units per second."
	movedistance(float) : "Move Distance" : 100 : "The distance from the starting point that the brush should move."
	blockdamage(float) : "Block Damage" : 0 : "The amount of damage to do to any entity that blocks the brushes, per frame."
	startsound(sound) : "Start Sound" : : "Sound played when the brush starts moving."
	stopsound(sound) : "Stop Sound" : : "Sound played when the brush stops moving."

	// Inputs
	input Open(void) : "Move the brush to the end position (starting position + (move direction * move distance))."
	input Close(void) : "Move the brush to the starting position."
	input SetPosition(string) : "Move the brush to a specific position, where 0 is the starting position and 1 is the opened position. Accepts any value, with ne" + "gatives moving in the opposite direction."
	input SetSpeed(float) : "Set the speed and update immediately."
	input ResetPosition(float) : "Set a new start position for our current location."
	input TeleportToTarget(target_destination) : "Teleport to this entity's origin."

	// Outputs
	output OnFullyOpen(void) : "Fired when the brush reaches the end position (starting position + (move direction * move distance))."
	output OnFullyClosed(void) : "Fired when the brush reaches the starting position."
	]

@SolidClass base(NavCost) = func_nav_avoid: "Influence bots to avoid this region by increasing the pathfinding cost within it."
	[
	]

@SolidClass base(NavCost) = func_nav_prefer: "Influence bots to prefer this region by decreasing the pathfinding cost within it."
	[
	]

@PointClass base(BaseEntityAnimating, SetModel) 
	sphere(fademindist)
	sphere(fademaxdist)
	studioprop()
	sphere(maxthenanydispatchdist)
= func_orator: "A very simple model entity that has animations and response rules."
	[
	spawnflags(flags)  =
		[
		1: "[1] Not Solid" : 1
		]

	maxthenanydispatchdist(float) : "Max Followup Dist" : 0 : "A 'then ANY' followup on a response from this orator will dispatch to characters up to this many units away. Leave 0 to mean tha" + "t even an infinitely distant character may respond."

	// Inputs
	input SpeakResponseConcept(string) : "Speak the specified response concept"
	]

@SolidClass base(BaseEntityVisBrush) 
	sphere(fademindist)
	sphere(fademaxdist)
= func_platrot: "A brush entity that moves vertically, and can rotate while doing so."
	[
	spawnflags(flags)  =
		[
		1: "[1] Toggle" : 1
		64: "[64] X Axis" : 0
		128: "[128] Y Axis" : 0
		]

	noise1(sound) : "Movement Sound" : : "The sound to play when the brush moves."
	noise2(sound) : "Stop Sound" : : "The sound to play when the brush stops moving."
	speed(integer) : "Speed of Rotation" : 50 : "Speed at which the brush rotates, in degrees per second."
	height(integer) : "Travel Altitude" : 0 : "The vertical distance from the starting position that this platform moves. If negative, the platform will lower."
	rotation(integer) : "Spin amount" : 0 : "The amount this platform should rotate as it moves, in degrees."

	// Inputs
	input Toggle(void) : "Toggles the platform's state."
	input GoUp(void) : "Tells the platform to go up."
	input GoDown(void) : "Tells the platform to go down."
	]

@SolidClass base(BaseEntityVisBrush, MasterEnt, Button) 
	sphere(fademindist)
	sphere(fademaxdist)
	line(255 255 255, targetname, master)
= func_rot_button: "A brush entity that's designed to be used for a rotating player-useable button. When used by the player, it rotates to a pressed" + " position."
	[
	speed(integer) : "Speed" : 50 : "The speed that the button rotates, in degrees per second."
	health(integer) : "Health (Obsolete)" : 0 : "Legacy method of specifying whether or not the button can be shot to activate it. Use the 'Damage Activates' spawnflag instead."
	wait(integer) : "Delay Before Reset (-1 stay)" : 3 : "Amount of time, in seconds, after the button has been pressed before it returns to the starting position. Once it has returned, " + "it can be used again. If the value is set to -1, the button never returns."
	distance(integer) : "Distance (deg)" : 90 : "The amount, in degrees, that the button should rotate when it's pressed."
	spawnflags(flags)  =
		[
		1: "[1] Not solid" : 0
		2: "[2] Reverse Direction" : 0
		32: "[32] Toggle" : 0
		64: "[64] X Axis" : 0
		128: "[128] Y Axis" : 0
		256: "[256] Touch Activates" : 0
		512: "[512] Damage Activates" : 0
		1024: "[1024] Use Activates" : 0
		2048: "[2048] Starts locked" : 0
		4096: "[4096] Sparks" : 0
		]

	]

@SolidClass base(BaseEntityVisBrush, Origin, Angles) 
	sphere(fademindist)
	sphere(fademaxdist)
= func_rotating: "A rotating brush entity."
	[
	maxspeed(integer) : "Max Rotation Speed" : 100 : "The maximum rotation speed of the brushes, in degrees per second."
	fanfriction(integer) : "Friction (0 - 100%)" : 20 : "The amount of rotational friction. Value must be between 0 and 100 %. Lower values make the brush speed up and slow down faster."
	message(sound) : "Rotating sound WAV" : : "Sound to play while rotating."
	volume(integer) : "Volume (10 = loudest)" : 10 : "The volume of the rotation sound."
	spawnflags(flags)  =
		[
		1: "[1] Start ON" : 0
		2: "[2] Reverse Direction" : 0
		4: "[4] X Axis" : 0
		8: "[8] Y Axis" : 0
		16: "[16] Acc/Dcc" : 0
		32: "[32] Fan Pain" : 0
		64: "[64] Not Solid" : 0
		128: "[128] Small Sound Radius" : 0
		256: "[256] Medium Sound Radius" : 0
		512: "[512] Large Sound Radius" : 1
		]

	dmg(integer) : "Blocking Damage" : 0 : "Damage done to any entity that blocks the rotation, per frame."
	solidbsp(choices) : "Solid Type" : 0 =
		[
		0: "VPhysics"
		1: "BSP"
		]


	// Inputs
	input SetSpeed(integer) : "Set the speed as a ratio of the specified Max Rotation Speed, where 0 is stopped and 1 is the Max Rotation Speed.."
	input Start(void) : "Start the rotator rotating."
	input Stop(void) : "Stop the rotator from rotating."
	input StopAtStartPos(void) : "Stop the rotator from rotating when it gets around to the start position again (on its rotation axis)."
	input StartForward(void) : "Start the rotator rotating forward at maximum speed."
	input StartBackward(void) : "Start the rotator rotating backward at maximum speed."
	input Toggle(void) : "Toggle the rotator between rotating and not rotating."
	input Reverse(void) : "Reverse the direction of rotation of the rotator, preserving the current speed."
	input SnapToStartPos(void) : "Snap to the initial position and stop moving."
	]

@SolidClass base(BaseTank) 
	line(255 255 255, targetname, control_volume)
	line(255 255 255, targetname, TraceFilter)
	sphere(PlayerBBoxDist)
	sphere(minrange)
	sphere(maxrange)
= func_tankmortar: "Brush Mortar Turret"
	[
	imagnitude(integer) : "Explosion Magnitude" : 100
	firedelay(string) : "Shell travel time" : 2 : "How long after the turret fires before the shell impacts"
	firestartsound(sound) : "Firing start sound" : : "Sound of the mortar firing"
	fireendsound(sound) : "Firing end sound"
	incomingsound(sound) : "Incoming Shell Sound" : : "Sound of the shell falling on the target"
	warningtime(float) : "Incoming warning time" : 1 : "How long before the shell impacts to play the warning sound"
	firevariance(float) : "Fire time variance" : 0 : "How much variability to add to fire rate (time +-)"

	// Inputs
	input FireAtWill(void) : "Allow tank to fire next shot as soon as ready."
	]

@SolidClass base(BaseEntityVisBrush) 
	sphere(fademindist)
	sphere(fademaxdist)
	line(255 255 255, targetname, train)
	line(0 255 0, targetname, toptrack)
	line(0 0 255, targetname, bottomtrack)
= func_trackchange: "An entity that works as a rotating/moving platform that will carry a train to a new track. It must be larger in X-Y planar area " + "than the train, since it must contain the train within these dimensions in order to operate when the train is near it. The track" + " will rotate around its own origin. Similar variant to this entity is func_trackautochange, however you can't trigger func_track" + "autochange unless the path_track is a dead end. If Auto Activate Train flag is ticked, train isn't paused at the top/bottom of t" + "he path after func_trackchange has finished it's movement. Instead, it will continue moving forward and doesn't need to be react" + "ivated by trigger. If selected, the platform only rotates in place of it's origin without travelling specified altitude. The top" + " and the bottom path_tracks should have their origin positioned in the same coordinates."
	[
	height(integer) : "Travel Altitude" : 0 : "Travel distance, from top to bottom. If Start at Bottom flag is selected, the travel distance won't change from bottom to top, i" + "t will only make the platform start at bottom and awaits for func_tracktrain to arrive."
	rotation(integer) : "Spin amount" : 0 : "The amount this platform should rotate as it moves, in degrees."
	train(target_destination) : "Train to Switch" : : "Name of func_tracktrain this platform will transport to top/bottom track."
	toptrack(target_destination) : "Top Track" : : "Name of last path_track of the top path (if Start at Bottom flag is selected, this is the name of the first path_track at the to" + "p path)."
	bottomtrack(target_destination) : "Bottom Track" : : "Name of first path_track of the bottom track (if Start at Bottom flag is selected, this is the name of the last path_track at th" + "e bottom path)."
	speed(integer) : "Move/Rotate Speed" : 0 : "Speed in which func_trackchange travel the whole way up/down (units per seconds)."
	spawnflags(flags)  =
		[
		1: "[1] Auto Activate Train - see description" : 0
		2: "[2] Relink Track" : 0
		8: "[8] Start at Bottom - Platform starts at the bottom instead at the top path_track if this flag is ticked" : 0
		16: "[16] Rotate Only - see description" : 0
		64: "[64] X Axis - Train rotates around X axis instead of Z axis. Can be combined with Y Axis" : 0
		128: "[128] Y Axis - Train rotates around Y axis instead of Z axis. Can be combined with X Axis" : 0
		]


	// Inputs
	input Trigger(void) : "Trigger the track change."
	]

@SolidClass base(BaseEntityVisBrush) 
	sphere(fademindist)
	sphere(fademaxdist)
	line(255 255 0, targetname, target)
= func_train: "An old entity leftover from Quake. It follows a series of path_corner entities. While mostly made obsolete by func_tracktrain, t" + "his entity is not affected by the turning inaccuracy issues that that entity has, and may be more suitable for fast-moving objec" + "ts."
	[
	spawnflags(flags)  =
		[
		8: "[8] Non-solid" : 0
		]

	target(target_destination) : "Spawn path_corner" : : "The name of the first path_corner in the train's path. The train will spawn at this path_corner."
	speed(float) : "Speed" : 50 : "Speed at which the train moves."
	noise1(sound) : "Movement Sound" : "Default.Null" : "The sound to play when the train moves. This must be specified, but can be set to 'Default.Null' to play no sound."
	noise2(sound) : "Stop Sound" : "Default.Null" : "The sound to play when the train stops moving. This must be specified, but can be set to 'Default.Null' to play no sound."
	volume(float) : "Sound volume (0-10)" : 10 : "Volume of the sounds emitted when moving and stopping."
	dmg(float) : "Crush Damage" : 0 : "Amount of damage to deal to entities blocking the train."

	// Inputs
	input Toggle(void) : "Toggle movement"
	input Start(void) : "Start movement"
	input Stop(void) : "Stop movement"
	]

@SolidClass base(BaseEntityVisBrush) 
	sphere(fademindist)
	sphere(fademaxdist)
	line(255 255 255, targetname, target)
= func_traincontrols: "When used by the player, this entity overrides the player's controls to let them drive a train."
	[
	target(target_destination) : "Train Name" : : "The target train to control when the player uses these controls."
	]

@SolidClass base(func_wall) = func_wall_toggle: "Legacy Support for Half-Life. Use func_brush instead. A general brush entity which can be toggled on/off When off, the brush wil" + "l be non-solid and invisible. Does not cast lightmap shadows."
	[
	spawnflags(flags)  =
		[
		1: "[1] Starts Invisible" : 0
		]


	// Inputs
	input Toggle(void) : "Toggle the brush on/off. When off, the brush will be non-solid and invisible."
	]

@PointClass base(gibshooterbase) 
	line(255 255 255, targetname, lightingorigin)
	iconsprite("editor/gibshooter.vmt")
	color(200 200 0)
= gibshooter: "An entity that shoots out gibs. Style of body part depends on language type."
	[
	]

@PointClass base(BaseEntityPoint, HintNode) 
	studio("models/editor/node_hint.mdl")
	color(255 255 255)
	sphere(radius)
= info_hint: "A hint that is not used for navigation. They don't go into the nodegraph, nor do they fall to the ground. Use these to provide s" + "ome spatial context for NPCs, such as 'look here if you can't find the player' or 'throw rocks at this spot'."
	[
	]

@PointClass base(BaseEntityPoint, HintNode) 
	studio("models/editor/air_node_hint.mdl")
	color(232 171 8)
	line(255 255 255, nodeid, TargetNode)
	sphere(radius)
= info_node_air_hint: "A navigation node for flying NPCs that includes some context information for NPCs that are interested in it. The hint might indi" + "cate a window that could be looked into, or an item of interest that could be commented on. Many hint nodes are NPC-specific, so" + " it's helpful to use naming conventions like 'Crow: Fly to point' in the hint choices list. The angles of a hint node indicate w" + "hat direction the NPC should face to perform the hint behavior."
	[
	nodeheight(integer) : "NodeHeight" : 0
	]

@PointClass base(BaseEntityPoint, HintNode) 
	studio("models/editor/climb_node.mdl")
	color(153 215 103)
	sphere(radius)
= info_node_climb: "A climb-node for AI navigation. Only usable by NPCs that can climb."
	[
	]

@PointClass base(BaseEntityPoint, HintNode) 
	studio("models/editor/ground_node_hint.mdl")
	color(232 219 8)
	sphere(radius)
= info_node_hint: "A navigation node for ground moving NPCs that includes some context information for NPCs that are interested in it. The hint mig" + "ht indicate a window that could be looked out of, or an item of interest that could be commented on. Many hint nodes are NPC-spe" + "cific, so it's helpful to use naming conventions like 'Crow: Fly to point' in the hint choices list. The angles of a hint node i" + "ndicate what direction the NPC should face to perform the hint behavior.\n\nIt's important to understand the distinction between" + " scripts, such as scripted_sequence and scripted_schedule, and info_hint entities. Scripts summon NPCs to specific cue points to" + " play their parts, while hints provide context information to the AI that they use to perform their behaviors. Hints require cod" + "e support in the NPC, while scripts are generic and may require only animations to play. Use a hint if the behavior is driven by" + " the AI, use a script if the behavior is driven by the map."
	[

	// Outputs
	output OnNPCStartedUsing(string) : "Fired when an NPC has reached this node and started using it. Passes along the NPC."
	output OnNPCStoppedUsing(string) : "Fired when an NPC has stopped using this node. Passes along the NPC."
	]

@PointClass base(BaseEntityAnimating) 
	sphere(fademindist)
	sphere(fademaxdist)
	studio("models/can.mdl")
= item_sodacan: "HL1 soda can."
	[
	]

@MoveClass base(BaseEntityPoint, RopeKeyFrame) 
	studio("models/editor/axis_helper_thick.mdl")
	iconsprite("editor/keyframe_rope")
	animator()
	keyframe()
= keyframe_rope: "A node entity that marks a point in a rope. Traditionally, one move_rope is used to start the chain and then is followed by one " + "or more keyframe_rope entities. However they are freely interchangeable."
	[
	]

@SolidClass base(BaseEntityVisBrush, Angles, MasterEnt) 
	sphere(fademindist)
	sphere(fademaxdist)
	line(255 255 255, targetname, master)
= momentary_rot_button: "A brush entity that's designed to be used for rotating wheels, where the player can rotate them to arbitrary positions before st" + "opping."
	[
	speed(float) : "Speed (deg/sec)" : 50 : "The amount, in degrees, that the wheel turns per second."
	sounds(choices) : "Sounds" : 0 : "Sound played when pressed. Choose from sounds in the Buttons.snd* category." =
		[
		0: "None (Silent)"
		1: "Buttons.snd1: Big zap & Warmup"
		2: "Buttons.snd2: Access Denied"
		3: "Buttons.snd3: Access Granted"
		4: "Buttons.snd4: Quick Combolock"
		5: "Buttons.snd5: Power Deadbolt 1"
		6: "Buttons.snd6: Power Deadbolt 2"
		7: "Buttons.snd7: Plunger"
		8: "Buttons.snd8: Small zap"
		9: "Buttons.snd9: Keycard Sound"
		10: "Buttons.snd10: Buzz"
		11: "Buttons.snd11: Buzz Off"
		12: "Buttons.snd12: Latch locked"
		13: "Buttons.snd13: Latch Unlocked"
		14: "Buttons.snd14: Lightswitch"
		15: "Buttons.snd15: Small bleek"
		16: "Buttons.snd16: Small deny"
		17: "Buttons.snd17: Small doop"
		18: "Buttons.snd18: Small tech deny"
		19: "Buttons.snd19: Click and combine screen fuzz"
		20: "Buttons.snd20: Roomy beep"
		21: "Buttons.snd21: Lever or Wheel: turn + move sqeek"
		22: "Buttons.snd22: Lever or Wheel: latch + release gas"
		23: "Buttons.snd23: Lever or Wheel: ratchet + sqeek"
		24: "Buttons.snd24: Lever or Wheel: large ratchet"
		25: "Buttons.snd25: Lever or Wheel: clanky + gas release"
		26: "Buttons.snd26: Lever or Wheel: latch + large metal thud"
		27: "Buttons.snd27: Lever or Wheel: smaller ratchet"
		28: "Buttons.snd28: Lever or Wheel: smaller lever move"
		31: "Buttons.snd31: Shock buzz"
		32: "Buttons.snd32: Clickbeep"
		33: "Buttons.snd33: Tech blip"
		34: "Buttons.snd34: Clickbeepbeep open"
		35: "Buttons.snd35: Small high blip"
		36: "Buttons.snd36: Small tech fuzz blip"
		37: "Buttons.snd37: Small click bleep (change to lightswitch)"
		40: "Buttons.snd40: Combine door lock - locked"
		41: "Buttons.snd41: Combine blip growl"
		42: "Buttons.snd42: Combine squick growl"
		43: "Buttons.snd43: Combine whine purr"
		44: "Buttons.snd44: Combine click talk"
		45: "Buttons.snd45: Combine click growl fizz"
		46: "Buttons.snd46: Combine click fizz (deny)"
		47: "Buttons.snd47: Combine click talker"
		]

	distance(float) : "Distance" : 90 : "The maximum amount, in degrees, that the wheel is allowed to rotate."
	returnspeed(float) : "Auto-return speed" : 0 : "If the 'Toggle' spawnflag is not set, the speed at which the wheel auto-returns when left alone, in degrees per second."
	spawnflags(flags)  =
		[
		1: "[1] Not Solid" : 1
		32: "[32] Toggle (Disable Auto Return)" : 1
		64: "[64] X Axis" : 0
		128: "[128] Y Axis" : 0
		1024: "[1024] Use Activates" : 1
		2048: "[2048] Starts locked" : 0
		8192: "[8192] Jiggle when used while locked" : 0
		]

	startposition(float) : "Start Position" : 0 : "Postion when spawned. The value is a range between 0.0 and 1.0, where 0 is the unrotated position and 1 is the rotated position " + "+ 'Distance'."
	startdirection(choices) : "Start Direction" : -1 : "Specify the direction the button will move when first used. Ignored if Start Position is 0 or 1." =
		[
		-1: "Forward"
		1: "Backward"
		]


	// Inputs
	input Lock(void) : "Lock the button, preventing it from functioning."
	input Unlock(void) : "Unlock the button, allowing it to function."
	input SetPosition(string) : "Move to a position. The parameter must be a value between 0 and 1, where 0 is the unrotated position and 1 is the rotated positi" + "on + 'Distance'."
	input SetPositionImmediately(string) : "Immediately teleport to a position. The parameter must be a value between 0 and 1, where 0 is the unrotated position and 1 is th" + "e rotated position + 'Distance'."
	input _DisableUpdateTarget(void) : "Prevent the Position output from firing. Used when lock jiggling is triggered."
	input _EnableUpdateTarget(void) : "Allow the Position output to fire again. Used when lock jiggling is triggered."

	// Outputs
	output Position(integer) : "Fired whenever the button moves. The output is the position of button from 0 to 1, where 0 is the unrotated position and 1 is th" + "e rotated position + 'Distance'."
	output OnPressed(integer) : "Fired when the button is first pressed."
	output OnUnpressed(integer) : "Fired when the button is first released from being pressed."
	output OnFullyClosed(void) : "Fired when the button has reached position 1, the rotated position + 'Distance'."
	output OnFullyOpen(void) : "Fired when the button has reached position 0, the unrotated starting position."
	output OnReachedPosition(void) : "Fired whenever the button reaches a goal position: i.e. when it becomes open, becomes closed, or reaches the point specified by " + "a 'SetPosition' input."
	]

@MoveClass base(BaseEntityPoint, RopeKeyFrame) 
	studio("models/editor/axis_helper_thick.mdl")
	iconsprite("editor/move_rope")
	animator()
	keyframe()
= move_rope: "A node entity that marks a point in a rope. Traditionally, one move_rope is used to start the chain and then is followed by one " + "or more keyframe_rope entities. However they are freely interchangeable."
	[
	]

@PointClass base(BaseNPCMaker) 
	color(0 0 255)
	iconsprite("editor/ficool2/npc_template_maker.vmt")
	line(255 255 0, targetname, templatename)
	sphere(radius)
	line(255 255 0, targetname, destinationgroup)
= npc_template_maker: "An entity that creates NPCs. The NPCs it creates are clones of a template NPC. NPCs are spawned around this maker's origin, or a" + "t specified destination points."
	[
	spawnflags(flags)  =
		[
		256: "[256] Always use radius spawn" : 0
		512: "[512] Don't preload template models" : 0
		]

	templatename(target_destination) : "Name of template NPC" : : "Template NPC that this maker should be creating clones of."
	radius(float) : "Radius" : 256 : "Radius around this maker within which NPCs are to be placed. Spawned NPCs will try and find empty space within this radius to sp" + "awn."
	destinationgroup(target_destination) : "Name of Destination Group" : : "If you'd like spawned NPCs to be created at an info_npc_spawn_destination entity, enter the name of that entity here. If you hav" + "e more than one destination entity by that name, the Destination Criteria will be used to select one from the group."
	criterionvisibility(choices) : "Dest. Criterion: Visible to player?" : 2 : "Should the NPC try to spawn at a destination that the player can see? Only applicable if a Destination Group is being used." =
		[
		0: "Yes"
		1: "No"
		2: "Don't Care"
		]

	criteriondistance(choices) : "Dest. Criterion: Distance to player?" : 2 : "Should the NPC try to spawn nearest to or farthest from the player's current location? Only applicable if a Destination Group is" + " being used." =
		[
		0: "Nearest"
		1: "Farthest"
		2: "Don't Care"
		]

	minspawndistance(integer) : "Minimum spawn distance from player" : 0 : "The spawn destination node distance to the player will have to be further or equal than this value."

	// Inputs
	input SpawnNPCInRadius(void) : "Spawn an NPC somewhere within the maker's radius."
	input SpawnNPCInLine(void) : "Spawn an NPC somewhere within a line behind the maker."
	input SpawnMultiple(integer) : "Spawn multiple NPCs (uses destination group, else radius)."
	input ChangeDestinationGroup(target_destination) : "Switch to a different set of Destination entities."
	input SetMinimumSpawnDistance(integer) : "Set the minimum spawn distance from player to destination node."
	]

@PointClass base(TwoObjectPhysics) 
	line(255 255 0, targetname, attach1)
	line(0 0 255, targetname, attach2)
	line(128 128 128, targetname, constraintsystem)
	sphere(teleportfollowdistance)
	iconsprite("editor/phys_ballsocket.vmt")
	line(255 255 255, targetname, attach1)
	line(255 255 255, targetname, attach2)
	line(128 128 128, targetname, attach1, targetname, attach2)
	color(128 128 128)
= phys_ballsocket: "A constraint that keeps the position of two objects fixed, relative to the constraint's origin. It does not affect rotation."
	[
	]

@PointClass base(TwoObjectPhysics) 
	line(255 255 0, targetname, attach1)
	line(0 0 255, targetname, attach2)
	line(128 128 128, targetname, constraintsystem)
	sphere(teleportfollowdistance)
	studio("models/editor/axis_helper.mdl")
	line(255 255 255, targetname, attach1)
	line(255 255 255, targetname, attach2)
	line(128 128 128, targetname, attach1, targetname, attach2)
	color(128 128 128)
= phys_constraint: "A constraint that keeps the relative position and orientation of two objects fixed."
	[
	]

@PointClass base(TwoObjectPhysics) 
	line(255 255 0, targetname, attach1)
	line(0 0 255, targetname, attach2)
	line(128 128 128, targetname, constraintsystem)
	sphere(teleportfollowdistance)
	line(128 128 128, targetname, attach1)
	line(128 128 128, targetname, attach2)
	line(128 128 128, targetname, attach1, targetname, attach2)
	color(128 128 128)
	iconsprite("editor/ficool2/phys_hinge")
= phys_hinge: "A physically simulated hinge. Use the helper to define the axis of rotation."
	[
	hingefriction(float) : "Friction" : 0 : "Resistance/friction in the hinge"
	hingeaxis(vecline) : "Hinge Axis"
	systemloadscale(float) : "Load Scale" : 1 : "Scale of the load connected to this hinge (1=just the objects directly connected)"
	minsoundthreshold(float) : "Minimum Sound Velocity" : 6 : "When travelling below this many units/sec, will not play any sound."
	maxsoundthreshold(float) : "Full Sound Velocity" : 80 : "When travelling at this speed or above, will play sound at full volume."
	slidesoundfwd(sound) : "Travel sound (forward)" : : "Play this sound when travelling forward on helper axis"
	slidesoundback(sound) : "Travel sound (backward)" : : "Play this sound when travelling backward on helper axis"
	reversalsoundthresholdsmall(float) : "Reversal sound threshold (small)" : 0 : "When accelerating by more than this many units/sec^2 opposite to direction of travel, play the small reversal sound."
	reversalsoundthresholdmedium(float) : "Reversal sound threshold (medium)" : 0 : "When accelerating by more than this many units/sec^2 opposite to direction of travel, play the medium reversal sound."
	reversalsoundthresholdlarge(float) : "Reversal sound threshold (large)" : 0 : "When accelerating by more than this many units/sec^2 opposite to direction of travel, play the large reversal sound."
	reversalsoundsmall(sound) : "Reversal sound (small)" : : "Play this sound when making a hard reverse over the small threshold but less than medium"
	reversalsoundmedium(sound) : "Reversal sound (medium)" : : "Play this sound when making a hard reverse over the medium threshold but less than large"
	reversalsoundlarge(sound) : "Reversal sound (large)" : : "Play this sound when making a hard reverse over the large threshold"

	// Inputs
	input SetAngularVelocity(float) : "Set angular velocity around the hinge (motor) in deg/sec"
	]

@PointClass base(TwoObjectPhysics) 
	line(255 255 0, targetname, attach1)
	line(0 0 255, targetname, attach2)
	line(128 128 128, targetname, constraintsystem)
	sphere(teleportfollowdistance)
	studio("models/editor/axis_helper.mdl")
	line(255 255 255, targetname, attach1)
	line(255 255 255, targetname, attach2)
	line(128 128 128, targetname, attach1, targetname, attach2)
	sphere(minlength)
	color(128 128 128)
= phys_lengthconstraint: "A constraint that preserves the distance between two entities. If the 'Keep Rigid' flag is set, think of it as a rod. If not, th" + "ink off it as a virtual rope."
	[
	addlength(float) : "Additional Length" : 0 : "Add (or subtract) this amount to the rest length of the rope."
	minlength(float) : "Minimum Length" : 0 : "If the constraint is not rigid, this is the minimum length it can be."
	attachpoint(vecline) : "Attached object 2 point" : "The position the rope attaches to object 2"
	spawnflags(flags)  =
		[
		1: "[1] No Collision until break" : 1
		2: "[2] Keep Rigid" : 0
		]

	]

@PointClass base(BaseEntityAnimating, SetModel) 
	sphere(fademindist)
	sphere(fademaxdist)
	studioprop()
	studio()
	color(128 128 128)
	iconsprite("editor/phys_magnet")
= phys_magnet: "An entity that acts like a magnet, attaching metallic physics objects to itself when they touch it."
	[
	spawnflags(flags)  =
		[
		1: "[1] Start Asleep" : 0
		2: "[2] Motion Disabled" : 0
		4: "[4] Suck On Touch" : 0
		8: "[8] Allow Attached Rotation" : 0
		16: "[16] Coast jeep pickup hack" : 0
		]

	forcelimit(float) : "Force Limit to Break (lbs)" : 0 : "The amount of force necessary to break a stuck object off the magnet. A way of calculating this is to set it to the mass of an o" + "bject that would break this constraint if it were resting on the magnet."
	torquelimit(float) : "Torque Limit to Break (lbs * distance)" : 0 : "The amount of torque necessary to break a stuck object off the magnet. A way of calculating this is to multiply any reference ma" + "ss by the resting distance (from the center of mass of the object) needed to break the constraint."
	massscale(float) : "Mass Scale" : 0 : "A scale multiplier for the object's mass."
	overridescript(string) : "Override parameters" : : "A list of physics key/value pairs that are usually in a physics prop .qc file. Format is 'key,value,key,value,etc'."
	maxobjects(integer) : "Maximum Attached Objects" : 0 : "The maximum number of physics objects that can be stuck to the magnet at once. 0 = no limit."

	// Inputs
	input TurnOn(void) : "Turn the magnet on."
	input TurnOff(void) : "The the magnet off. This will detach anything current stuck to the magnet."
	input Toggle(void) : "Toggle the magnet on or off."

	// Outputs
	output OnAttach(void) : "Fired when an entity is grabbed by the magnet."
	output OnDetach(void) : "Fired when an entity is released by the magnet."
	]

@PointClass base(TwoObjectPhysics) 
	line(255 255 0, targetname, attach1)
	line(0 0 255, targetname, attach2)
	line(128 128 128, targetname, constraintsystem)
	sphere(teleportfollowdistance)
	studio("models/editor/axis_helper.mdl")
	line(255 255 255, targetname, attach1)
	line(255 255 255, targetname, attach2)
	line(128 128 128, targetname, attach1, targetname, attach2)
	color(128 128 128)
= phys_pulleyconstraint: "A constraint that is essentially two length constraints and two points. Imagine it as a virtual rope connected to two objects, e" + "ach suspended from a pulley above them. The constraint keeps the sum of the distances between the pulley points and their suspen" + "ded objects constant."
	[
	addlength(float) : "Additional Length" : 0 : "Add (or subtract) this amount to the rest length of the pulley rope."
	gearratio(float) : "Pulley Gear Ratio" : 1 : "Add (or subtract) this amount to the rest length of the pulley rope."
	position2(vecline) : "Pulley Position 2" : : "The position of the pulley for Entity 2. The pulley for Entity 1 is the origin of this constraint entity. Entity 1 is always sus" + "pended from pulley point 1, and Entity 2 is always suspended from pulley point 2."
	spawnflags(flags)  =
		[
		1: "[1] No Collision until break" : 1
		2: "[2] Keep Rigid" : 0
		]

	]

@PointClass base(TwoObjectPhysics) 
	line(255 255 0, targetname, attach1)
	line(0 0 255, targetname, attach2)
	line(128 128 128, targetname, constraintsystem)
	sphere(teleportfollowdistance)
	studio("models/editor/axis_helper.mdl")
	line(255 255 255, targetname, attach1)
	line(255 255 255, targetname, attach2)
	line(128 128 128, targetname, attach1, targetname, attach2)
	color(128 128 128)
= phys_ragdollconstraint: "A constraint that fixes the position of two entities, relative to this constraint's origin. Also allows for limits on the rotati" + "on around each axis, in the space of this constraint."
	[
	spawnflags(flags)  =
		[
		1: "[1] No Collision until break" : 1
		2: "[2] Only limit rotation (free movement)" : 0
		]

	xmin(float) : "X axis min limit" : -90 : "-180 min and 180 max = no constraint on this axis."
	xmax(float) : "X axis max limit" : 90 : "-180 min and 180 max = no constraint on this axis."
	ymin(float) : "Y axis min limit" : 0 : "-180 min and 180 max = no constraint on this axis."
	ymax(float) : "Y axis max limit" : 0 : "-180 min and 180 max = no constraint on this axis."
	zmin(float) : "Z axis min limit" : 0 : "-180 min and 180 max = no constraint on this axis."
	zmax(float) : "Z axis max limit" : 0 : "-180 min and 180 max = no constraint on this axis."
	xfriction(float) : "X axis friction" : 0
	yfriction(float) : "Y axis friction" : 0
	zfriction(float) : "Z axis friction" : 0
	]

@PointClass base(TwoObjectPhysics) 
	line(255 255 0, targetname, attach1)
	line(0 0 255, targetname, attach2)
	line(128 128 128, targetname, constraintsystem)
	sphere(teleportfollowdistance)
	halfgridsnap
	studio("models/editor/axis_helper.mdl")
	line(255 255 255, targetname, attach1)
	line(255 255 255, targetname, attach2)
	line(128 128 128, targetname, attach1, targetname, attach2)
	color(128 128 128)
= phys_slideconstraint: "A constraint that constrains an entity along a line segment."
	[
	spawnflags(flags)  =
		[
		1: "[1] No Collision until break" : 1
		2: "[2] Limit Endpoints" : 0
		]

	slideaxis(vecline) : "Sliding Axis"
	slidefriction(float) : "Friction" : 0 : "Resistance/friction in the constraint"
	systemloadscale(float) : "Load Scale" : 1 : "Scale of the mass load connected to this constraint (1=just the objects directly connected)"
	minsoundthreshold(float) : "Minimum Sound Velocity" : 6 : "When travelling below this many units/sec, will not play any sound."
	maxsoundthreshold(float) : "Full Sound Velocity" : 80 : "When travelling at this speed or above, will play sound at full volume."
	slidesoundfwd(sound) : "Travel sound (forward)" : : "Play this sound when travelling forward on helper axis"
	slidesoundback(sound) : "Travel sound (backward)" : : "Play this sound when travelling backward on helper axis"
	reversalsoundthresholdsmall(float) : "Reversal sound threshold (small)" : 0 : "When accelerating by more than this many units/sec^2 opposite to direction of travel, play the small reversal sound."
	reversalsoundthresholdmedium(float) : "Reversal sound threshold (medium)" : 0 : "When accelerating by more than this many units/sec^2 opposite to direction of travel, play the medium reversal sound."
	reversalsoundthresholdlarge(float) : "Reversal sound threshold (large)" : 0 : "When accelerating by more than this many units/sec^2 opposite to direction of travel, play the large reversal sound."
	reversalsoundsmall(sound) : "Reversal sound (small)" : : "Play this sound when making a hard reverse over the small threshold but less than medium"
	reversalsoundmedium(sound) : "Reversal sound (medium)" : : "Play this sound when making a hard reverse over the medium threshold but less than large"
	reversalsoundlarge(sound) : "Reversal sound (large)" : : "Play this sound when making a hard reverse over the large threshold"

	// Inputs
	input SetVelocity(float) : "Set linear velocity along the constraint"
	]

@PointClass base(Angles, ForceController) 
	line(128 128 128, targetname, attach1)
	line(255 255 255, targetname, attach1)
	color(128 128 128)
= phys_thruster: "An entity used to apply constant acceleration to a physics object. The force and torque is calculated using the position and dir" + "ection of the thruster as an impulse. So moving those off the object's center will cause torque as well. Torque can be removed b" + "y unchecking the 'apply torque' flag. The position of the thruster can be forced to be at the object's center by checking to 'ig" + "nore pos' flag."
	[
	spawnflags(flags)  =
		[
		32: "[32] Ignore Pos" : 0
		]

	force(string) : "Force" : 0 : "Force (will be integrated, units are force kg*in/s^2)"
	]

@PointClass base(ForceController) 
	line(128 128 128, targetname, attach1)
	halfgridsnap
	line(255 255 255, targetname, attach1)
	color(128 128 128)
= phys_torque: "An angular thruster. Use it to apply angular force to an entity."
	[
	force(string) : "Angular Acceleration" : 0
	axis(vecline) : "Rotation Axis"
	]

@PointClass base(BaseEntityPhysics) 
	sphere(fademindist)
	sphere(fademaxdist)
	sphere(expradius)
	studioprop()
= physics_cannister: "A physically simulated gas cannister that can have its cap shot off, at which point gas will start escaping and cause the cannis" + "ter to fly around. If it takes enough damage, it will explode. The model should have a 'nozzle' attachment point, which is where" + " gas will escape and thrust will be produced from."
	[
	model(studio) : "World model" : : "The model used for the cannister. The original model is fire_equipment/w_weldtank.mdl."
	spawnflags(flags)  =
		[
		1: "[1] Start Asleep" : 0
		2: "[2] Explodes" : 1
		]

	expdamage(float) : "Explosion Damage" : "200.0" : "The amount of damage done by the explosion created when the cannister blows up."
	expradius(float) : "Explosion Radius" : "250.0" : "The radius of the explosion to create when the cannister blows up."
	health(integer) : "Health" : 25 : "The amount of damage the cannister takes before exploding."
	thrust(float) : "Thrust" : "3000.0" : "When the cap has been blown off, and the escaping gas is thrusting the cannister about, this is the amount of thrust generated."
	fuel(float) : "Fuel Seconds" : "12.0" : "The amount of time that gas leaks from the cannister before being considered empty."
	rendercolor(color255) : "Smoke Color (R G B)" : "255 255 255"
	renderamt(integer) : "Smoke Alpha (0 - 255)" : 128
	gassound(sound) : "Thruster Sound" : "ambient/objects/cannister_loop.wav" : "The sound played when the gas is escaping from the cannister."

	// Inputs
	input Activate(string) : "Start gas escaping from the cannister."
	input Deactivate(string) : "Stop gas escaping from the cannister."
	input Explode(string) : "Force the cannister to explode."
	input Wake(void) : "Wakes up the cannister, if it is sleeping."

	// Outputs
	output OnActivate(void) : "Fired when gas starts to escape from the cannister."
	output OnAwakened(void) : "Fired when this entity becomes awake (collision/force is applied)."
	]

@PointClass base(BaseEntityAnimating, EnableDisable) 
	sphere(fademindist)
	sphere(fademaxdist)
	studio("models/extras/info_speech.mdl")
= point_commentary_node: "Commentary node for the developer commentary. Usually added after-the-fact by the commentary system, but can also be placed manu" + "ally."
	[
	commentaryfile(sound) : "Commentary File" : : "The sound that will play when this is triggered."
	commentaryfile_nohdr(sound) : "Commentary File (no HDR)" : : "If HDR is off and this exists it will be played instead."
	speakers(string) : "Speaker(s)" : : "The characters/people who are saying the commentary."
	startdisabled(choices) : "Start Disabled" : 0 : "Should it be disabled or not?" =
		[
		0: "No"
		1: "Yes"
		]

	prevent_movement(choices) : "Prevent Movement?" : 0 : "If enabled players won't be able to move while the commentary is playing." =
		[
		0: "No"
		1: "Yes"
		]

	precommands(string) : "Pre-Command" : : "Command that will fire before the sound file is played. Use semicolons to delimit multiple commands."
	postcommands(string) : "Post-Command" : : "Command that will fire after the sound file is played. Also accepts semicolons."
	viewposition(target_destination) : "View Position" : : "Targetname of the entity the player's view will move to."
	viewtarget(target_destination) : "View Target" : : "Targetname of the entity the player's view will track. If set, the player cannot move their camera."

	// Inputs
	input StartCommentary(void) : "Start the commentary, just like if the player +USEd this."
	input StopCommentary(void) : "Force the commentary node to stop."
	input StartUnstoppableCommentary(void) : "Start the commentary but don't let the player cancel it."

	// Outputs
	output OnCommentaryStarted(void) : "Triggered when the commentary starts."
	output OnCommentaryStopped(void) : "Triggered when the commentary stops. If viewposition is set, this triggers after the player's returns to their regular view."
	]

@PointClass base(BaseEntityAnimating, SetModel, Glow) 
	sphere(fademindist)
	sphere(fademaxdist)
	studioprop()
= prop_door_rotating: "An entity used to place a door in the world."
	[
	slavename(target_destination) : "Slave Name" : : "The name of any doors that should be slaved to this door (i.e. should open when this one opens, and close when this one closes)."
	hardware(choices) : "Hardware Type" : 1 =
		[
		0: "<None>"
		1: "Lever"
		2: "Push bar"
		3: "Keypad"
		]

	ajarangles(angle) : "Ajar Angles (Pitch Yaw Roll)" : "0 0 0" : "If the door 'Spawn Position' is set to Ajar, these are the angles to spawn at, instead of being open or closed."
	spawnpos(choices) : "Spawn Position" : 0 =
		[
		0: "Closed"
		1: "Open clockwise"
		2: "Open counter-clockwise"
		3: "Ajar (use Ajar Angles)"
		]

	axis(axis) : "Hinge Axis"
	distance(float) : "Rotation Distance (deg)" : 90 : "The amount, in degrees, that the door should rotate when opened."
	speed(integer) : "Speed" : 100 : "The speed at which the door moves."
	soundopenoverride(sound) : "Fully Open Sound" : : "Sound played when the door has finished opening."
	soundcloseoverride(sound) : "Fully Closed Sound" : : "Sound played when the door has finished closing."
	soundmoveoverride(sound) : "Moving Sound" : : "Sound played when the door starts to move."
	returndelay(integer) : "Delay Before close (-1 stay open)" : -1 : "Amount of time, in seconds, after the door has opened before it closes. If the value is set to -1, the door never closes itself."
	dmg(integer) : "Damage Inflicted When Blocked" : 0 : "Amount of damage done to entities that block the movement of this door, per frame."
	health(integer) : "Health (0 = Unbreakable)" : 0
	soundlockedoverride(sound) : "Locked Sound" : : "Sound played when the player tries to open the door, and fails because it's locked."
	soundunlockedoverride(sound) : "Unlocked Sound" : : "Sound played when the door is unlocked."
	forceclosed(choices) : "Force Closed" : 0 : "If set, this door will close no matter what. Useful for doors that have to close even if the player tries to block them with obj" + "ects." =
		[
		0: "No"
		1: "Yes"
		]

	spawnflags(flags)  =
		[
		2048: "[2048] Starts locked" : 0
		4096: "[4096] Door silent (No sound, and does not alert NPCs)" : 0
		8192: "[8192] Use closes" : 1
		16384: "[16384] Door silent to NPCS (Does not alert NPCs)" : 0
		32768: "[32768] Ignore player +USE" : 0
		524288: "[524288] Start Unbreakable" : 0
		]

	opendir(choices) : "Open Direction" : 0 : "Force the door to open only forwards or only backwards. Both directions is the standard door behavior." =
		[
		0: "Open Both Directions"
		1: "Open Clockwise Only"
		2: "Open Counter-Clockwise Only"
		]


	// Inputs
	input Open(void) : "Open the door, if it is not fully open."
	input OpenAwayFrom(string) : "Open the door away from the specified entity."
	input Close(void) : "Close the door, if it is not fully closed."
	input Toggle(void) : "Toggle the door between open and closed."
	input Lock(void) : "Lock the door."
	input Unlock(void) : "Unlock the door."
	input SetRotationDistance(float) : "Set the distance (in degrees) between Open and Closed."
	input SetSpeed(float) : "Set the speed at which the door rotates. 100 is default."
	input SetUnbreakable(void) : "The door can't be broken."
	input SetBreakable(void) : "The door can be broken."

	// Outputs
	output OnClose(void) : "Fired when the door is told to close."
	output OnOpen(void) : "Fired when the door is told to open."
	output OnFullyOpen(void) : "Fired when the door reaches the fully open position."
	output OnFullyClosed(void) : "Fired when the door reaches the fully closed position."
	output OnBlockedClosing(void) : "Fired when the door is blocked while closing."
	output OnBlockedOpening(void) : "Fired when the door is blocked while opening."
	output OnUnblockedClosing(void) : "Fired when the door is unblocked while closing."
	output OnUnblockedOpening(void) : "Fired when the door is unblocked while opening."
	output OnLockedUse(void) : "Fired when the player uses the door, but it is locked."
	output OnBreak(void) : "Fired when the door changes damage states."
	]

@BaseClass base(BaseEntityAnimating, SetModel, BreakableProp) = prop_dynamic_base
	[
	spawnflags(flags)  =
		[
		64: "[64] Use Hitboxes for Renderbox" : 0
		256: "[256] Start with collision disabled" : 0
		]

	defaultanim(string) : "Default Animation" : : "The name of the idle animation that this prop will revert to whenever it finishes a random or forced animation."
	minanimtime(float) : "Min Random Anim Time" : 5 : "Minimum time between random animations."
	maxanimtime(float) : "Max Random Anim Time" : 10 : "Maximum time between random animations."
	lagcompensate(choices) : "Lag Compensation" : 0 : "Set to Yes to lag compensate this prop, should be use very sparingly!" =
		[
		0: "No"
		1: "Yes"
		]

	glowbackfacemult(float) : "Glow backface Multiplier" : "1.0" : "What to multiply glow by on backfaces,"

	// Inputs
	input SetAnimation(string) : "Force the prop to play an animation. The parameter should be the name of the animation."
	input SetDefaultAnimation(string) : "Set the Default Animation to the one specified in the parameter."
	input SetPlaybackRate(float) : "Set the playback rate for the animation."
	input SetBodyGroup(integer) : "Set the visible bodygroup, by index."
	input TurnOn(void) : "Make the prop visible."
	input TurnOff(void) : "Make the prop invisible."
	input EnableCollision(void) : "Enable collision on the prop."
	input DisableCollision(void) : "Disable collision on the prop."

	// Outputs
	output OnAnimationBegun(void) : "Fired whenever a new animation has begun playing."
	output OnAnimationDone(void) : "Fired whenever an animation is complete."
	]

@PointClass base(BaseEntityPhysics, SetModel) 
	sphere(fademindist)
	sphere(fademaxdist)
	studioprop()
= prop_fuel_barrel: "A physics prop that acts like a barrel of fuel when shot"
	[
	spawnflags(flags)  =
		[
		1: "[1] Start Asleep" : 0
		]

	fademindist(float) : "Start Fade Dist/Pixels" : -1 : "Distance at which the prop starts to fade (<0 = subtract from fademaxdist)."
	fademaxdist(float) : "End Fade Dist/Pixels" : 0 : "Maximum distance at which the prop is visible (0 = don't fade out)."
	fadescale(float) : "Fade Scale" : 1 : "If you specify a fade in the worldspawn, or if the engine is running under low end/medium end/XBox360, then the engine will forc" + "ibly fade out props even if fademindist/fademaxdist isn't specified. This scale factor gives you some control over the fade. Usi" + "ng 0 here turns off the forcible fades. Numbers smaller than 1 cause the prop to fade out at further distances, and greater than" + " 1 cause it to fade out at closer distances."
	model(studio) : "World model" : "models/props_industrial/barrel_fuel.mdl"
	basepiece(studio) : "Base Piece" : "models/props_industrial/barrel_fuel_partb.mdl"
	flyingpiece01(studio) : "Flying Piece 1" : "models/props_industrial/barrel_fuel_parta.mdl"
	flyingpiece02(studio) : "Flying Piece 2"
	flyingpiece03(studio) : "Flying Piece 3"
	flyingpiece04(studio) : "Flying Piece 4"
	detonateparticles(string) : "Detonation Particles" : "weapon_pipebomb"
	flyingparticles(string) : "Flying Piece Particles" : "barrel_fly"
	detonatesound(sound) : "Sound played when the object explodes." : "BaseGrenade.Explode"
	]

@PointClass base(BaseEntityPhysics, EnableDisable, DXLevelChoice, SystemLevelChoice, SetModel) 
	sphere(fademindist)
	sphere(fademaxdist)
	studioprop()
= prop_ragdoll: "A prop that physically simulates and can be articulated with internal joints. The joint constraints are part of the physics mode" + "l."
	[
	spawnflags(flags)  =
		[
		4: "[4] Debris - Don't collide with the player or other debris" : 1
		8192: "[8192] Allow Dissolve" : 0
		16384: "[16384] Motion Disabled" : 0
		32768: "[32768] Allow stretch" : 0
		65536: "[65536] Start asleep" : 0
		]

	angleoverride(string) : "Override Animation" : : "Filled in by the engine via hammer_update_entity, do not edit by hand except to clear."

	// Inputs
	input StartRagdollBoogie(float) : "Begins ragdoll boogie effect. Parameter override = number of seconds to boogie."
	input EnableMotion(void) : "Enable physics motion/collision response."
	input DisableMotion(void) : "Disable physics motion/collision response."
	input FadeAndRemove(float) : "Fade out then remove (kill) self. Parameter override = duration of fade"
	]

@PointClass base(BaseEntityAnimating, SetModel) 
	sphere(fademindist)
	sphere(fademaxdist)
	studioprop()
= prop_wall_breakable: "A section of wall that's breakable just like doors are."
	[
	spawnflags(flags)  =
		[
		524288: "[524288] Start Unbreakable" : 0
		]


	// Inputs
	input SetUnbreakable(void) : "The wall can't be broken."
	input SetBreakable(void) : "The wall can be broken."

	// Outputs
	output OnBreak(void) : "Fired when the wall changes damage states."
	]

@PointClass base(BaseEntityPhysics, SetModel) 
	sphere(fademindist)
	sphere(fademaxdist)
	studioprop()
= scripted_item_drop: "An item with basic physics that detects player touch."
	[
	]

@PointClass base(logic_choreographed_scene) 
	iconsprite("editor/choreo_scene.vmt")
	color(240 180 250)
	line(240 180 250, targetname, target1)
	line(240 180 250, targetname, target2)
	line(240 180 250, targetname, target3)
	line(240 180 250, targetname, target4)
	line(240 180 250, targetname, target5)
	line(240 180 250, targetname, target6)
	line(240 180 250, targetname, target7)
	line(240 180 250, targetname, target8)
= scripted_scene: "Alternate name for logic_choreographed_scene."
	[
	]

@SolidClass base(BaseEntityVisBrush) 
	sphere(fademindist)
	sphere(fademaxdist)
= simple_physics_brush: "A simple physics brush with no unique properties. Brush-based entities converted by phys_convert are turned into this entity. Us" + "e func_physbox instead for more options."
	[
	]

@SolidClass base(TriggerOnce) 
	line(255 255 255, targetname, filtername)
= trigger_autosave: "A trigger volume that autosaves when the player touches it."
	[
	newlevelunit(choices) : "Force New Level Unit" : 0 : "If set, the save will discard any savedata from previous levels, for the purpose of keeping savegame filesizes down. Can only be" + " safely used if there is no way for the player to return to previous levels." =
		[
		0: "No"
		1: "Yes"
		]

	dangeroustimer(float) : "Dangerous Timer" : 0 : "The number of seconds the player must survive before this autosave takes effect."
	minimumhitpoints(integer) : "Minumum Hit Points" : 0 : "Don't save dangerous when player has less than this many hitpoints."
	]

@PointClass base(BaseEntityAnimating, EnableDisable) 
	sphere(fademindist)
	sphere(fademaxdist)
	studioprop()
= trigger_finale: "Finale Trigger"
	[
	model(studio) : "World model" : "models/props_misc/german_radio.mdl"
	firstusedelay(float) : "First Use Delay" : 0 : "For two-part finale starts, delays this many seconds before allowing another +use."
	usedelay(float) : "Use Delay" : 0 : "Starts the finale this many seconds after a +use."
	type(choices) : "Finale Type" : 0 : "Specifies which style of finale to trigger" =
		[
		0: "Standard"
		1: "Gauntlet"
		2: "Custom"
		4: "Scavenge"
		]

	scriptfile(string) : "Script File"
	versustravelcompletion(float) : "Versus Travel" : "0.2" : "How much of the versus score is attained through travel to the finale ( not valid in gauntlet finale )"
	issacrificefinale(choices) : "Is Sacrifice Finale" : 0 : "If true, one survivor has to be available to perform some action outside the escape vehicle." =
		[
		0: "No"
		1: "Yes"
		]


	// Inputs
	input FinaleEscapeFinished(void) : "Give the survivors a victory."
	input FinaleEscapeForceSurvivorPositions(void) : "Make the survivors stand still on the escape vehicle."
	input FinaleEscapeVehicleReadyForSurvivors(void) : "Unlocks the escape vehicle navigation mesh areas, and makes survivors speak out that the vehicle has arrived."
	input ForceFinaleStart(void) : "Start the finale now."
	input GauntletStopPanic(void) : "Move the gauntlet finale state out of continuous panic mode"
	input AdvanceFinaleState(void) : "Increments the finale state"
	input SacrificeEscapeFailed(void) : "Indicates the survivors failed the escape requirements"
	input SacrificeEscapeSucceeded(void) : "Indicates the surviors met the escape requirements"
	input SacrificePlayerBeginsRun(void) : "A player ( !Activator ) has committed to the sacrifice run"
	input ForceTankSpawn(void) : "Possibly only for Gauntlet style finale in-play."

	// Outputs
	output FinaleEscapeStarted(void) : "Fired when the survivors should start their escape."
	output FinaleWon(void) : "Fired when the survivors win the finale."
	output FinaleLost(void) : "Fired when the survivors lose the finale."
	output FirstUseStart(void) : "Fired when a player uses the trigger the first time."
	output UseStart(void) : "Fired when a player uses the trigger to start the finale."
	output FinaleStart(void) : "Fired when the finale starts."
	output FinalePause(void) : "Fired during the pause between each finale wave."
	output EscapeVehicleLeaving(void) : "Fired when the escape vehicle starts to leave."
	]

@SolidClass base(TriggerOnce) 
	line(255 255 255, targetname, filtername)
= trigger_once: "A trigger volume that removes itself after it is triggered once."
	[
	]

@PointClass base(BaseEntityAnimating) 
	sphere(fademindist)
	sphere(fademaxdist)
	studioprop()
= trigger_standoff: "Standoff Trigger"
	[
	model(studio) : "World model" : "models/props_misc/german_radio.mdl"
	spawnflags(flags)  =
		[
		512: "[512] Diable +use" : 0
		]

	useduration(float) : "Use Duration" : 0 : "Seconds a survivor must +use the trigger to start the finale (0 is instantaneous)."
	usedelay(float) : "Use Delay" : 0 : "Starts the finale this many seconds after a +use."

	// Inputs
	input FinaleEscapeFinished(void) : "Give the survivors a victory."
	input FinaleEscapeForceSurvivorPositions(void) : "Make the survivors stand still on the escape vehicle."
	input FinaleEscapeVehicleReadyForSurvivors(void) : "Make survivors say something about how the vehicle has stopped now."
	input ForceFinaleStart(void) : "Start the finale now."

	// Outputs
	output FinaleEscapeStarted(void) : "Fired when the survivors should start their escape."
	output FinaleWon(void) : "Fired when the survivors win the finale."
	output FinaleLost(void) : "Fired when the survivors lose the finale."
	output UseStart(void) : "Fired when a duration-based +use starts."
	output UseCancel(void) : "Fired when a duration-based +use is stopped early."
	output FinaleStart(void) : "Fired when the finale starts."
	output FinalePause(void) : "Fired during the pause between each finale wave."
	output EscapeVehicleLeaving(void) : "Fired when the escape vehicle starts to leave."
	]

@BaseClass base(BaseLogicalNPC) = BaseNPC: "Behaviour only applicable to visible NPCs."
	[
	target(target_destination) : "Target Path Corner" : : "If set, the name of a path corner entity that this NPC will walk to, after spawning."
	expressionoverride(sound) : "Expression Override" : : "Enter a VCD file to override facial expressions on this NPC."
	dontusespeechsemaphore(choices) : "Don't Use Speech Semaphore?" : 0 : "Friendly NPCs are not allowed to speak if another friendly NPC is speaking. In some cases we don't want speaking NPCs to prevent" + " other NPCs from speaking (for instance, if there is a friendly NPC speaking for a long time on a monitor). To make this NPC not" + " prevent other NPCs from talking, make it not grab the semaphore when it speaks." =
		[
		0: "No (Use speech semaphore)"
		1: "Yes (Don't use speech semaphore)"
		]

	linedivider_npc(string) readonly : "----------------------------------------------------------------------------------------------------------"

	// Inputs
	input SetBodyGroup(integer) : "HACK: Sets this NPC's body group (from 0 - n). You'd better know what you are doing!"
	input SetExpressionOverride(string) : "Set a VCD file to override facial expressions on this NPC."
	]

@BaseClass base(BasePropPhysics) = BaseVehicle
	[
	vehiclescript(string) : "Vehicle Script File" : "scripts/vehicles/jeep_test.txt"
	actionscale(float) : "Scale of action input / framerate" : 1

	// Inputs
	input Action(float) : "Set the speed of the action animation"
	input TurnOn(void) : "Turn on: Start engine & enable throttle"
	input TurnOff(void) : "Turn off: Stop engine, disable throttle, engage brakes."
	input Lock(void) : "Prevent the player from entering or exiting the vehicle."
	input Unlock(void) : "Re-allow the player to enter or exit the vehicle."
	]

@BaseClass base(WeaponSpawnSingle) = WeaponSpawn
	[
	count(integer) : "Count" : 5 : "Max number of weapons given before disappearing."
	spawnflags(flags)  =
		[
		4: "[4] Absorb any dropped weapon type" : 0
		]

	]

@SolidClass base(func_brush) = func_block_charge: "Chargers will not charge through this brush"
	[
	]

@SolidClass base(BreakableBrush) 
	sphere(fademindist)
	sphere(fademaxdist)
	sphere(exploderadius)
= func_breakable: "A brush entity that can be broken from damage, or an input."
	[
	minhealthdmg(integer) : "Min Damage to Hurt" : 0 : "The prop will ignore any damage events if the damage is less than this amount."
	physdamagescale(float) : "Physics Impact Damage Scale" : "1.0" : "Scales damage energy when this object is hit by a physics object. NOTE: 0 means this feature is disabled for backwards compatibi" + "lity.\nSet to 1.0 for materials as strong as flesh, smaller numbers indicate stronger materials."
	]

@SolidClass base(BreakableBrush) 
	sphere(fademindist)
	sphere(fademaxdist)
	sphere(exploderadius)
	quadbounds()
= func_breakable_surf: "A breakable surface, for partially breakable glass / tile / etc. All faces but the desired visible one must be marked as NODRAW " + "and that face must be 4 sided. The material applied to the visible face must be set up to be breakable."
	[
	spawnflags(flags)  =
		[
		1: "[1] Physics damage decals" : 0
		2: "[2] Take damage from held objects" : 0
		4: "[4] Play break sound" : 0
		]

	health(integer) : "Health" : 5 : "The amount of damage the surface takes before breaking."
	fragility(integer) : "Fragility" : 100 : "If the 'Surface Type' is set to Glass, this value sets how fragile the glass pieces are after the surface has been broken. Lower" + " values make glass pieces tend to stay more."
	surfacetype(choices) : "Surface Type" : 0 : "Sets the behaviour of the brush. Glass shatters in multiple sizes, and easily breaks. Tile only breaks along edges, and is still" + " strong after being shattered." =
		[
		0: "Glass"
		1: "Tile"
		]

	lowerleft(vecline) readonly : "Lower Left Corner (readonly)" : : "This is set automatically by Hammer when saving."
	lowerright(vecline) readonly : "Lower Right Corner (readonly)" : : "This is set automatically by Hammer when saving."
	upperleft(vecline) readonly : "Upper Left Corner (readonly)" : : "This is set automatically by Hammer when saving."
	upperright(vecline) readonly : "Upper Right Corner (readonly)" : : "This is set automatically by Hammer when saving."
	error(choices) readonly : "Face Error" : 0 : "Set by Hammer to indicate an invalid glass/tile surface." =
		[
		0: "No Error"
		1: "Multiple Textured Faces"
		2: "Non-Square Face"
		]


	// Inputs
	input Shatter(vector) : "Shatter the window. Input a vector. First two coordinates are the X,Y center of the shattering (as values from from 0-1). The th" + "ird coordinate is the radius of the shatter, in units."
	]

@SolidClass base(Door, Origin) 
	sphere(fademindist)
	sphere(fademaxdist)
	line(255 255 255, targetname, master)
	line(255 255 255, targetname, chainstodoor)
= func_door: "A brush entity for use as a player-useable door."
	[
	movedir(angle) : "Move Direction (Pitch Yaw Roll)" : "0 0 0" : "The direction the door will move, when it opens."
	]

@SolidClass base(Door, Origin) 
	sphere(fademindist)
	sphere(fademaxdist)
	line(255 255 255, targetname, master)
	line(255 255 255, targetname, chainstodoor)
= func_door_rotating: "A brush entity for use as a rotating player-useable door."
	[
	spawnflags(flags)  =
		[
		2: "[2] Reverse Dir" : 0
		16: "[16] One-way" : 0
		64: "[64] X Axis" : 0
		128: "[128] Y Axis" : 0
		65536: "[65536] New func_door +USE rules (NOT for prop_doors!!)" : 0
		]

	distance(integer) : "Distance" : 90 : "The amount, in degrees, that the door should rotate when opened."
	solidbsp(choices) : "Solid Type" : 0 : "How to calculate collisions. BSP is more rudimentarty but allows more stable collision with players." =
		[
		0: "VPhysics"
		1: "BSP"
		]

	always_fire_blocked_outputs(choices) : "Always Fire Blocked Outputs" : 0 =
		[
		0: "No"
		1: "Yes"
		]

	]

@SolidClass base(func_brush) 
	sphere(fademindist)
	sphere(fademaxdist)
	line(255 255 0, targetname, target)
= func_monitor: "A monitor that renders the view from a given point_camera entity."
	[
	target(target_destination) : "Camera name"

	// Inputs
	input Toggle(void) : "Toggle - If on, turn off, if off, turn on."
	input Enable(void) : "Enable."
	input Disable(void) : "Disable."
	input SetCamera(target_destination) : "Sets the camera to use for this monitor. Takes the name of a point_camera entity in the map."
	]

@SolidClass base(BreakableBrush) 
	sphere(fademindist)
	sphere(fademaxdist)
	sphere(exploderadius)
= func_physbox: "A brush entity that's physically simulated."
	[
	spawnflags(flags)  =
		[
		16384: "[16384] Debris - Don't collide with the player or other debris" : 0
		32768: "[32768] Motion Disabled" : 0
		65536: "[65536] Use Preferred Carry Angles" : 0
		131072: "[131072] Enable motion on Physcannon grab" : 0
		262144: "[262144] Ignore +USE for Pickup" : 0
		524288: "[524288] Generate output on +USE " : 1
		1048576: "[1048576] Start Asleep" : 0
		2097152: "[2097152] Physgun is NOT allowed to pick this up." : 0
		4194304: "[4194304] Physgun is NOT allowed to punt this object." : 0
		8388608: "[8388608] Prevent motion enable on player bump" : 0
		]

	damagetype(choices) : "Impact Damage Type" : 0 =
		[
		0: "Blunt"
		1: "Sharp"
		]

	massscale(float) : "Mass Scale" : 0 : "A scale multiplier for the object's mass."
	overridescript(string) : "Override Parameters" : : "A list of physics key/value pairs that are usually in a physics prop .qc file. Format is 'key,value,key,value,etc'."
	damagetoenablemotion(integer) : "Health Level to Override Motion" : 0 : "If specified, this object will start motion disabled. Once its health has dropped below this specified amount, it will enable mo" + "tion."
	forcetoenablemotion(float) : "Physics Impact Force to Override Motion" : 0 : "If specified, this object will start motion disabled. Any impact that imparts a force greater than this value on the physbox wil" + "l enable motion."
	health(integer) : "Strength" : 0 : "Number of points of damage to take before breaking.  0 means don't break."
	preferredcarryangles(vector) : "Preferred Player-carry Angles" : "0 0 0" : "If the 'Use Preferred Carry Angles' spawnflag is set, this angle is the angle which the object should orient to when the player " + "picks it up, with the physgun or +USE."
	notsolid(choices) : "Not solid to world" : 0 =
		[
		0: "Solid to World"
		1: "Passes through World"
		]

	exploitablebyplayer(choices) : "Exploitable by Player" : 0 =
		[
		0: "Default"
		1: "Explosive"
		]


	// Inputs
	input Wake(void) : "Wake up this physics object, if it is sleeping."
	input Sleep(void) : "Put this physics object to sleep. It will wake if given the Wake input, or if force is applied to it. Note that physics objects " + "go to sleep automatically after coming to rest for a while, so you don't really need to use this."
	input EnableMotion(void) : "Enable physics motion/collision response."
	input DisableMotion(void) : "Disable physics motion/collision response."
	input ForceDrop(void) : "If this object is being carried by a player, with the physgun or +USE, force it to be dropped."

	// Outputs
	output OnDamaged(void) : "Fired when this entity is damaged."
	output OnAwakened(void) : "Fired when this entity becomes awake (collision/force is applied)."
	output OnMotionEnabled(void) : "Fired when motion is enabled due to damage/physcannon/force."
	output OnPhysGunPickup(void) : "Fired when a player picks this object up, either with the physgun or +USE."
	output OnPhysGunPunt(void) : "Fired when a player punts this object with the physgun."
	output OnPhysGunOnlyPickup(void) : "Fired when a player picks this object up WITH THE PHYSGUN. +USE pickups do not fire this output."
	output OnPhysGunDrop(void) : "Fired when a player drops this object."
	output OnPlayerUse(void) : "Fired when the player tries to +USE the physbox. This output will fire only if the Generate output on +USE spawnflag is set."
	]

@SolidClass base(func_brush) 
	sphere(fademindist)
	sphere(fademaxdist)
= func_playerghostinfected_clip: "Simple Clip brush that blocks player ghost infected movement."
	[
	]

@SolidClass base(func_brush) 
	sphere(fademindist)
	sphere(fademaxdist)
= func_playerinfected_clip: "Simple Clip brush that blocks player infected movement."
	[
	]

@SolidClass base(func_brush) 
	sphere(fademindist)
	sphere(fademaxdist)
= func_reflective_glass: "Used to produce perfectly reflective glass that renders world + entities. Typically, you want your glass brush to have nodraw on" + " all non-reflective surfaces and you want to use a shader like lightmappedreflective in your material applied to the non-nodraw " + "surfaces. See hl2/materials/glass/reflectiveglass001.vmt for an example. NOTE: currently, you cannot use reflective glass in sce" + "nes with water, and you can only have 1 reflective glass in your view frustum ( + pvs ) at a time. Players will not see their ow" + "n reflection unless they are in thirdperson mode."
	[
	]

@SolidClass base(BaseTrain) 
	sphere(fademindist)
	sphere(fademaxdist)
	line(255 255 0, targetname, target)
= func_tanktrain: "A moving train that follows a path of path_track entities, shoots at the player, and can be killed.\nNOTE: Build your train so t" + "hat the front of the train is facing down the X axis. When it spawns it will automatically rotate to face the next path_track on" + " the path."
	[
	health(integer) : "Health" : 100

	// Outputs
	output OnDeath(void) : "Fired when the tank is killed."
	]

@SolidClass base(func_trackchange) 
	line(255 255 255, targetname, train)
	line(0 255 0, targetname, toptrack)
	line(0 0 255, targetname, bottomtrack)
= func_trackautochange: "An entity that works as a rotating/moving platform that will carry a train to a new track. It must be larger in X-Y planar area " + "than the train, since it must contain the train within these dimensions in order to operate when the train is near it. The track" + " will rotate around its own origin. This entity will only allowed to be triggered if the train is on a path_track which is a dea" + "d end. If Auto Activate Train flag is ticked, train isn't paused at the top/bottom of the path after func_trackautochange has fi" + "nished it's movement. Instead, it will continue moving forward and doesn't need to be reactivated by trigger. If selected, the p" + "latform only rotates in place of it's origin without travelling specified altitude. The top and the bottom path_tracks should ha" + "ve their origin positioned in the same coordinates."
	[
	]

@SolidClass base(BaseTrain) 
	sphere(fademindist)
	sphere(fademaxdist)
	line(255 255 0, targetname, target)
= func_tracktrain: "A moving platform that the player can ride. It follows a path of path_track entities.\nNOTE: Build your train so that the front " + "of the train is facing down the X axis. When it spawns it will automatically rotate to face the next path_track on the path."
	[

	// Inputs
	input TeleportToPathNode(string) : "Teleport to a destination and stop there. This can be in a new path."

	// Outputs
	output OnStart(void) : "Fired when the train starts moving in either direction."
	output OnNextPoint(string) : "Fires continuously every frame when the train is moving to its next destination."
	output OnNext(string) : "Fires when this train picks a new point to move towards (and just after OnStart)."
	]

@SolidClass base(func_movelinear) 
	sphere(fademindist)
	sphere(fademaxdist)
	sphere(movedistance)
= func_water_analog: "A water brush entity that moves linearly along a given distance, in a given direction. This is identical to func_movelinear."
	[
	movedir(angle) : "Move Direction (Pitch Yaw Roll)" : "0 0 0" : "The direction the water will move, when told to 'Open'."
	startposition(float) : "Start Position" : 0 : "Position of the water brush when spawned.The range is a value between 0.0 and 1.0, where 0 is the starting position and 1 is the" + " starting position + (move direction * move distance)."
	speed(float) : "Speed" : 100 : "The speed that the water brush moves, in units per second."
	movedistance(float) : "Move Distance" : 100 : "The distance from the starting point that the water brush should move, in units."
	startsound(sound) : "Sound played when the water brush starts moving."
	stopsound(sound) : "Sound played when the water brush stops moving."
	waveheight(string) : "Wave Height" : "3.0"

	// Inputs
	input Open(void) : "Move the water brush to the end position (starting position + (move direction * move distance))."
	input Close(void) : "Move the water brush to the starting position."
	input SetPosition(string) : "Move the water brush to a specific position between 0.0 and 1.0, where 0 is the starting position and 1 is the starting position" + " + (move direction * move distance)."

	// Outputs
	output OnFullyOpen(void) : "Fired when the water brush reaches the end position (starting position + (move direction * move distance))."
	output OnFullyClosed(void) : "Fired when the water brush reaches the starting position."
	]

@NpcClass base(BaseLogicalNPC) 
	sphere(fademindist)
	sphere(fademaxdist)
	line(255 0 0, targetname, enemyfilter)
	iconsprite("editor/bullseye.vmt")
	color(255 0 0)
= npc_bullseye: "Dummy NPC for targeting or other behavior."
	[
	linedivider_npc(string) readonly : "----------------------------------------------------------------------------------------------------------"
	rendermode(choices) readonly : "Render Mode" : 1 : "This must be set to Color for Hammer to render the sprite correctly. It is not used in the engine." =
		[
		1: "Color"
		]

	health(integer) : "Health" : 35 : "Unlike other NPCs level designers are allowed to set the health on bullseyes."
	minangle(float) : "Minimum Angle" : 360 : "Angle from the bullseye required for bullseye to be a valid enemy."
	mindist(float) : "Minimum Distance" : 0 : "Distance from the bullseye required for bullseye to be a valid enemy."
	autoaimradius(float) : "Autoaim Radius" : 0 : "Radius of autoaim influence. Use ent_autoaim <picker> to visualize."
	spawnflags(flags)  =
		[
		65536: "[65536] Not Solid" : 0
		131072: "[131072] Take No Damage" : 0
		262144: "[262144] Enemy Damage Only" : 0
		524288: "[524288] Bleed" : 0
		1048576: "[1048576] Perfect Accuracy" : 0
		2097152: "[2097152] Collide against physics objects (Creates VPhysics Shadow)" : 0
		]


	// Outputs
	output InputTargeted(void) : "Fires the OnTargeted output."
	output InputReleased(void) : "Fires the OnReleased output."
	output OnTargeted(void) : "Fires when targeted."
	output OnReleased(void) : "Fires when no longer targeted."
	]

@NpcClass base(BaseLogicalNPC) 
	sphere(fademindist)
	sphere(fademaxdist)
	line(255 0 0, targetname, enemyfilter)
	color(255 150 0)
	iconsprite("editor/npc_enemyfinder.vmt")
	sphere(MinSearchDist)
	sphere(MaxSearchDist)
= npc_enemyfinder: "EnemyFinder"
	[
	spawnflags(flags)  =
		[
		65536: "[65536] Check Visibility" : 1
		131072: "[131072] APC Visibility checks" : 0
		262144: "[262144] Short memory" : 0
		524288: "[524288] Can be an enemy" : 0
		]

	fieldofview(string) : "FieldOfView" : "0.2" : "How far to look (1.0 = straight ahead, 0.0 = +/- 90 degrees, -1.0 = all directions)"
	minsearchdist(integer) : "Min Search Dist" : 0
	maxsearchdist(integer) : "Max Search Dist" : 2048
	freepass_timetotrigger(float) : "Player pass issue time" : 0 : "Amount of time an enemy is hidden after which a 'free pass' on reaquire is granted"
	freepass_duration(float) : "Player pass duration" : 0 : "After granted 'free pass', the amount of time a target is allowed before reaquire"
	freepass_movetolerance(float) : "Player pass move tolerance" : 120 : "After granted 'free pass', the distance the target is allowed to move before reaquire"
	freepass_refillrate(float) : "Player pass refill rate" : "0.5" : "After free pass begins expiring, how much the time the target gets back for every second they hide again"
	freepass_peektime(float) : "Player pass peek time" : 0 : "How long targets in cover are allowed to peek without penalty"
	starton(choices) : "Start On" : 1 =
		[
		0: "No"
		1: "Yes"
		]


	// Inputs
	input TurnOn(void) : "Turn on: Look for enemies"
	input TurnOff(void) : "Turn off: Stop looking for enemies"

	// Outputs
	output OnLostEnemies(void) : "Fires when the enemy finder has no enemies."
	output OnAcquireEnemies(void) : "Fires when the enemy finder acquires enemies."
	]

@PointClass base(prop_door_rotating) 
	sphere(fademindist)
	sphere(fademaxdist)
	studioprop()
= prop_door_rotating_checkpoint: "An entity used to place a special checkpoint door in the world."
	[
	]

@PointClass base(prop_dynamic_base, EnableDisable) 
	sphere(fademindist)
	sphere(fademaxdist)
	studioprop()
	sphere(exploderadius)
= prop_dynamic: "A prop that can be placed in hierarchy and can play animations. It can also be configured to break when it takes enough damage. " + "Note that the health of the object will be overridden by the health inside the model, to ensure consistent health game-wide. If " + "the model used by the prop is configured to be used as a prop_physics (i.e. it should be physically simulated) then it cannot no" + "rmally  be used as a prop_dynamic. Upon level load it will display a warning in the console and remove itself. Use a prop_dynami" + "c_override instead."
	[
	]

@PointClass base(prop_dynamic_base) 
	sphere(fademindist)
	sphere(fademaxdist)
	studioprop()
	sphere(exploderadius)
= prop_dynamic_ornament: "A way to attach one studio model to another as an ornament. It will render in the way that player/NPC weapons render."
	[
	solid(choices) : "Collisions" : 0 =
		[
		0: "Not Solid"
		]

	initialowner(target_destination) : "Target Entity" : : "Name of the entity that this ornament should attach to, at startup."

	// Inputs
	input SetAttached(target_destination) : "Attach the ornament to a different entity. Parameter should be the name of entity to attach to."
	input Detach(string) : "Detach from the Target Entity and become invisible. The ornament can be re-attached with the SetAttached input."
	]

@PointClass base(prop_dynamic_base, EnableDisable) 
	sphere(fademindist)
	sphere(fademaxdist)
	studioprop()
	sphere(exploderadius)
= prop_dynamic_override: "A variant of prop_dynamic that permits the use of any model, including those designed to be used as prop_dynamic/prop_static."
	[
	health(integer) : "Health" : 0 : "Number of points of damage to take before breaking.  0 means don't break."
	]

@PointClass base(prop_dynamic_base, EnableDisable) 
	sphere(fademindist)
	sphere(fademaxdist)
	studioprop()
	sphere(exploderadius)
= prop_health_cabinet: "Health Cabinet"
	[
	model(studio) : "World model" : "models/props_interiors/medicalcabinet02.mdl"
	healthcount(integer) : "Number of pain pills" : 1 : "Number of pain pills/first aid kits inside (1-4)"
	]

@PointClass base(prop_dynamic_base, EnableDisable) 
	sphere(fademindist)
	sphere(fademaxdist)
	studioprop()
	sphere(exploderadius)
	studioprop("models/w_models/weapons/w_minigun.mdl")
= prop_minigun: "A mounted gun players can +USE"
	[
	model(studio) : "World model" : "models/w_models/weapons/w_minigun.mdl"
	maxyaw(float) : "Max yaw" : 90 : "Max yaw the gun can be turned."
	maxpitch(float) : "Max pitch" : 60 : "Max pitch the gun can be depressed."
	minpitch(float) : "Min pitch" : -30 : "Min pitch the gun can be raised."

	// Outputs
	output OnFireStart(void) : "Fired when the minigun has spun up and is starting firing."
	output OnFireStop(void) : "Fired when the minigun has stopped firing."
	]

@PointClass base(prop_dynamic_base, EnableDisable) 
	sphere(fademindist)
	sphere(fademaxdist)
	studioprop()
	sphere(exploderadius)
	studioprop("models/w_models/weapons/w_minigun.mdl")
= prop_minigun_l4d1: "A mounted gun players can +USE"
	[
	model(studio) : "World model" : "models/w_models/weapons/w_minigun.mdl"
	maxyaw(float) : "Max yaw" : 90 : "Max yaw the gun can be turned."
	maxpitch(float) : "Max pitch" : 60 : "Max pitch the gun can be depressed."
	minpitch(float) : "Min pitch" : -30 : "Min pitch the gun can be raised."

	// Outputs
	output OnFireStart(void) : "Fired when the minigun has spun up and is starting firing."
	output OnFireStop(void) : "Fired when the minigun has stopped firing."
	]

@PointClass base(prop_dynamic_base, EnableDisable) 
	sphere(fademindist)
	sphere(fademaxdist)
	studioprop()
	sphere(exploderadius)
	studioprop("models/w_models/weapons/50cal.mdl")
= prop_mounted_machine_gun: "50 caliber mounted gun (+USE)"
	[
	model(studio) : "World model" : "models/w_models/weapons/50cal.mdl"
	maxyaw(float) : "Max yaw" : 90 : "Max yaw the gun can be turned."
	maxpitch(float) : "Max pitch" : 60 : "Max pitch the gun can be depressed."
	minpitch(float) : "Min pitch" : -30 : "Min pitch the gun can be raised."

	// Outputs
	output OnFireStart(void) : "Fired when the machine gun has starting firing."
	output OnFireStop(void) : "Fired when the machine gun has stopped firing."
	]

@PointClass base(BasePropPhysics, SetModel) 
	sphere(fademindist)
	sphere(fademaxdist)
	studioprop()
= prop_physics: "A prop that physically simulates as a single rigid body. It can be constrained to other physics objects using hinges or other co" + "nstraints. It can also be configured to break when it takes enough damage. Note that the health of the object will be overridden" + " by the health inside the model, to ensure consistent health game-wide. If the model used by the prop is configured to be used a" + "s a prop_dynamic (i.e. it should not be physically simulated) then it cannot normally be used as a prop_physics. Upon level load" + " it will display a warning in the console and remove itself. Use a prop_physics_override instead."
	[

	// Inputs
	input Ignite(void) : "Ignite, burst into flames."
	input IgniteLifetime(float) : "Ignite, with a parameter lifetime."
	input IgniteNumHitboxFires(integer) : "Ignite, with a parameternumber of hitbox fires."
	input IgniteHitboxFireScale(float) : "Ignite, with a parameter hitbox fire scale."
	]

@PointClass base(prop_ragdoll) 
	sphere(fademindist)
	sphere(fademaxdist)
	studioprop()
= prop_physics_ragdoll: "Alternate classname for prop_ragdoll"
	[
	]

@PointClass base(BasePropPhysics, SetModel) 
	sphere(fademindist)
	sphere(fademaxdist)
	studioprop()
	sphere(radius)
= prop_sphere: "A variant of prop_physics which has a perfect sphere shape. It is normally restricted to a radius of 12 units."
	[
	]

@PointClass base(BasePropPhysics) 
	sphere(fademindist)
	sphere(fademaxdist)
	studioprop()
= simple_physics_prop: "A simple physics prop with no unique properties. Model-based entities converted by phys_convert are turned into this entity, as " + "well as dissolving objects.See prop_physics for more options."
	[
	]

@SolidClass base(Trigger) 
	line(255 255 255, targetname, filtername)
= trigger_active_weapon_detect: "Fires output when touched by a player that has a specific weapon active"
	[
	weaponclassname(string) : "Weapon To Detect" : "weapon_dieselcan" : "weapon classname that player must have active"

	// Outputs
	output OnTouchedActiveWeapon(void) : "Touched a player who has our weapon active"
	]

@SolidClass base(Trigger) 
	line(255 255 255, targetname, filtername)
= trigger_auto_crouch: "Allows players touching the trigger to auto-crouch."
	[
	]

@SolidClass base(Trigger) 
	line(255 255 255, targetname, filtername)
	line(255 255 255, targetname, landmark)
	color(200 0 0)
= trigger_changelevel: "An entity that triggers a level change.\nPlace an info_landmark in both maps that marks the 'same' location in each map.\nTIPS &" + " TRICKS: To fire events in the next level, use the OnLevelChange output to turn on an env_global in the current level.  Create a" + " logic_auto in the next level that checks for the state set by the env_global.\n\nTo control which entities go through the level" + " transition, create one or more trigger_transitions and give them the same name as the landmark. Any entities within the trigger" + "_transition(s) will go to the next map."
	[
	map(string) : "New Map Name"
	landmark(target_destination) : "Landmark Name"
	spawnflags(flags)  =
		[
		2: "[2] Disable Touch" : 0
		4: "[4] To Previous Chapter" : 0
		]


	// Inputs
	input ChangeLevel(void) : "Cause the level change. Use this when triggering the level change with a button, etc."

	// Outputs
	output OnChangeLevel(void) : "Fired when the level changes."
	]

@SolidClass base(Trigger) 
	line(255 255 255, targetname, filtername)
= trigger_escape: "Indicates if there are Survivors in the volume who can escape the finale"
	[

	// Outputs
	output OnEscapePossible(void) : "Fired if there is at least 1 survivor standing in the trigger"
	output OnEscapeImpossible(void) : "Fired if there are no survivors standing in the trigger"
	]

@SolidClass base(Trigger) 
	line(255 255 255, targetname, filtername)
= trigger_gravity: "A trigger volume that changes the gravity on any entity that touches it."
	[
	gravity(integer) : "Gravity (0-1)" : 1
	]

@SolidClass base(Trigger, MasterEnt, DamageType) 
	line(255 255 255, targetname, filtername)
	line(255 255 255, targetname, master)
= trigger_hurt: "A trigger volume that damages entities that touch it."
	[
	damage(integer) : "Damage" : 20 : "The amount of damage done to entities that touch this trigger. The damage is done every half-second. See also 'Damage Model' for" + " extra details on how damage can be dealt."
	damagecap(integer) : "Damage Cap" : 20 : "The maximum amount of damage that can be dealt when using the Doubling w/Forgiveness damage model."
	damagemodel(choices) : "Damage Model" : 0 : "How damage is dealt. Normal always does the specified amount of damage each half second. Doubling w/Forgiveness starts with the " + "specified amount and doubles it each time it hurts the toucher, resetting when they leave the trigger. Good for making triggers " + "that are deadly over time, without having to cause massive damage on each touch." =
		[
		0: "Normal"
		1: "Doubling w/forgiveness"
		]

	nodmgforce(choices) : "Zero Damage Force" : 0 : "Should the damaged entity receive no physics force from this trigger." =
		[
		0: "No"
		1: "Yes"
		]

	damageforce(vector) : "Damage Force Override"
	thinkalways(choices) : "Always think every frame" : 0 : "Normally triggers think every half second, in some cases you may need to request it to damage every frame. This is expensive!" =
		[
		0: "No"
		1: "Yes"
		]


	// Inputs
	input SetDamage(float) : "Set a new amount of damage for this trigger."

	// Outputs
	output OnHurt(void) : "Fired whenever this trigger hurts something other than a player."
	output OnHurtPlayer(void) : "Fired whenever this trigger hurts a player."
	]

@SolidClass base(Trigger, Origin, Angles) 
	line(255 255 255, targetname, filtername)
= trigger_impact: "A trigger volume that can be told to push all physics objects that are inside of it in the direction specified by this trigger's" + " angles.\nAlso outputs the force at the time of impact for anyone else that wants to use it."
	[
	magnitude(float) : "Magnitude" : 200 : "The strength of the impact. Negative values reverse the direction."
	noise(float) : "Noise" : "0.1" : "The amount of directional noise (0-1). 0 = no noise, 1 = random direction."
	viewkick(float) : "Viewkick" : "0.05" : "The amount to kick player's view if the player is in the trigger.  Proportional to magnitude (0-1)."

	// Inputs
	input Impact(float) : "Fire the impact, pushing all entities within the volume."
	input SetMagnitude(float) : "Set the magnitude of the impact."

	// Outputs
	output ImpactForce(string) : "Fired after an impact. The parameter passed along is the force of the impact that was generated."
	]

@SolidClass base(Trigger) 
	line(255 255 255, targetname, filtername)
	line(255 255 0, targetname, target)
= trigger_look: "An entity used to trigger something when the player looks at something. It fires 'OnTrigger' when the player looks at a target e" + "ntity for the given amount of time, while within the trigger volume. If the player leaves the trigger or looks away from the tar" + "get entity the clock resets. If the 'Use Velocity instead of facing' spawnflag is checked, the trigger uses the player's velocit" + "y instead of the player's view, so it determines whenever the player is moving toward the target entity. Useful for triggering w" + "hen players are driving a vehicle at something. NOTE: Only designed for single-player game. "
	[
	spawnflags(flags)  =
		[
		128: "[128] Fire Once" : 1
		256: "[256] Use Velocity instead of facing" : 0
		]

	target(target_destination) : "Look Target" : : "The name of the entity to be looked at."
	looktime(string) : "LookTime" : "0.5" : "The time, in seconds, that the player must look the target before firing the output. Resets if player leaves trigger, or looks o" + "utside the Field of View threshold."
	fieldofview(string) : "FieldOfView" : "0.9" : "How close the player has to be looking at the target. 1.0 = straight ahead\n 0.0 = +/- 90 degrees\n -1.0 = all directions)."
	timeout(float) : "Timeout" : 0 : "The time, in seconds, to wait after player enters the trigger before firing the OnTimeout output, 0 = never."
	notlookingfrequency(float) : "Not-Looking Frequency" : "0.5" : "time in second between 2 fires of OnNotLooking output."

	// Outputs
	output OnTrigger(void) : "Fired when the trigger is activated."
	output OnTimeout(void) : "Fired after the timeout interval expires if the player never looked at the target."
	]

@SolidClass base(Trigger) 
	line(255 255 255, targetname, filtername)
= trigger_multiple: "A trigger volume that can be triggered multiple times."
	[
	wait(integer) : "Delay Before Reset" : 1 : "Amount of time, in seconds, after the trigger_multiple has triggered before it can be triggered again. If set to -1, it will nev" + "er trigger again (in which case you should just use a trigger_once)."
	entireteam(choices) : "Entire Team Number" : 0 : "If the entire team is touching, fire OnEntireTeamStartTouch." =
		[
		0: "None"
		2: "Survivor"
		3: "Infected"
		]

	allowincap(choices) : "Incapacitated players can trigger" : 0 =
		[
		0: "No"
		1: "Yes"
		]

	allowghost(choices) : "Ghost players can trigger" : 0 =
		[
		0: "No"
		1: "Yes"
		]


	// Outputs
	output OnEntireTeamStartTouch(void) : "Fired when an entire team starts touching the trigger."
	output OnEntireTeamEndTouch(void) : "Fired when an entire team stops touching the trigger."
	]

@SolidClass base(Trigger) 
	line(255 255 255, targetname, filtername)
= trigger_playermovement: "An entity that can be used to disable player's automatic ducking/unducking when jumping."
	[
	spawnflags(flags)  =
		[
		16: "[16] (OBSOLETE, Uncheck me)" : 0
		128: "[128] Disable auto player movement" : 1
		2048: "[2048] Auto-duck while in trigger" : 0
		4096: "[4096] Auto-walk while in trigger" : 0
		8192: "[8192] Disable jump while in trigger" : 1
		]

	]

@SolidClass base(Trigger) 
	line(255 255 255, targetname, filtername)
	line(255 255 255, targetname, measuretarget)
	sphere(radius)
= trigger_proximity: "Measures the distance of the player within the trigger volume from a given point (and within a given radius). The NearestPlayerD" + "istance output will be 0 when the player is at the center point, and 1 when the player is at the radius."
	[
	measuretarget(target_destination) : "Point to Measure From" : : "The name of a target entity who's origin is the point to measure the player's distance from."
	radius(float) : "Radius to measure within" : 256 : "The radius to which the distance should be mapped. If the player is outside the radius he will be ignored."

	// Outputs
	output NearestEntityDistance(float) : "Fired continuously when entities are touching the trigger volume. The output parameter is the distance from the Point to Measure" + " From to the nearest entity that passed the trigger filters. The distance is mapped to the radius distance, so it will be 0 when" + " the entity is on the point, and 1 when the entity is at the edge of the radius.!activator is the closest entity."
	]

@SolidClass base(Trigger) 
	line(255 255 255, targetname, filtername)
= trigger_push: "A trigger volume that pushes entities that touch it."
	[
	pushdir(angle) : "Push Direction (Pitch Yaw Roll)" : "0 0 0" : "Angles indicating the direction to push touched entities."
	spawnflags(flags)  =
		[
		128: "[128] Once Only" : 0
		256: "[256] Affects Ladders (Half-Life 2)" : 0
		]

	speed(integer) : "Speed of Push" : 40 : "The speed at which to push entities away, in inches / second."
	alternateticksfix(float) : "Scale force for alternate ticks" : 0 : "If nonzero, scale the force by this amount when running with alternate ticks. This fixes problems with an overly large force due" + " to the longer frametime on when running with sv_alternateticks 1."
	triggeronstarttouch(choices) : "Trigger on Start Touch" : 0 : "Trigger on start touch instead of on touch." =
		[
		0: "No"
		1: "Yes"
		]


	// Inputs
	input SetPushSpeed(integer) : "Set the push speed in inches / second."
	]

@SolidClass base(Trigger) 
	line(255 255 255, targetname, filtername)
= trigger_remove: "A trigger volume that removes any entities that touch it. Be careful, removing some entities can cause instability. This is not " + "the same as killing entities. i.e. NPCs removed in this manner will not fire their OnKilled outputs."
	[

	// Outputs
	output OnRemove(void) : "Fired whenever an entity is removed."
	]

@SolidClass base(Trigger) 
	line(255 255 255, targetname, filtername)
= trigger_serverragdoll: "A volume that forces any NPC inside it to create a server side ragdoll instead of a client one."
	[
	]

@SolidClass base(Trigger) 
	line(255 255 255, targetname, filtername)
	line(255 255 255, targetname, soundscape)
= trigger_soundscape: "Soundscape trigger. It is not necessary to create outputs for this trigger. It automatically will trigger the soundscape referre" + "d to by its 'Soundscape' property."
	[
	soundscape(target_source) : "Soundscape"
	]

@SolidClass base(Trigger) 
	line(255 255 255, targetname, filtername)
	line(255 255 0, targetname, target)
	line(0 255 0, target, landmark)
= trigger_teleport: "A trigger volume that teleports entities that touch it. Entities are teleported to the Remote Destination, and have their angles" + " set to that of the Remote Destination's. If a Local Destination Landmark is specified, teleported entities are offset from the " + "target by their initial offset from the landmark, and their angles are left alone."
	[
	target(target_destination) : "Remote Destination" : : "The entity specifying the point to which entities should be teleported."
	landmark(target_destination) : "Local Destination Landmark" : : "If specified, then teleported entities are offset from the target by their initial offset from the landmark."
	spawnflags(flags)  =
		[
		32: "[32] Preserve angles even when a local landmark is not specified" : 0
		1: "[1] Clients/Players" : 1
		2: "[2] NPCs" : 0
		4: "[4] func_pushable" : 0
		8: "[8] Physics Objects" : 0
		16: "[16] Only player ally NPCs" : 0
		64: "[64] Everything (not including physics debris)" : 0
		512: "[512] Only clients *not* in vehicles" : 0
		1024: "[1024] Physics debris" : 0
		2048: "[2048] Only NPCs in vehicles (respects player ally flag)" : 0
		4096: "[4096] Correctly account for object mass (trigger_push used to assume 100Kg) and multiple component physobjs (car, blob...)" : 1
		]

	]

@SolidClass base(Trigger, EnableDisable) 
	line(255 255 255, targetname, filtername)
= trigger_togglesave: "A trigger volume that autosaves each time the player touches it. After it is triggered, it must be Enabled before it will activa" + "te again."
	[
	]

@SolidClass base(Trigger) 
	line(255 255 255, targetname, filtername)
= trigger_tonemap: "Changes tonemap controllers for players touching the trigger."
	[
	tonemapname(target_destination) : "Tonemap Name" : : "The name of the tonemap controller entity associated with this trigger."
	]

@SolidClass base(Trigger, Origin) 
	line(255 255 255, targetname, filtername)
= trigger_transition: "A volume that's used to control which entities go through the level transition. Create one or more trigger_transitions and give " + "them the same name as the changelevel landmark. Any entities within the trigger_transition(s) will go to the next map. See trigg" + "er_changelevel for more info."
	[
	]

@SolidClass base(Trigger) 
	line(255 255 255, targetname, filtername)
= trigger_upgrade_laser_sight: "Gives laser sight upgrade to players that touch."
	[
	]

@SolidClass base(Trigger) 
	line(255 255 255, targetname, filtername)
= trigger_vphysics_motion: "A volumetric trigger that affects the motion of vphysics objects that touch it."
	[
	spawnflags(flags)  =
		[
		4096: "[4096] Can move (through hierarchical attachment)" : 0
		]

	setgravityscale(float) : "Gravity Scale" : "1.0" : "Scale gravity of objects in the field by this amount."
	setadditionalairdensity(float) : "Additional air density for drag" : 0
	setvelocitylimit(float) : "Velocity Limit" : "0.0" : "Max velocity in field (0 disables)"
	setvelocitylimitdelta(float) : "Velocity Limit Force" : "0.0" : "Max amount to reduce velocity per second when it exceeds the velocity limit (0 disables)"
	setvelocityscale(float) : "Velocity scale/drag" : "1.0"
	setangvelocitylimit(float) : "Angular Velocity Limit" : "0.0" : "Max angular velocity in field (degrees/s, 0 disables)"
	setangvelocityscale(float) : "Angular Velocity scale/drag" : "1.0"
	setlinearforce(float) : "Linear force" : "0.0" : "Amount of force to apply while in the trigger (0 disables)"
	setlinearforceangles(angle) : "Force Direction" : "0 0 0" : "Direction of linear force (Pitch Yaw Roll or Y Z X)"
	particletrailmaterial(material) : "Particle Trail Material" : : "Name of a material to use for the particle trail, no name means no particle trail"
	particletraillifetime(float) : "Particle Trail Lifetime" : 4 : "Lifetime of the particles to emit"
	particletrailstartsize(float) : "Particle Trail Starting Sprite Size" : 2 : "Starting size of the sprite to emit"
	particletrailendsize(float) : "Particle Trail Ending Sprite Size" : 3 : "Ending size of the sprite to emit"

	// Inputs
	input SetGravityScale(float) : "Scale gravity of objects in the field."
	input SetAdditionalAirDensity(float) : "Additional air density for drag"
	input SetVelocityLimit(float) : "Max velocity in field."
	input SetVelocityLimitDelta(float) : "Max amount to reduce velocity per second"
	input SetVelocityLimitTime(string) : "Accepts two arguments: the first is the new velocity limit, the second is the time it takes to ramp to that value"
	input SetVelocityScale(float) : "Velocity scale/drag"
	input SetAngVelocityLimit(float) : "Max angular velocity in field."
	input SetAngVelocityScale(float) : "Angular Velocity scale/drag"
	input SetLinearForce(float) : "Linear force (0 disables)"
	]

@SolidClass base(Trigger, Angles) 
	line(255 255 255, targetname, filtername)
= trigger_wind: "A trigger volume that pushes physics objects that touch it."
	[
	speed(integer) : "Speed" : 200 : "The baseline for how hard the wind blows."
	speednoise(integer) : "Speed Noise" : 0 : "Noise added to wind speed +/-"
	directionnoise(integer) : "Direction Noise" : 10 : "Noise added to wind direction."
	holdtime(integer) : "Hold Time" : 0 : "Baseline for how long to wait before changing wind."
	holdnoise(integer) : "Hold Noise" : 0 : "Noise added to how long to wait before changing wind."

	// Inputs
	input SetSpeed(integer) : "Set the baseline for how hard the wind blows."
	]

@PointClass base(WeaponSpawnSingle) 
	sphere(fademindist)
	sphere(fademaxdist)
	color(0 0 200)
	studioprop("models/w_models/weapons/w_eq_adrenaline.mdl")
= weapon_adrenaline_spawn: "Adrenaline"
	[
	]

@PointClass base(WeaponSpawnSingle) 
	sphere(fademindist)
	sphere(fademaxdist)
	color(0 0 200)
	studioprop("models/w_models/weapons/w_eq_defibrillator.mdl")
= weapon_defibrillator_spawn: "Defibrillator"
	[
	]

@PointClass base(WeaponSpawnSingle) 
	sphere(fademindist)
	sphere(fademaxdist)
	color(0 0 200)
	studioprop("models/w_models/weapons/w_eq_Medkit.mdl")
= weapon_first_aid_kit: "Physics First Aid Kit - This entity is intended to be used in scripted events where a single item needs to spawned with physics " + "active."
	[
	]

@PointClass base(WeaponSpawnSingle) 
	sphere(fademindist)
	sphere(fademaxdist)
	color(0 0 200)
	studioprop("models/w_models/weapons/w_eq_Medkit.mdl")
= weapon_first_aid_kit_spawn: "First Aid Kit"
	[
	]

@PointClass base(WeaponSpawnSingle) 
	sphere(fademindist)
	sphere(fademaxdist)
	color(0 0 200)
	studioprop("models/props_junk/gascan001a.mdl")
= weapon_gascan_spawn: "Gas Can"
	[
	]

@PointClass base(WeaponSpawnSingle) 
	sphere(fademindist)
	sphere(fademaxdist)
	color(0 0 200)
	studioprop("models/w_models/weapons/w_grenade_launcher.mdl")
= weapon_grenade_launcher: "Grenade Launcher - This entity is intended to be used in scripted events where a single item needs to spawned with physics activ" + "e."
	[
	]

@PointClass base(WeaponSpawnSingle) 
	sphere(fademindist)
	sphere(fademaxdist)
	color(0 0 200)
	studioprop("models/w_models/weapons/w_eq_painpills.mdl")
= weapon_pain_pills_spawn: "Painkillers"
	[
	]

@PointClass base(WeaponSpawnSingle) 
	sphere(fademindist)
	sphere(fademaxdist)
	color(0 0 200)
	studioprop("models/props_junk/gascan001a.mdl")
= weapon_scavenge_item_spawn: "Scavenge Item"
	[
	glowstate(choices) : "Initial Glow State" : 3 =
		[
		0: "OFF"
		3: "ON"
		]


	// Inputs
	input SpawnItem(void) : "Spawn an instance of a scavenge mode item."
	input TurnGlowsOn(void) : "All current and future spawned items should glow."
	input TurnGlowsOff(void) : "All current and future spawned items should not glow."

	// Outputs
	output OnItemPickedUp(void) : "Fired when this spawner's scavenge item is picked up by a player."
	]

@PointClass base(WeaponSpawnSingle) 
	sphere(fademindist)
	sphere(fademaxdist)
	color(0 0 200)
	studioprop("models/w_models/weapons/w_eq_explosive_ammopack.mdl")
= weapon_upgradepack_explosive_spawn: "Upgrade Pack - Explosive"
	[
	]

@PointClass base(WeaponSpawnSingle) 
	sphere(fademindist)
	sphere(fademaxdist)
	color(0 0 200)
	studioprop("models/w_models/weapons/w_eq_incendiary_ammopack.mdl")
= weapon_upgradepack_incendiary_spawn: "Upgrade Pack - Incendiary"
	[
	]

@BaseClass base(BaseVehicle) = BaseDriveableVehicle
	[
	vehiclelocked(choices) : "Start locked" : 0 =
		[
		0: "No"
		1: "Yes"
		]


	// Inputs
	input HandBrakeOn(void) : "Turns the handbrake on"
	input HandBrakeOff(void) : "Releases the handbrake"

	// Outputs
	output PlayerOn(void) : "Player entered the vehicle"
	output PlayerOff(void) : "Player exited the vehicle"
	output PressedAttack(void) : "Player Pressed attack key"
	output PressedAttack2(void) : "Player Pressed attack2 key"
	output AttackAxis(string) : "State of attack button [0,1]"
	output Attack2Axis(string) : "State of attack2 button [0,1]"
	]

@PointClass base(prop_dynamic) = dynamic_prop: "Alternate name for prop_dynamic."
	[
	]

@SolidClass base(func_physbox) 
	sphere(fademindist)
	sphere(fademaxdist)
	sphere(exploderadius)
= func_physbox_multiplayer: "This class is the same as func_physbox, except the runtime collisions use a more bouncy method that avoids the prediction errors" + " normal physics objects get."
	[
	]

@SolidClass base(func_breakable) 
	sphere(fademindist)
	sphere(fademaxdist)
	sphere(exploderadius)
= func_pushable: "A brush with primitive physics that can be pushed around."
	[
	size(choices) : "Hull Size" : 0 =
		[
		0: "Point size"
		1: "Player size"
		2: "Big Size"
		3: "Player duck"
		]

	spawnflags(flags)  =
		[
		1: "[1] Only Break on Trigger" : 0
		2: "[2] Break on Touch" : 0
		4: "[4] Break on Pressure" : 0
		512: "[512] Break immediately on Physics" : 0
		1024: "[1024] Don't take physics damage" : 0
		2048: "[2048] Don't allow bullet penetration" : 0
		128: "[128] Breakable" : 0
		]

	friction(integer) : "Friction" : 50 : "This determines the amount of resistance the brush will give when the player pushes it. Range is 0 to 400, where 400 is the most" + " resistance."
	]

@SolidClass base(func_door) 
	sphere(fademindist)
	sphere(fademaxdist)
	line(255 255 255, targetname, master)
	line(255 255 255, targetname, chainstodoor)
= func_water: "Special variant of func_door with water collision physics."
	[
	]

@PointClass base(BaseNPC, SetModel) 
	sphere(fademindist)
	sphere(fademaxdist)
	color(0 200 200)
	studioprop()
	studio()
	size(-4 -4 -4, 4 4 4)
= generic_actor: "Generic Actor NPC"
	[
	hull_name(choices) : "Hull type" : "HUMAN_HULL" =
		[
		"HUMAN_HULL": "Human"
		"WIDE_HUMAN_HULL": "Wide"
		"TINY_HULL": "Tiny"
		"MEDIUM_HULL": "Medium"
		"LARGE_HULL": "Large"
		]

	defaultanim(string) : "Default Animation" : : "The name of the idle animation that this prop will revert to whenever it finishes a random or forced animation."
	randomanimation(choices) : "Randomly Animate" : 0 : "If set, this prop will randomly choose and play animations, based upon the times specified in Min/Max Random Anim Time. Inbetwee" + "n the random animations, it will revert to playing the 'Default Animation'." =
		[
		0: "No"
		1: "Yes"
		]

	]

@PointClass base(BaseNPC) 
	sphere(fademindist)
	sphere(fademaxdist)
	color(0 200 200)
	studio()
	bbox(-4 -4 -4, 4 4 4)
= monster_generic: "Generic Script NPC"
	[
	spawnflags(flags)  =
		[
		65536: "[65536] Not solid" : 0
		]

	model(studio) : "Model"
	body(integer) : "Body" : 0
	]

@PointClass base(BaseNPC, SetModel) 
	sphere(fademindist)
	sphere(fademaxdist)
	color(0 200 200)
	studioprop()
	studio()
= npc_furniture: "An entity used for non-NPCs that need to synchronise their animation with an NPC in a scripted_sequence. Usually a piece of furn" + "iture or door that an NPC needs to manipulate within a scripted_sequence."
	[

	// Inputs
	input DisablePlayerCollision(void) : "Disable collisions against the player."
	input EnablePlayerCollision(void) : "Enable collisions against the player."
	]

@PointClass base(prop_physics) 
	studioprop()
	sphere(fademindist)
	sphere(fademaxdist)
= physics_prop: "Alternate name for prop_physics."
	[
	]

@PointClass base(prop_physics, EnableDisable) 
	studioprop()
	sphere(fademindist)
	sphere(fademaxdist)
= prop_car_alarm: "This class is the same as prop_physics, with a car alarm."
	[

	// Outputs
	output OnCarAlarmStart(void) : "Car alarm should go off"
	output OnCarAlarmEnd(void) : "Car alarm has shut off"
	output OnCarAlarmChirpStart(void)
	output OnCarAlarmChirpEnd(void)
	]

@PointClass base(prop_dynamic) 
	studioprop()
	sphere(fademindist)
	sphere(fademaxdist)
= prop_car_glass: "This class is the same as prop_dynamic, with a car alarm."
	[
	]

@PointClass base(prop_physics) 
	sphere(fademindist)
	sphere(fademaxdist)
	studioprop()
= prop_physics_multiplayer: "This class is the same as prop_physics, except the runtime collisions use a more bouncy method that avoids the prediction errors" + " normal physics objects get."
	[
	physicsmode(choices) : "Physics Mode" : 0 =
		[
		0: "Auto Detect"
		1: "Solid, Server-side"
		2: "Non-Solid, Server-side"
		3: "Non-Solid, Client-side"
		]

	]

@PointClass base(prop_physics) 
	sphere(fademindist)
	sphere(fademaxdist)
	studioprop()
= prop_physics_override: "A variant of prop_physics which will permit using models that do not have physics data compiled into them, like static or dynami" + "c models. Health and physics data can be overridden on this version, to subsitute for the missing info."
	[
	health(integer) : "Health" : 0 : "Number of points of damage to take before breaking.  0 means don't break."
	]

@SolidClass base(trigger_hurt) 
	line(255 255 255, targetname, filtername)
	line(255 255 255, targetname, master)
= trigger_hurt_ghost: "A trigger volume that damages entities (and ghosts) that touch it."
	[
	]

@PointClass base(WeaponSpawn) 
	color(0 0 200)
	studioprop()
= weapon_ammo_spawn: "Ammo"
	[
	]

@PointClass base(WeaponSpawn) 
	color(0 0 200)
	studioprop("models/w_models/Weapons/w_autoshot_m4super.mdl")
= weapon_autoshotgun_spawn: "Auto Shotgun"
	[
	]

@PointClass base(WeaponSpawn) 
	color(0 0 200)
	studioprop("models/weapons/melee/w_chainsaw.mdl")
= weapon_chainsaw_spawn: "Chainsaw"
	[
	]

@PointClass base(WeaponSpawn) 
	color(0 0 200)
	studioprop("models/w_models/weapons/w_grenade_launcher.mdl")
= weapon_grenade_launcher_spawn: "Grenade Launcher"
	[
	]

@PointClass base(WeaponSpawn) 
	color(0 0 200)
	studioprop("models/w_models/Weapons/w_sniper_mini14.mdl")
= weapon_hunting_rifle_spawn: "Hunting Rifle"
	[
	]

@PointClass base(WeaponSpawn) 
	color(0 0 200)
	studioprop("models/weapons/melee/w_fireaxe.mdl")
= weapon_melee_spawn: "Melee Weapon"
	[
	melee_weapon(string) : "Melee Weapon" : "any" : "Options: 'Any' or a comma-delimited string of melee weapon script names. Leave blank for none."
	]

@PointClass base(WeaponSpawn) 
	color(0 0 200)
	studioprop("models/w_models/weapons/w_eq_molotov.mdl")
= weapon_molotov_spawn: "Molotov"
	[
	]

@PointClass base(WeaponSpawn) 
	color(0 0 200)
	studioprop("models/w_models/weapons/w_eq_pipebomb.mdl")
= weapon_pipe_bomb_spawn: "Pipe Bomb"
	[
	]

@PointClass base(WeaponSpawn) 
	color(0 0 200)
	studioprop("models/w_models/Weapons/w_desert_eagle.mdl")
= weapon_pistol_magnum_spawn: "Magnum Pistol"
	[
	]

@PointClass base(WeaponSpawn) 
	color(0 0 200)
	studioprop("models/w_models/Weapons/w_pistol_a.mdl")
= weapon_pistol_spawn: "Pistols"
	[
	]

@PointClass base(WeaponSpawn) 
	color(0 0 200)
	studioprop("models/w_models/Weapons/w_shotgun.mdl")
= weapon_pumpshotgun_spawn: "Pump Shotgun"
	[
	]

@PointClass base(WeaponSpawn) 
	color(0 0 200)
	studioprop("models/w_models/Weapons/w_rifle_ak47.mdl")
= weapon_rifle_ak47_spawn: "AK47"
	[
	]

@PointClass base(WeaponSpawn) 
	color(0 0 200)
	studioprop("models/w_models/Weapons/w_rifle_B.mdl")
= weapon_rifle_desert_spawn: "Desert Rifle"
	[
	]

@PointClass base(WeaponSpawn) 
	color(0 0 200)
	studioprop("models/w_models/Weapons/w_m60.mdl")
= weapon_rifle_m60_spawn: "M60 Machinegun"
	[
	]

@PointClass base(WeaponSpawn) 
	color(0 0 200)
	studioprop("models/w_models/Weapons/w_rifle_m16a2.mdl")
= weapon_rifle_spawn: "Assault Rifle"
	[
	]

@PointClass base(WeaponSpawn) 
	color(0 0 200)
	studioprop("models/w_models/Weapons/w_pumpshotgun_A.mdl")
= weapon_shotgun_chrome_spawn: "Chrome Shotgun"
	[
	]

@PointClass base(WeaponSpawn) 
	color(0 0 200)
	studioprop("models/w_models/Weapons/w_shotgun_spas.mdl")
= weapon_shotgun_spas_spawn: "SPAS Shotgun"
	[
	]

@PointClass base(WeaponSpawn) 
	color(0 0 200)
	studioprop("models/w_models/Weapons/w_smg_uzi.mdl")
= weapon_smg_silenced_spawn: "MicroUZI"
	[
	]

@PointClass base(WeaponSpawn) 
	color(0 0 200)
	studioprop("models/w_models/Weapons/w_smg_uzi.mdl")
= weapon_smg_spawn: "Submachinegun"
	[
	]

@PointClass base(WeaponSpawn) 
	color(0 0 200)
	studioprop("models/w_models/Weapons/w_sniper_military.mdl")
= weapon_sniper_military_spawn: "Military Sniper Rifle"
	[
	]

@PointClass base(WeaponSpawn) 
	color(0 0 200)
	studioprop("models/w_models/Weapons/w_rifle_m16a2.mdl")
= weapon_spawn: "Configurable Weapon Spawner"
	[
	weapon_selection(choices) : "Selection" : "any_primary" : "Spawn the selected weapon or weapon category" =
		[
		"any": "Any primary or secondary weapon"
		"any_pistol": "Any Pistol"
		"weapon_pistol": "Pistol"
		"weapon_pistol_magnum": "Magnum Pistol"
		"any_primary": "Any Primary Weapon"
		"tier1_any": "Any tier 1 primary"
		"tier2_any": "Any tier 2 primary"
		"any_smg": "Any tier 1 SMG"
		"any_rifle": "Any tier 2 Rifle"
		"any_sniper_rifle": "Any tier 2 Sniper Rifle"
		"any_shotgun": "Any Shotgun"
		"tier1_shotgun": "Any tier 1 Shotgun"
		"tier2_shotgun": "Any tier 2 Shotgun"
		"weapon_smg": "SMG"
		"weapon_smg_silenced": "Silenced SMG"
		"weapon_pumpshotgun": "Pump Shotgun"
		"weapon_shotgun_chrome": "Chrome Shotgun"
		"weapon_autoshotgun": "Auto Shotgun"
		"weapon_shotgun_spas": "SPAS Shotgun"
		"weapon_rifle": "M4 Rifle"
		"weapon_rifle_desert": "Desert Rifle"
		"weapon_rifle_ak47": "AK47"
		"weapon_hunting_rifle": "Hunting Rifle"
		"weapon_sniper_military": "Sniper Military"
		]

	spawn_without_director(choices) : "Spawn instantly without director" : 0 : "Bypass the proximity checks that make nearby weapons be the same tier / not the same weapon." =
		[
		0: "No"
		1: "Yes"
		]

	]

@PointClass base(WeaponSpawn) 
	color(0 0 200)
	studioprop("models/w_models/weapons/w_eq_bile_flask.mdl")
= weapon_vomitjar_spawn: "Vomit Jar"
	[
	]

@PointClass base(BaseDriveableVehicle, SetModel) 
	studioprop()
	color(240 180 250)
= prop_vehicle_choreo_generic: "Generic Choreo vehicle used for magical events."
	[
	model(studio) : "World model" : : "Model to use."
	vehiclescript(string) : "Vehicle Script File" : "scripts/vehicles/choreo_vehicle.txt"
	ignoreplayer(choices) : "Ignore Player collision" : 0 : "The player won't collide against this vehicle when moving around." =
		[
		0: "No"
		1: "Yes"
		]


	// Inputs
	input Open(void) : "Plays the vehicle's open animation and unlocks the vehicle for entry or exit."
	input Close(void) : "Plays the vehicle's close animation and locks the vehicle for entry or exit."
	input EnterVehicle(void) : "Forces the activator (or player) into the vehicle."
	input EnterVehicleImmediate(void) : "Forces the activator (or player) into the vehicle without enter/exit animations."
	input ExitVehicle(void) : "Boots the player out of the vehicle."
	input Viewlock(bool) : "Set true to prevent the player from looking around *at all*. Set false to let them look within limits."
	input SetAnimation(string) : "Force the prop to play an animation. The parameter should be the name of the animation."

	// Outputs
	output OnOpen(void) : "Fired when the vehicle is open enough to enter."
	output OnClose(void) : "Fired when the vehicle is too closed to enter."
	]

@PointClass base(BaseDriveableVehicle, SetModel) 
	studioprop()
= prop_vehicle_driveable: "Generic driveable studiomodel vehicle."
	[
	]
